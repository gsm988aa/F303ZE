
F303ZE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005950  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005af0  08005af0  00015af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bd4  08005bd4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005bd4  08005bd4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bd4  08005bd4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bd4  08005bd4  00015bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bd8  08005bd8  00015bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000070  08005c4c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08005c4c  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f386  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a6  00000000  00000000  0002f426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00031bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac0  00000000  00000000  000327a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228e2  00000000  00000000  00033268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f9a  00000000  00000000  00055b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd01a  00000000  00000000  00066ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00133afe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037e8  00000000  00000000  00133b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ad8 	.word	0x08005ad8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005ad8 	.word	0x08005ad8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b08a      	sub	sp, #40	; 0x28
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000296:	f107 031c 	add.w	r3, r7, #28
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
 80002ae:	611a      	str	r2, [r3, #16]
 80002b0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002b2:	4b2e      	ldr	r3, [pc, #184]	; (800036c <MX_ADC1_Init+0xdc>)
 80002b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002ba:	4b2c      	ldr	r3, [pc, #176]	; (800036c <MX_ADC1_Init+0xdc>)
 80002bc:	2200      	movs	r2, #0
 80002be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002c0:	4b2a      	ldr	r3, [pc, #168]	; (800036c <MX_ADC1_Init+0xdc>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002c6:	4b29      	ldr	r3, [pc, #164]	; (800036c <MX_ADC1_Init+0xdc>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002cc:	4b27      	ldr	r3, [pc, #156]	; (800036c <MX_ADC1_Init+0xdc>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002d2:	4b26      	ldr	r3, [pc, #152]	; (800036c <MX_ADC1_Init+0xdc>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002da:	4b24      	ldr	r3, [pc, #144]	; (800036c <MX_ADC1_Init+0xdc>)
 80002dc:	2200      	movs	r2, #0
 80002de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002e0:	4b22      	ldr	r3, [pc, #136]	; (800036c <MX_ADC1_Init+0xdc>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002e6:	4b21      	ldr	r3, [pc, #132]	; (800036c <MX_ADC1_Init+0xdc>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80002ec:	4b1f      	ldr	r3, [pc, #124]	; (800036c <MX_ADC1_Init+0xdc>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80002f2:	4b1e      	ldr	r3, [pc, #120]	; (800036c <MX_ADC1_Init+0xdc>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002fa:	4b1c      	ldr	r3, [pc, #112]	; (800036c <MX_ADC1_Init+0xdc>)
 80002fc:	2204      	movs	r2, #4
 80002fe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000300:	4b1a      	ldr	r3, [pc, #104]	; (800036c <MX_ADC1_Init+0xdc>)
 8000302:	2200      	movs	r2, #0
 8000304:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000306:	4b19      	ldr	r3, [pc, #100]	; (800036c <MX_ADC1_Init+0xdc>)
 8000308:	2200      	movs	r2, #0
 800030a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800030c:	4817      	ldr	r0, [pc, #92]	; (800036c <MX_ADC1_Init+0xdc>)
 800030e:	f001 f859 	bl	80013c4 <HAL_ADC_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000318:	f000 fd25 	bl	8000d66 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800031c:	2300      	movs	r3, #0
 800031e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000320:	f107 031c 	add.w	r3, r7, #28
 8000324:	4619      	mov	r1, r3
 8000326:	4811      	ldr	r0, [pc, #68]	; (800036c <MX_ADC1_Init+0xdc>)
 8000328:	f001 fd32 	bl	8001d90 <HAL_ADCEx_MultiModeConfigChannel>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000332:	f000 fd18 	bl	8000d66 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000336:	2301      	movs	r3, #1
 8000338:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800033a:	2301      	movs	r3, #1
 800033c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800033e:	2300      	movs	r3, #0
 8000340:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000342:	2300      	movs	r3, #0
 8000344:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	4619      	mov	r1, r3
 8000352:	4806      	ldr	r0, [pc, #24]	; (800036c <MX_ADC1_Init+0xdc>)
 8000354:	f001 fa30 	bl	80017b8 <HAL_ADC_ConfigChannel>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800035e:	f000 fd02 	bl	8000d66 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	3728      	adds	r7, #40	; 0x28
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	2000017c 	.word	0x2000017c

08000370 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000376:	463b      	mov	r3, r7
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
 8000380:	60da      	str	r2, [r3, #12]
 8000382:	611a      	str	r2, [r3, #16]
 8000384:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000386:	4b27      	ldr	r3, [pc, #156]	; (8000424 <MX_ADC2_Init+0xb4>)
 8000388:	4a27      	ldr	r2, [pc, #156]	; (8000428 <MX_ADC2_Init+0xb8>)
 800038a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800038c:	4b25      	ldr	r3, [pc, #148]	; (8000424 <MX_ADC2_Init+0xb4>)
 800038e:	2200      	movs	r2, #0
 8000390:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000392:	4b24      	ldr	r3, [pc, #144]	; (8000424 <MX_ADC2_Init+0xb4>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000398:	4b22      	ldr	r3, [pc, #136]	; (8000424 <MX_ADC2_Init+0xb4>)
 800039a:	2200      	movs	r2, #0
 800039c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800039e:	4b21      	ldr	r3, [pc, #132]	; (8000424 <MX_ADC2_Init+0xb4>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003a4:	4b1f      	ldr	r3, [pc, #124]	; (8000424 <MX_ADC2_Init+0xb4>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003ac:	4b1d      	ldr	r3, [pc, #116]	; (8000424 <MX_ADC2_Init+0xb4>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003b2:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <MX_ADC2_Init+0xb4>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b8:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <MX_ADC2_Init+0xb4>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80003be:	4b19      	ldr	r3, [pc, #100]	; (8000424 <MX_ADC2_Init+0xb4>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80003c4:	4b17      	ldr	r3, [pc, #92]	; (8000424 <MX_ADC2_Init+0xb4>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003cc:	4b15      	ldr	r3, [pc, #84]	; (8000424 <MX_ADC2_Init+0xb4>)
 80003ce:	2204      	movs	r2, #4
 80003d0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80003d2:	4b14      	ldr	r3, [pc, #80]	; (8000424 <MX_ADC2_Init+0xb4>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <MX_ADC2_Init+0xb4>)
 80003da:	2200      	movs	r2, #0
 80003dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003de:	4811      	ldr	r0, [pc, #68]	; (8000424 <MX_ADC2_Init+0xb4>)
 80003e0:	f000 fff0 	bl	80013c4 <HAL_ADC_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80003ea:	f000 fcbc 	bl	8000d66 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80003ee:	230c      	movs	r3, #12
 80003f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f2:	2301      	movs	r3, #1
 80003f4:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000406:	463b      	mov	r3, r7
 8000408:	4619      	mov	r1, r3
 800040a:	4806      	ldr	r0, [pc, #24]	; (8000424 <MX_ADC2_Init+0xb4>)
 800040c:	f001 f9d4 	bl	80017b8 <HAL_ADC_ConfigChannel>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000416:	f000 fca6 	bl	8000d66 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800041a:	bf00      	nop
 800041c:	3718      	adds	r7, #24
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	200000e8 	.word	0x200000e8
 8000428:	50000100 	.word	0x50000100

0800042c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b08a      	sub	sp, #40	; 0x28
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000432:	f107 031c 	add.w	r3, r7, #28
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
 800044a:	611a      	str	r2, [r3, #16]
 800044c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800044e:	4b2d      	ldr	r3, [pc, #180]	; (8000504 <MX_ADC3_Init+0xd8>)
 8000450:	4a2d      	ldr	r2, [pc, #180]	; (8000508 <MX_ADC3_Init+0xdc>)
 8000452:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000454:	4b2b      	ldr	r3, [pc, #172]	; (8000504 <MX_ADC3_Init+0xd8>)
 8000456:	2200      	movs	r2, #0
 8000458:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800045a:	4b2a      	ldr	r3, [pc, #168]	; (8000504 <MX_ADC3_Init+0xd8>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000460:	4b28      	ldr	r3, [pc, #160]	; (8000504 <MX_ADC3_Init+0xd8>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000466:	4b27      	ldr	r3, [pc, #156]	; (8000504 <MX_ADC3_Init+0xd8>)
 8000468:	2200      	movs	r2, #0
 800046a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800046c:	4b25      	ldr	r3, [pc, #148]	; (8000504 <MX_ADC3_Init+0xd8>)
 800046e:	2200      	movs	r2, #0
 8000470:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000474:	4b23      	ldr	r3, [pc, #140]	; (8000504 <MX_ADC3_Init+0xd8>)
 8000476:	2200      	movs	r2, #0
 8000478:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800047a:	4b22      	ldr	r3, [pc, #136]	; (8000504 <MX_ADC3_Init+0xd8>)
 800047c:	2201      	movs	r2, #1
 800047e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000480:	4b20      	ldr	r3, [pc, #128]	; (8000504 <MX_ADC3_Init+0xd8>)
 8000482:	2200      	movs	r2, #0
 8000484:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000486:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <MX_ADC3_Init+0xd8>)
 8000488:	2201      	movs	r2, #1
 800048a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800048c:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <MX_ADC3_Init+0xd8>)
 800048e:	2200      	movs	r2, #0
 8000490:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <MX_ADC3_Init+0xd8>)
 8000496:	2204      	movs	r2, #4
 8000498:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800049a:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <MX_ADC3_Init+0xd8>)
 800049c:	2200      	movs	r2, #0
 800049e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004a0:	4b18      	ldr	r3, [pc, #96]	; (8000504 <MX_ADC3_Init+0xd8>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80004a6:	4817      	ldr	r0, [pc, #92]	; (8000504 <MX_ADC3_Init+0xd8>)
 80004a8:	f000 ff8c 	bl	80013c4 <HAL_ADC_Init>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80004b2:	f000 fc58 	bl	8000d66 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80004ba:	f107 031c 	add.w	r3, r7, #28
 80004be:	4619      	mov	r1, r3
 80004c0:	4810      	ldr	r0, [pc, #64]	; (8000504 <MX_ADC3_Init+0xd8>)
 80004c2:	f001 fc65 	bl	8001d90 <HAL_ADCEx_MultiModeConfigChannel>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80004cc:	f000 fc4b 	bl	8000d66 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004d0:	2301      	movs	r3, #1
 80004d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004d4:	2301      	movs	r3, #1
 80004d6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004d8:	2300      	movs	r3, #0
 80004da:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	4619      	mov	r1, r3
 80004ec:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_ADC3_Init+0xd8>)
 80004ee:	f001 f963 	bl	80017b8 <HAL_ADC_ConfigChannel>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80004f8:	f000 fc35 	bl	8000d66 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80004fc:	bf00      	nop
 80004fe:	3728      	adds	r7, #40	; 0x28
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	200001cc 	.word	0x200001cc
 8000508:	50000400 	.word	0x50000400

0800050c <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000512:	463b      	mov	r3, r7
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]
 8000520:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC4_Init 1 */

  /* USER CODE END ADC4_Init 1 */
  /** Common config
  */
  hadc4.Instance = ADC4;
 8000522:	4b27      	ldr	r3, [pc, #156]	; (80005c0 <MX_ADC4_Init+0xb4>)
 8000524:	4a27      	ldr	r2, [pc, #156]	; (80005c4 <MX_ADC4_Init+0xb8>)
 8000526:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000528:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <MX_ADC4_Init+0xb4>)
 800052a:	2200      	movs	r2, #0
 800052c:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800052e:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <MX_ADC4_Init+0xb4>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000534:	4b22      	ldr	r3, [pc, #136]	; (80005c0 <MX_ADC4_Init+0xb4>)
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800053a:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <MX_ADC4_Init+0xb4>)
 800053c:	2200      	movs	r2, #0
 800053e:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <MX_ADC4_Init+0xb4>)
 8000542:	2200      	movs	r2, #0
 8000544:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000548:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <MX_ADC4_Init+0xb4>)
 800054a:	2200      	movs	r2, #0
 800054c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800054e:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <MX_ADC4_Init+0xb4>)
 8000550:	2201      	movs	r2, #1
 8000552:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000554:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <MX_ADC4_Init+0xb4>)
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <MX_ADC4_Init+0xb4>)
 800055c:	2201      	movs	r2, #1
 800055e:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000560:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <MX_ADC4_Init+0xb4>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000568:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_ADC4_Init+0xb4>)
 800056a:	2204      	movs	r2, #4
 800056c:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800056e:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <MX_ADC4_Init+0xb4>)
 8000570:	2200      	movs	r2, #0
 8000572:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <MX_ADC4_Init+0xb4>)
 8000576:	2200      	movs	r2, #0
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800057a:	4811      	ldr	r0, [pc, #68]	; (80005c0 <MX_ADC4_Init+0xb4>)
 800057c:	f000 ff22 	bl	80013c4 <HAL_ADC_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 8000586:	f000 fbee 	bl	8000d66 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800058a:	2301      	movs	r3, #1
 800058c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800058e:	2301      	movs	r3, #1
 8000590:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	4619      	mov	r1, r3
 80005a6:	4806      	ldr	r0, [pc, #24]	; (80005c0 <MX_ADC4_Init+0xb4>)
 80005a8:	f001 f906 	bl	80017b8 <HAL_ADC_ConfigChannel>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 80005b2:	f000 fbd8 	bl	8000d66 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000260 	.word	0x20000260
 80005c4:	50000500 	.word	0x50000500

080005c8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC34_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b098      	sub	sp, #96	; 0x60
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80005e8:	f040 80a0 	bne.w	800072c <HAL_ADC_MspInit+0x164>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80005ec:	4b96      	ldr	r3, [pc, #600]	; (8000848 <HAL_ADC_MspInit+0x280>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	4a95      	ldr	r2, [pc, #596]	; (8000848 <HAL_ADC_MspInit+0x280>)
 80005f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80005f6:	4b94      	ldr	r3, [pc, #592]	; (8000848 <HAL_ADC_MspInit+0x280>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d10b      	bne.n	8000616 <HAL_ADC_MspInit+0x4e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80005fe:	4b93      	ldr	r3, [pc, #588]	; (800084c <HAL_ADC_MspInit+0x284>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a92      	ldr	r2, [pc, #584]	; (800084c <HAL_ADC_MspInit+0x284>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b90      	ldr	r3, [pc, #576]	; (800084c <HAL_ADC_MspInit+0x284>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
 8000614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000616:	4b8d      	ldr	r3, [pc, #564]	; (800084c <HAL_ADC_MspInit+0x284>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a8c      	ldr	r2, [pc, #560]	; (800084c <HAL_ADC_MspInit+0x284>)
 800061c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b8a      	ldr	r3, [pc, #552]	; (800084c <HAL_ADC_MspInit+0x284>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800062a:	647b      	str	r3, [r7, #68]	; 0x44
 800062c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	4b87      	ldr	r3, [pc, #540]	; (800084c <HAL_ADC_MspInit+0x284>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4a86      	ldr	r2, [pc, #536]	; (800084c <HAL_ADC_MspInit+0x284>)
 8000634:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000638:	6153      	str	r3, [r2, #20]
 800063a:	4b84      	ldr	r3, [pc, #528]	; (800084c <HAL_ADC_MspInit+0x284>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
 8000644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b81      	ldr	r3, [pc, #516]	; (800084c <HAL_ADC_MspInit+0x284>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a80      	ldr	r2, [pc, #512]	; (800084c <HAL_ADC_MspInit+0x284>)
 800064c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000650:	6153      	str	r3, [r2, #20]
 8000652:	4b7e      	ldr	r3, [pc, #504]	; (800084c <HAL_ADC_MspInit+0x284>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800065c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b7b      	ldr	r3, [pc, #492]	; (800084c <HAL_ADC_MspInit+0x284>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4a7a      	ldr	r2, [pc, #488]	; (800084c <HAL_ADC_MspInit+0x284>)
 8000664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000668:	6153      	str	r3, [r2, #20]
 800066a:	4b78      	ldr	r3, [pc, #480]	; (800084c <HAL_ADC_MspInit+0x284>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
 8000674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB11     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000676:	2314      	movs	r3, #20
 8000678:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800067a:	2303      	movs	r3, #3
 800067c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000682:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000686:	4619      	mov	r1, r3
 8000688:	4871      	ldr	r0, [pc, #452]	; (8000850 <HAL_ADC_MspInit+0x288>)
 800068a:	f001 ff0b 	bl	80024a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800068e:	230f      	movs	r3, #15
 8000690:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000692:	2303      	movs	r3, #3
 8000694:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800069e:	4619      	mov	r1, r3
 80006a0:	486c      	ldr	r0, [pc, #432]	; (8000854 <HAL_ADC_MspInit+0x28c>)
 80006a2:	f001 feff 	bl	80024a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006a6:	230f      	movs	r3, #15
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006aa:	2303      	movs	r3, #3
 80006ac:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006b6:	4619      	mov	r1, r3
 80006b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006bc:	f001 fef2 	bl	80024a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c6:	2303      	movs	r3, #3
 80006c8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006d2:	4619      	mov	r1, r3
 80006d4:	4860      	ldr	r0, [pc, #384]	; (8000858 <HAL_ADC_MspInit+0x290>)
 80006d6:	f001 fee5 	bl	80024a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006da:	4b60      	ldr	r3, [pc, #384]	; (800085c <HAL_ADC_MspInit+0x294>)
 80006dc:	4a60      	ldr	r2, [pc, #384]	; (8000860 <HAL_ADC_MspInit+0x298>)
 80006de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006e0:	4b5e      	ldr	r3, [pc, #376]	; (800085c <HAL_ADC_MspInit+0x294>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006e6:	4b5d      	ldr	r3, [pc, #372]	; (800085c <HAL_ADC_MspInit+0x294>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ec:	4b5b      	ldr	r3, [pc, #364]	; (800085c <HAL_ADC_MspInit+0x294>)
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006f2:	4b5a      	ldr	r3, [pc, #360]	; (800085c <HAL_ADC_MspInit+0x294>)
 80006f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006fa:	4b58      	ldr	r3, [pc, #352]	; (800085c <HAL_ADC_MspInit+0x294>)
 80006fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000700:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000702:	4b56      	ldr	r3, [pc, #344]	; (800085c <HAL_ADC_MspInit+0x294>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000708:	4b54      	ldr	r3, [pc, #336]	; (800085c <HAL_ADC_MspInit+0x294>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800070e:	4853      	ldr	r0, [pc, #332]	; (800085c <HAL_ADC_MspInit+0x294>)
 8000710:	f001 fda1 	bl	8002256 <HAL_DMA_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <HAL_ADC_MspInit+0x156>
    {
      Error_Handler();
 800071a:	f000 fb24 	bl	8000d66 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a4e      	ldr	r2, [pc, #312]	; (800085c <HAL_ADC_MspInit+0x294>)
 8000722:	639a      	str	r2, [r3, #56]	; 0x38
 8000724:	4a4d      	ldr	r2, [pc, #308]	; (800085c <HAL_ADC_MspInit+0x294>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 800072a:	e1be      	b.n	8000aaa <HAL_ADC_MspInit+0x4e2>
  else if(adcHandle->Instance==ADC2)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a4c      	ldr	r2, [pc, #304]	; (8000864 <HAL_ADC_MspInit+0x29c>)
 8000732:	4293      	cmp	r3, r2
 8000734:	f040 809c 	bne.w	8000870 <HAL_ADC_MspInit+0x2a8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000738:	4b43      	ldr	r3, [pc, #268]	; (8000848 <HAL_ADC_MspInit+0x280>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	3301      	adds	r3, #1
 800073e:	4a42      	ldr	r2, [pc, #264]	; (8000848 <HAL_ADC_MspInit+0x280>)
 8000740:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000742:	4b41      	ldr	r3, [pc, #260]	; (8000848 <HAL_ADC_MspInit+0x280>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d10b      	bne.n	8000762 <HAL_ADC_MspInit+0x19a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800074a:	4b40      	ldr	r3, [pc, #256]	; (800084c <HAL_ADC_MspInit+0x284>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a3f      	ldr	r2, [pc, #252]	; (800084c <HAL_ADC_MspInit+0x284>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	6153      	str	r3, [r2, #20]
 8000756:	4b3d      	ldr	r3, [pc, #244]	; (800084c <HAL_ADC_MspInit+0x284>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	637b      	str	r3, [r7, #52]	; 0x34
 8000760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b3a      	ldr	r3, [pc, #232]	; (800084c <HAL_ADC_MspInit+0x284>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	4a39      	ldr	r2, [pc, #228]	; (800084c <HAL_ADC_MspInit+0x284>)
 8000768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800076c:	6153      	str	r3, [r2, #20]
 800076e:	4b37      	ldr	r3, [pc, #220]	; (800084c <HAL_ADC_MspInit+0x284>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000776:	633b      	str	r3, [r7, #48]	; 0x30
 8000778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	4b34      	ldr	r3, [pc, #208]	; (800084c <HAL_ADC_MspInit+0x284>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	4a33      	ldr	r2, [pc, #204]	; (800084c <HAL_ADC_MspInit+0x284>)
 8000780:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000784:	6153      	str	r3, [r2, #20]
 8000786:	4b31      	ldr	r3, [pc, #196]	; (800084c <HAL_ADC_MspInit+0x284>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b2e      	ldr	r3, [pc, #184]	; (800084c <HAL_ADC_MspInit+0x284>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a2d      	ldr	r2, [pc, #180]	; (800084c <HAL_ADC_MspInit+0x284>)
 8000798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800079c:	6153      	str	r3, [r2, #20]
 800079e:	4b2b      	ldr	r3, [pc, #172]	; (800084c <HAL_ADC_MspInit+0x284>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80007a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007aa:	23f0      	movs	r3, #240	; 0xf0
 80007ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ae:	2303      	movs	r3, #3
 80007b0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007ba:	4619      	mov	r1, r3
 80007bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c0:	f001 fe70 	bl	80024a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80007c4:	2330      	movs	r3, #48	; 0x30
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c8:	2303      	movs	r3, #3
 80007ca:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007d4:	4619      	mov	r1, r3
 80007d6:	481f      	ldr	r0, [pc, #124]	; (8000854 <HAL_ADC_MspInit+0x28c>)
 80007d8:	f001 fe64 	bl	80024a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007dc:	2304      	movs	r3, #4
 80007de:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e0:	2303      	movs	r3, #3
 80007e2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007ec:	4619      	mov	r1, r3
 80007ee:	481a      	ldr	r0, [pc, #104]	; (8000858 <HAL_ADC_MspInit+0x290>)
 80007f0:	f001 fe58 	bl	80024a4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <HAL_ADC_MspInit+0x2a0>)
 80007f6:	4a1d      	ldr	r2, [pc, #116]	; (800086c <HAL_ADC_MspInit+0x2a4>)
 80007f8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007fa:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <HAL_ADC_MspInit+0x2a0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <HAL_ADC_MspInit+0x2a0>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <HAL_ADC_MspInit+0x2a0>)
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <HAL_ADC_MspInit+0x2a0>)
 800080e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000812:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <HAL_ADC_MspInit+0x2a0>)
 8000816:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800081a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_ADC_MspInit+0x2a0>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <HAL_ADC_MspInit+0x2a0>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000828:	480f      	ldr	r0, [pc, #60]	; (8000868 <HAL_ADC_MspInit+0x2a0>)
 800082a:	f001 fd14 	bl	8002256 <HAL_DMA_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <HAL_ADC_MspInit+0x270>
      Error_Handler();
 8000834:	f000 fa97 	bl	8000d66 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <HAL_ADC_MspInit+0x2a0>)
 800083c:	639a      	str	r2, [r3, #56]	; 0x38
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <HAL_ADC_MspInit+0x2a0>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000844:	e131      	b.n	8000aaa <HAL_ADC_MspInit+0x4e2>
 8000846:	bf00      	nop
 8000848:	2000008c 	.word	0x2000008c
 800084c:	40021000 	.word	0x40021000
 8000850:	48001400 	.word	0x48001400
 8000854:	48000800 	.word	0x48000800
 8000858:	48000400 	.word	0x48000400
 800085c:	2000021c 	.word	0x2000021c
 8000860:	40020008 	.word	0x40020008
 8000864:	50000100 	.word	0x50000100
 8000868:	200002b0 	.word	0x200002b0
 800086c:	40020408 	.word	0x40020408
  else if(adcHandle->Instance==ADC3)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a8f      	ldr	r2, [pc, #572]	; (8000ab4 <HAL_ADC_MspInit+0x4ec>)
 8000876:	4293      	cmp	r3, r2
 8000878:	f040 8089 	bne.w	800098e <HAL_ADC_MspInit+0x3c6>
    HAL_RCC_ADC34_CLK_ENABLED++;
 800087c:	4b8e      	ldr	r3, [pc, #568]	; (8000ab8 <HAL_ADC_MspInit+0x4f0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	4a8d      	ldr	r2, [pc, #564]	; (8000ab8 <HAL_ADC_MspInit+0x4f0>)
 8000884:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000886:	4b8c      	ldr	r3, [pc, #560]	; (8000ab8 <HAL_ADC_MspInit+0x4f0>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d10b      	bne.n	80008a6 <HAL_ADC_MspInit+0x2de>
      __HAL_RCC_ADC34_CLK_ENABLE();
 800088e:	4b8b      	ldr	r3, [pc, #556]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	4a8a      	ldr	r2, [pc, #552]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 8000894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000898:	6153      	str	r3, [r2, #20]
 800089a:	4b88      	ldr	r3, [pc, #544]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
 80008a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b85      	ldr	r3, [pc, #532]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a84      	ldr	r2, [pc, #528]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80008ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008b0:	6153      	str	r3, [r2, #20]
 80008b2:	4b82      	ldr	r3, [pc, #520]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ba:	623b      	str	r3, [r7, #32]
 80008bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80008be:	4b7f      	ldr	r3, [pc, #508]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	4a7e      	ldr	r2, [pc, #504]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80008c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008c8:	6153      	str	r3, [r2, #20]
 80008ca:	4b7c      	ldr	r3, [pc, #496]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008d2:	61fb      	str	r3, [r7, #28]
 80008d4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d6:	4b79      	ldr	r3, [pc, #484]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a78      	ldr	r2, [pc, #480]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80008dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008e0:	6153      	str	r3, [r2, #20]
 80008e2:	4b76      	ldr	r3, [pc, #472]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 80008ee:	f242 0303 	movw	r3, #8195	; 0x2003
 80008f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f4:	2303      	movs	r3, #3
 80008f6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000900:	4619      	mov	r1, r3
 8000902:	486f      	ldr	r0, [pc, #444]	; (8000ac0 <HAL_ADC_MspInit+0x4f8>)
 8000904:	f001 fdce 	bl	80024a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000908:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 800090c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090e:	2303      	movs	r3, #3
 8000910:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000916:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800091a:	4619      	mov	r1, r3
 800091c:	4869      	ldr	r0, [pc, #420]	; (8000ac4 <HAL_ADC_MspInit+0x4fc>)
 800091e:	f001 fdc1 	bl	80024a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000922:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8000926:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000928:	2303      	movs	r3, #3
 800092a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000930:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000934:	4619      	mov	r1, r3
 8000936:	4864      	ldr	r0, [pc, #400]	; (8000ac8 <HAL_ADC_MspInit+0x500>)
 8000938:	f001 fdb4 	bl	80024a4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 800093c:	4b63      	ldr	r3, [pc, #396]	; (8000acc <HAL_ADC_MspInit+0x504>)
 800093e:	4a64      	ldr	r2, [pc, #400]	; (8000ad0 <HAL_ADC_MspInit+0x508>)
 8000940:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000942:	4b62      	ldr	r3, [pc, #392]	; (8000acc <HAL_ADC_MspInit+0x504>)
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000948:	4b60      	ldr	r3, [pc, #384]	; (8000acc <HAL_ADC_MspInit+0x504>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800094e:	4b5f      	ldr	r3, [pc, #380]	; (8000acc <HAL_ADC_MspInit+0x504>)
 8000950:	2280      	movs	r2, #128	; 0x80
 8000952:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000954:	4b5d      	ldr	r3, [pc, #372]	; (8000acc <HAL_ADC_MspInit+0x504>)
 8000956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800095a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800095c:	4b5b      	ldr	r3, [pc, #364]	; (8000acc <HAL_ADC_MspInit+0x504>)
 800095e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000962:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000964:	4b59      	ldr	r3, [pc, #356]	; (8000acc <HAL_ADC_MspInit+0x504>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800096a:	4b58      	ldr	r3, [pc, #352]	; (8000acc <HAL_ADC_MspInit+0x504>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000970:	4856      	ldr	r0, [pc, #344]	; (8000acc <HAL_ADC_MspInit+0x504>)
 8000972:	f001 fc70 	bl	8002256 <HAL_DMA_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_ADC_MspInit+0x3b8>
      Error_Handler();
 800097c:	f000 f9f3 	bl	8000d66 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a52      	ldr	r2, [pc, #328]	; (8000acc <HAL_ADC_MspInit+0x504>)
 8000984:	639a      	str	r2, [r3, #56]	; 0x38
 8000986:	4a51      	ldr	r2, [pc, #324]	; (8000acc <HAL_ADC_MspInit+0x504>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800098c:	e08d      	b.n	8000aaa <HAL_ADC_MspInit+0x4e2>
  else if(adcHandle->Instance==ADC4)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a50      	ldr	r2, [pc, #320]	; (8000ad4 <HAL_ADC_MspInit+0x50c>)
 8000994:	4293      	cmp	r3, r2
 8000996:	f040 8088 	bne.w	8000aaa <HAL_ADC_MspInit+0x4e2>
    HAL_RCC_ADC34_CLK_ENABLED++;
 800099a:	4b47      	ldr	r3, [pc, #284]	; (8000ab8 <HAL_ADC_MspInit+0x4f0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	3301      	adds	r3, #1
 80009a0:	4a45      	ldr	r2, [pc, #276]	; (8000ab8 <HAL_ADC_MspInit+0x4f0>)
 80009a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 80009a4:	4b44      	ldr	r3, [pc, #272]	; (8000ab8 <HAL_ADC_MspInit+0x4f0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d10b      	bne.n	80009c4 <HAL_ADC_MspInit+0x3fc>
      __HAL_RCC_ADC34_CLK_ENABLE();
 80009ac:	4b43      	ldr	r3, [pc, #268]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	4a42      	ldr	r2, [pc, #264]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80009b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80009b6:	6153      	str	r3, [r2, #20]
 80009b8:	4b40      	ldr	r3, [pc, #256]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009c4:	4b3d      	ldr	r3, [pc, #244]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	4a3c      	ldr	r2, [pc, #240]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80009ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ce:	6153      	str	r3, [r2, #20]
 80009d0:	4b3a      	ldr	r3, [pc, #232]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	4b37      	ldr	r3, [pc, #220]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	4a36      	ldr	r2, [pc, #216]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80009e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e6:	6153      	str	r3, [r2, #20]
 80009e8:	4b34      	ldr	r3, [pc, #208]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f4:	4b31      	ldr	r3, [pc, #196]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	4a30      	ldr	r2, [pc, #192]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 80009fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009fe:	6153      	str	r3, [r2, #20]
 8000a00:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <HAL_ADC_MspInit+0x4f4>)
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a0c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a10:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a12:	2303      	movs	r3, #3
 8000a14:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4828      	ldr	r0, [pc, #160]	; (8000ac4 <HAL_ADC_MspInit+0x4fc>)
 8000a22:	f001 fd3f 	bl	80024a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8000a26:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4821      	ldr	r0, [pc, #132]	; (8000ac0 <HAL_ADC_MspInit+0x4f8>)
 8000a3c:	f001 fd32 	bl	80024a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a44:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a46:	2303      	movs	r3, #3
 8000a48:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a52:	4619      	mov	r1, r3
 8000a54:	481c      	ldr	r0, [pc, #112]	; (8000ac8 <HAL_ADC_MspInit+0x500>)
 8000a56:	f001 fd25 	bl	80024a4 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <HAL_ADC_MspInit+0x510>)
 8000a5c:	4a1f      	ldr	r2, [pc, #124]	; (8000adc <HAL_ADC_MspInit+0x514>)
 8000a5e:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <HAL_ADC_MspInit+0x510>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <HAL_ADC_MspInit+0x510>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <HAL_ADC_MspInit+0x510>)
 8000a6e:	2280      	movs	r2, #128	; 0x80
 8000a70:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <HAL_ADC_MspInit+0x510>)
 8000a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a78:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <HAL_ADC_MspInit+0x510>)
 8000a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a80:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_NORMAL;
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <HAL_ADC_MspInit+0x510>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <HAL_ADC_MspInit+0x510>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000a8e:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <HAL_ADC_MspInit+0x510>)
 8000a90:	f001 fbe1 	bl	8002256 <HAL_DMA_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_ADC_MspInit+0x4d6>
      Error_Handler();
 8000a9a:	f000 f964 	bl	8000d66 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <HAL_ADC_MspInit+0x510>)
 8000aa2:	639a      	str	r2, [r3, #56]	; 0x38
 8000aa4:	4a0c      	ldr	r2, [pc, #48]	; (8000ad8 <HAL_ADC_MspInit+0x510>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000aaa:	bf00      	nop
 8000aac:	3760      	adds	r7, #96	; 0x60
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	50000400 	.word	0x50000400
 8000ab8:	20000090 	.word	0x20000090
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	48000400 	.word	0x48000400
 8000ac4:	48001000 	.word	0x48001000
 8000ac8:	48000c00 	.word	0x48000c00
 8000acc:	20000138 	.word	0x20000138
 8000ad0:	40020458 	.word	0x40020458
 8000ad4:	50000500 	.word	0x50000500
 8000ad8:	200000a4 	.word	0x200000a4
 8000adc:	4002041c 	.word	0x4002041c

08000ae0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ae6:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <MX_DMA_Init+0x90>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	4a21      	ldr	r2, [pc, #132]	; (8000b70 <MX_DMA_Init+0x90>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6153      	str	r3, [r2, #20]
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <MX_DMA_Init+0x90>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <MX_DMA_Init+0x90>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	4a1b      	ldr	r2, [pc, #108]	; (8000b70 <MX_DMA_Init+0x90>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6153      	str	r3, [r2, #20]
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <MX_DMA_Init+0x90>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	200b      	movs	r0, #11
 8000b1c:	f001 fb65 	bl	80021ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b20:	200b      	movs	r0, #11
 8000b22:	f001 fb7e 	bl	8002222 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	200d      	movs	r0, #13
 8000b2c:	f001 fb5d 	bl	80021ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b30:	200d      	movs	r0, #13
 8000b32:	f001 fb76 	bl	8002222 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2038      	movs	r0, #56	; 0x38
 8000b3c:	f001 fb55 	bl	80021ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000b40:	2038      	movs	r0, #56	; 0x38
 8000b42:	f001 fb6e 	bl	8002222 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2039      	movs	r0, #57	; 0x39
 8000b4c:	f001 fb4d 	bl	80021ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000b50:	2039      	movs	r0, #57	; 0x39
 8000b52:	f001 fb66 	bl	8002222 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	203c      	movs	r0, #60	; 0x3c
 8000b5c:	f001 fb45 	bl	80021ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000b60:	203c      	movs	r0, #60	; 0x3c
 8000b62:	f001 fb5e 	bl	8002222 <HAL_NVIC_EnableIRQ>

}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000

08000b74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b087      	sub	sp, #28
 8000b78:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b7a:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <MX_GPIO_Init+0xa4>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	4a26      	ldr	r2, [pc, #152]	; (8000c18 <MX_GPIO_Init+0xa4>)
 8000b80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b84:	6153      	str	r3, [r2, #20]
 8000b86:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <MX_GPIO_Init+0xa4>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_GPIO_Init+0xa4>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	4a20      	ldr	r2, [pc, #128]	; (8000c18 <MX_GPIO_Init+0xa4>)
 8000b98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b9c:	6153      	str	r3, [r2, #20]
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <MX_GPIO_Init+0xa4>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MX_GPIO_Init+0xa4>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	4a1a      	ldr	r2, [pc, #104]	; (8000c18 <MX_GPIO_Init+0xa4>)
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	6153      	str	r3, [r2, #20]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_GPIO_Init+0xa4>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_GPIO_Init+0xa4>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <MX_GPIO_Init+0xa4>)
 8000bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bcc:	6153      	str	r3, [r2, #20]
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_GPIO_Init+0xa4>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_GPIO_Init+0xa4>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <MX_GPIO_Init+0xa4>)
 8000be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000be4:	6153      	str	r3, [r2, #20]
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_GPIO_Init+0xa4>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_GPIO_Init+0xa4>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <MX_GPIO_Init+0xa4>)
 8000bf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bfc:	6153      	str	r3, [r2, #20]
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_GPIO_Init+0xa4>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

}
 8000c0a:	bf00      	nop
 8000c0c:	371c      	adds	r7, #28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c20:	f000 fb46 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f83c 	bl	8000ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c28:	f7ff ffa4 	bl	8000b74 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c2c:	f7ff ff58 	bl	8000ae0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000c30:	f000 f89e 	bl	8000d70 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000c34:	f7ff fb2c 	bl	8000290 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c38:	f7ff fb9a 	bl	8000370 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000c3c:	f7ff fbf6 	bl	800042c <MX_ADC3_Init>
  MX_ADC4_Init();
 8000c40:	f7ff fc64 	bl	800050c <MX_ADC4_Init>
  MX_USART3_UART_Init();
 8000c44:	f000 fa76 	bl	8001134 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  sprintf(msg, "%hu\r\n", count);
 8000c48:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <main+0x70>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4910      	ldr	r1, [pc, #64]	; (8000c90 <main+0x74>)
 8000c50:	4810      	ldr	r0, [pc, #64]	; (8000c94 <main+0x78>)
 8000c52:	f003 fe31 	bl	80048b8 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000c56:	480f      	ldr	r0, [pc, #60]	; (8000c94 <main+0x78>)
 8000c58:	f7ff fac2 	bl	80001e0 <strlen>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c64:	490b      	ldr	r1, [pc, #44]	; (8000c94 <main+0x78>)
 8000c66:	480c      	ldr	r0, [pc, #48]	; (8000c98 <main+0x7c>)
 8000c68:	f003 fa09 	bl	800407e <HAL_UART_Transmit>


	  count++;
 8000c6c:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <main+0x70>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	3301      	adds	r3, #1
 8000c72:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <main+0x70>)
 8000c74:	6013      	str	r3, [r2, #0]
	  printf("count = %d" , count);
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <main+0x70>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4807      	ldr	r0, [pc, #28]	; (8000c9c <main+0x80>)
 8000c7e:	f003 fe03 	bl	8004888 <iprintf>


	  HAL_Delay(500);
 8000c82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c86:	f000 fb79 	bl	800137c <HAL_Delay>
  {
 8000c8a:	e7dd      	b.n	8000c48 <main+0x2c>
 8000c8c:	20000094 	.word	0x20000094
 8000c90:	08005af0 	.word	0x08005af0
 8000c94:	200002f4 	.word	0x200002f4
 8000c98:	200003a8 	.word	0x200003a8
 8000c9c:	08005af8 	.word	0x08005af8

08000ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b0a6      	sub	sp, #152	; 0x98
 8000ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000caa:	2228      	movs	r2, #40	; 0x28
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f003 fde2 	bl	8004878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2258      	movs	r2, #88	; 0x58
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f003 fdd4 	bl	8004878 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd8:	2310      	movs	r3, #16
 8000cda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ce8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f001 fd5b 	bl	80027b8 <HAL_RCC_OscConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000d08:	f000 f82d 	bl	8000d66 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d10:	2300      	movs	r3, #0
 8000d12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d20:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f002 fc5c 	bl	80035e4 <HAL_RCC_ClockConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d32:	f000 f818 	bl	8000d66 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC12
 8000d36:	f44f 73c2 	mov.w	r3, #388	; 0x184
 8000d3a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f002 fe7e 	bl	8003a50 <HAL_RCCEx_PeriphCLKConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000d5a:	f000 f804 	bl	8000d66 <Error_Handler>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	3798      	adds	r7, #152	; 0x98
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6a:	b672      	cpsid	i
}
 8000d6c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <Error_Handler+0x8>

08000d70 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <MX_SPI1_Init+0x74>)
 8000d76:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <MX_SPI1_Init+0x78>)
 8000d78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_SPI1_Init+0x74>)
 8000d7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_SPI1_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_SPI1_Init+0x74>)
 8000d8a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_SPI1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <MX_SPI1_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_SPI1_Init+0x74>)
 8000d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_SPI1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_SPI1_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_SPI1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_SPI1_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_SPI1_Init+0x74>)
 8000dbe:	2207      	movs	r2, #7
 8000dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <MX_SPI1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_SPI1_Init+0x74>)
 8000dca:	2208      	movs	r2, #8
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_SPI1_Init+0x74>)
 8000dd0:	f003 f85c 	bl	8003e8c <HAL_SPI_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000dda:	f7ff ffc4 	bl	8000d66 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000300 	.word	0x20000300
 8000de8:	40013000 	.word	0x40013000

08000dec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a2a      	ldr	r2, [pc, #168]	; (8000eb4 <HAL_SPI_MspInit+0xc8>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d14d      	bne.n	8000eaa <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <HAL_SPI_MspInit+0xcc>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a29      	ldr	r2, [pc, #164]	; (8000eb8 <HAL_SPI_MspInit+0xcc>)
 8000e14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e18:	6193      	str	r3, [r2, #24]
 8000e1a:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <HAL_SPI_MspInit+0xcc>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e26:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <HAL_SPI_MspInit+0xcc>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	4a23      	ldr	r2, [pc, #140]	; (8000eb8 <HAL_SPI_MspInit+0xcc>)
 8000e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e30:	6153      	str	r3, [r2, #20]
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <HAL_SPI_MspInit+0xcc>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000e3e:	2338      	movs	r3, #56	; 0x38
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e4e:	2305      	movs	r3, #5
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4818      	ldr	r0, [pc, #96]	; (8000ebc <HAL_SPI_MspInit+0xd0>)
 8000e5a:	f001 fb23 	bl	80024a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_SPI_MspInit+0xd4>)
 8000e60:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <HAL_SPI_MspInit+0xd8>)
 8000e62:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <HAL_SPI_MspInit+0xd4>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_SPI_MspInit+0xd4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <HAL_SPI_MspInit+0xd4>)
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_SPI_MspInit+0xd4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <HAL_SPI_MspInit+0xd4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_SPI_MspInit+0xd4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <HAL_SPI_MspInit+0xd4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000e8e:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <HAL_SPI_MspInit+0xd4>)
 8000e90:	f001 f9e1 	bl	8002256 <HAL_DMA_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_SPI_MspInit+0xb2>
    {
      Error_Handler();
 8000e9a:	f7ff ff64 	bl	8000d66 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_SPI_MspInit+0xd4>)
 8000ea2:	655a      	str	r2, [r3, #84]	; 0x54
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <HAL_SPI_MspInit+0xd4>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40013000 	.word	0x40013000
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	48000400 	.word	0x48000400
 8000ec0:	20000364 	.word	0x20000364
 8000ec4:	40020030 	.word	0x40020030

08000ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_MspInit+0x44>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <HAL_MspInit+0x44>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6193      	str	r3, [r2, #24]
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <HAL_MspInit+0x44>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_MspInit+0x44>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <HAL_MspInit+0x44>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	61d3      	str	r3, [r2, #28]
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_MspInit+0x44>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <NMI_Handler+0x4>

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <MemManage_Handler+0x4>

08000f22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5c:	f000 f9ee 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <DMA1_Channel1_IRQHandler+0x10>)
 8000f6a:	f001 f9bb 	bl	80022e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000021c 	.word	0x2000021c

08000f78 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <DMA1_Channel3_IRQHandler+0x10>)
 8000f7e:	f001 f9b1 	bl	80022e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000364 	.word	0x20000364

08000f8c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <DMA2_Channel1_IRQHandler+0x10>)
 8000f92:	f001 f9a7 	bl	80022e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200002b0 	.word	0x200002b0

08000fa0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <DMA2_Channel2_IRQHandler+0x10>)
 8000fa6:	f001 f99d 	bl	80022e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200000a4 	.word	0x200000a4

08000fb4 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <DMA2_Channel5_IRQHandler+0x10>)
 8000fba:	f001 f993 	bl	80022e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000138 	.word	0x20000138

08000fc8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	e00a      	b.n	8000ff0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fda:	f3af 8000 	nop.w
 8000fde:	4601      	mov	r1, r0
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	60ba      	str	r2, [r7, #8]
 8000fe6:	b2ca      	uxtb	r2, r1
 8000fe8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3301      	adds	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dbf0      	blt.n	8000fda <_read+0x12>
	}

return len;
 8000ff8:	687b      	ldr	r3, [r7, #4]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	e009      	b.n	8001028 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	60ba      	str	r2, [r7, #8]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	dbf1      	blt.n	8001014 <_write+0x12>
	}
	return len;
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <_close>:

int _close(int file)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
	return -1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001062:	605a      	str	r2, [r3, #4]
	return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <_isatty>:

int _isatty(int file)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
	return 1;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
	return 0;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ac:	4a14      	ldr	r2, [pc, #80]	; (8001100 <_sbrk+0x5c>)
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <_sbrk+0x60>)
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <_sbrk+0x64>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <_sbrk+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d207      	bcs.n	80010e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d4:	f003 fba6 	bl	8004824 <__errno>
 80010d8:	4603      	mov	r3, r0
 80010da:	220c      	movs	r2, #12
 80010dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010e2:	e009      	b.n	80010f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <_sbrk+0x64>)
 80010f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20010000 	.word	0x20010000
 8001104:	00000400 	.word	0x00000400
 8001108:	20000098 	.word	0x20000098
 800110c:	20000440 	.word	0x20000440

08001110 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <SystemInit+0x20>)
 8001116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <SystemInit+0x20>)
 800111c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <MX_USART3_UART_Init+0x58>)
 800113a:	4a15      	ldr	r2, [pc, #84]	; (8001190 <MX_USART3_UART_Init+0x5c>)
 800113c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <MX_USART3_UART_Init+0x58>)
 8001140:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001144:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_USART3_UART_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_USART3_UART_Init+0x58>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_USART3_UART_Init+0x58>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_USART3_UART_Init+0x58>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_USART3_UART_Init+0x58>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_USART3_UART_Init+0x58>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_USART3_UART_Init+0x58>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_USART3_UART_Init+0x58>)
 8001172:	2200      	movs	r2, #0
 8001174:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_USART3_UART_Init+0x58>)
 8001178:	f002 ff33 	bl	8003fe2 <HAL_UART_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001182:	f7ff fdf0 	bl	8000d66 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200003a8 	.word	0x200003a8
 8001190:	40004800 	.word	0x40004800

08001194 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a26      	ldr	r2, [pc, #152]	; (800124c <HAL_UART_MspInit+0xb8>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d145      	bne.n	8001242 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <HAL_UART_MspInit+0xbc>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a25      	ldr	r2, [pc, #148]	; (8001250 <HAL_UART_MspInit+0xbc>)
 80011bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c0:	61d3      	str	r3, [r2, #28]
 80011c2:	4b23      	ldr	r3, [pc, #140]	; (8001250 <HAL_UART_MspInit+0xbc>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <HAL_UART_MspInit+0xbc>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	4a1f      	ldr	r2, [pc, #124]	; (8001250 <HAL_UART_MspInit+0xbc>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d8:	6153      	str	r3, [r2, #20]
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <HAL_UART_MspInit+0xbc>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <HAL_UART_MspInit+0xbc>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	4a19      	ldr	r2, [pc, #100]	; (8001250 <HAL_UART_MspInit+0xbc>)
 80011ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011f0:	6153      	str	r3, [r2, #20]
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <HAL_UART_MspInit+0xbc>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001210:	2307      	movs	r3, #7
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <HAL_UART_MspInit+0xc0>)
 800121c:	f001 f942 	bl	80024a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001220:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001232:	2307      	movs	r3, #7
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4806      	ldr	r0, [pc, #24]	; (8001258 <HAL_UART_MspInit+0xc4>)
 800123e:	f001 f931 	bl	80024a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	; 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40004800 	.word	0x40004800
 8001250:	40021000 	.word	0x40021000
 8001254:	48000400 	.word	0x48000400
 8001258:	48000800 	.word	0x48000800

0800125c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001294 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <LoopForever+0x6>)
  ldr r1, =_edata
 8001262:	490e      	ldr	r1, [pc, #56]	; (800129c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001264:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <LoopForever+0xe>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001278:	4c0b      	ldr	r4, [pc, #44]	; (80012a8 <LoopForever+0x16>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001286:	f7ff ff43 	bl	8001110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128a:	f003 fad1 	bl	8004830 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800128e:	f7ff fcc5 	bl	8000c1c <main>

08001292 <LoopForever>:

LoopForever:
    b LoopForever
 8001292:	e7fe      	b.n	8001292 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001294:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012a0:	08005bdc 	.word	0x08005bdc
  ldr r2, =_sbss
 80012a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012a8:	20000440 	.word	0x20000440

080012ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC1_2_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_Init+0x28>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_Init+0x28>)
 80012ba:	f043 0310 	orr.w	r3, r3, #16
 80012be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 ff87 	bl	80021d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 f808 	bl	80012dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012cc:	f7ff fdfc 	bl	8000ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40022000 	.word	0x40022000

080012dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_InitTick+0x54>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_InitTick+0x58>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 ff9f 	bl	800223e <HAL_SYSTICK_Config>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e00e      	b.n	8001328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d80a      	bhi.n	8001326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001310:	2200      	movs	r2, #0
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001318:	f000 ff67 	bl	80021ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <HAL_InitTick+0x5c>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e000      	b.n	8001328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000000 	.word	0x20000000
 8001334:	20000008 	.word	0x20000008
 8001338:	20000004 	.word	0x20000004

0800133c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x20>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x24>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_IncTick+0x24>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000008 	.word	0x20000008
 8001360:	2000042c 	.word	0x2000042c

08001364 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;  
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <HAL_GetTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	2000042c 	.word	0x2000042c

0800137c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001384:	f7ff ffee 	bl	8001364 <HAL_GetTick>
 8001388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001394:	d005      	beq.n	80013a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_Delay+0x44>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013a2:	bf00      	nop
 80013a4:	f7ff ffde 	bl	8001364 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8f7      	bhi.n	80013a4 <HAL_Delay+0x28>
  {
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000008 	.word	0x20000008

080013c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b09a      	sub	sp, #104	; 0x68
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e1e3      	b.n	80017ac <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d176      	bne.n	80014e4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d152      	bne.n	80014a4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff f8d5 	bl	80005c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d13b      	bne.n	80014a4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 fda1 	bl	8001f74 <ADC_Disable>
 8001432:	4603      	mov	r3, r0
 8001434:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f003 0310 	and.w	r3, r3, #16
 8001440:	2b00      	cmp	r3, #0
 8001442:	d12f      	bne.n	80014a4 <HAL_ADC_Init+0xe0>
 8001444:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001448:	2b00      	cmp	r3, #0
 800144a:	d12b      	bne.n	80014a4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001454:	f023 0302 	bic.w	r3, r3, #2
 8001458:	f043 0202 	orr.w	r2, r3, #2
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800146e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800147e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001480:	4b92      	ldr	r3, [pc, #584]	; (80016cc <HAL_ADC_Init+0x308>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a92      	ldr	r2, [pc, #584]	; (80016d0 <HAL_ADC_Init+0x30c>)
 8001486:	fba2 2303 	umull	r2, r3, r2, r3
 800148a:	0c9a      	lsrs	r2, r3, #18
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001496:	e002      	b.n	800149e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	3b01      	subs	r3, #1
 800149c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f9      	bne.n	8001498 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d007      	beq.n	80014c2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014c0:	d110      	bne.n	80014e4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f023 0312 	bic.w	r3, r3, #18
 80014ca:	f043 0210 	orr.w	r2, r3, #16
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f043 0201 	orr.w	r2, r3, #1
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f003 0310 	and.w	r3, r3, #16
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f040 8150 	bne.w	8001792 <HAL_ADC_Init+0x3ce>
 80014f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f040 814b 	bne.w	8001792 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001506:	2b00      	cmp	r3, #0
 8001508:	f040 8143 	bne.w	8001792 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001514:	f043 0202 	orr.w	r2, r3, #2
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001524:	d004      	beq.n	8001530 <HAL_ADC_Init+0x16c>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a6a      	ldr	r2, [pc, #424]	; (80016d4 <HAL_ADC_Init+0x310>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d101      	bne.n	8001534 <HAL_ADC_Init+0x170>
 8001530:	4b69      	ldr	r3, [pc, #420]	; (80016d8 <HAL_ADC_Init+0x314>)
 8001532:	e000      	b.n	8001536 <HAL_ADC_Init+0x172>
 8001534:	4b69      	ldr	r3, [pc, #420]	; (80016dc <HAL_ADC_Init+0x318>)
 8001536:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001540:	d102      	bne.n	8001548 <HAL_ADC_Init+0x184>
 8001542:	4b64      	ldr	r3, [pc, #400]	; (80016d4 <HAL_ADC_Init+0x310>)
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	e01a      	b.n	800157e <HAL_ADC_Init+0x1ba>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a61      	ldr	r2, [pc, #388]	; (80016d4 <HAL_ADC_Init+0x310>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d103      	bne.n	800155a <HAL_ADC_Init+0x196>
 8001552:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	e011      	b.n	800157e <HAL_ADC_Init+0x1ba>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a60      	ldr	r2, [pc, #384]	; (80016e0 <HAL_ADC_Init+0x31c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d102      	bne.n	800156a <HAL_ADC_Init+0x1a6>
 8001564:	4b5f      	ldr	r3, [pc, #380]	; (80016e4 <HAL_ADC_Init+0x320>)
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	e009      	b.n	800157e <HAL_ADC_Init+0x1ba>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a5d      	ldr	r2, [pc, #372]	; (80016e4 <HAL_ADC_Init+0x320>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d102      	bne.n	800157a <HAL_ADC_Init+0x1b6>
 8001574:	4b5a      	ldr	r3, [pc, #360]	; (80016e0 <HAL_ADC_Init+0x31c>)
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	e001      	b.n	800157e <HAL_ADC_Init+0x1ba>
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	2b01      	cmp	r3, #1
 800158a:	d108      	bne.n	800159e <HAL_ADC_Init+0x1da>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b01      	cmp	r3, #1
 8001598:	d101      	bne.n	800159e <HAL_ADC_Init+0x1da>
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <HAL_ADC_Init+0x1dc>
 800159e:	2300      	movs	r3, #0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d11c      	bne.n	80015de <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015a4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d010      	beq.n	80015cc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d107      	bne.n	80015c6 <HAL_ADC_Init+0x202>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <HAL_ADC_Init+0x202>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_ADC_Init+0x204>
 80015c6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d108      	bne.n	80015de <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80015cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	431a      	orrs	r2, r3
 80015da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015dc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7e5b      	ldrb	r3, [r3, #25]
 80015e2:	035b      	lsls	r3, r3, #13
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015e8:	2a01      	cmp	r2, #1
 80015ea:	d002      	beq.n	80015f2 <HAL_ADC_Init+0x22e>
 80015ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015f0:	e000      	b.n	80015f4 <HAL_ADC_Init+0x230>
 80015f2:	2200      	movs	r2, #0
 80015f4:	431a      	orrs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	4313      	orrs	r3, r2
 8001602:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001604:	4313      	orrs	r3, r2
 8001606:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d11b      	bne.n	800164a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7e5b      	ldrb	r3, [r3, #25]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d109      	bne.n	800162e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	3b01      	subs	r3, #1
 8001620:	045a      	lsls	r2, r3, #17
 8001622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001624:	4313      	orrs	r3, r2
 8001626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162a:	663b      	str	r3, [r7, #96]	; 0x60
 800162c:	e00d      	b.n	800164a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001636:	f043 0220 	orr.w	r2, r3, #32
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f043 0201 	orr.w	r2, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	2b01      	cmp	r3, #1
 8001650:	d054      	beq.n	80016fc <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a22      	ldr	r2, [pc, #136]	; (80016e0 <HAL_ADC_Init+0x31c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d004      	beq.n	8001666 <HAL_ADC_Init+0x2a2>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a20      	ldr	r2, [pc, #128]	; (80016e4 <HAL_ADC_Init+0x320>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d140      	bne.n	80016e8 <HAL_ADC_Init+0x324>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800166e:	d02a      	beq.n	80016c6 <HAL_ADC_Init+0x302>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001678:	d022      	beq.n	80016c0 <HAL_ADC_Init+0x2fc>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001682:	d01a      	beq.n	80016ba <HAL_ADC_Init+0x2f6>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001688:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800168c:	d012      	beq.n	80016b4 <HAL_ADC_Init+0x2f0>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001696:	d00a      	beq.n	80016ae <HAL_ADC_Init+0x2ea>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80016a0:	d002      	beq.n	80016a8 <HAL_ADC_Init+0x2e4>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	e023      	b.n	80016f0 <HAL_ADC_Init+0x32c>
 80016a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016ac:	e020      	b.n	80016f0 <HAL_ADC_Init+0x32c>
 80016ae:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016b2:	e01d      	b.n	80016f0 <HAL_ADC_Init+0x32c>
 80016b4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80016b8:	e01a      	b.n	80016f0 <HAL_ADC_Init+0x32c>
 80016ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016be:	e017      	b.n	80016f0 <HAL_ADC_Init+0x32c>
 80016c0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80016c4:	e014      	b.n	80016f0 <HAL_ADC_Init+0x32c>
 80016c6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80016ca:	e011      	b.n	80016f0 <HAL_ADC_Init+0x32c>
 80016cc:	20000000 	.word	0x20000000
 80016d0:	431bde83 	.word	0x431bde83
 80016d4:	50000100 	.word	0x50000100
 80016d8:	50000300 	.word	0x50000300
 80016dc:	50000700 	.word	0x50000700
 80016e0:	50000400 	.word	0x50000400
 80016e4:	50000500 	.word	0x50000500
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016f4:	4313      	orrs	r3, r2
 80016f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016f8:	4313      	orrs	r3, r2
 80016fa:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	2b00      	cmp	r3, #0
 8001708:	d114      	bne.n	8001734 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001718:	f023 0302 	bic.w	r3, r3, #2
 800171c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7e1b      	ldrb	r3, [r3, #24]
 8001722:	039a      	lsls	r2, r3, #14
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4313      	orrs	r3, r2
 800172e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001730:	4313      	orrs	r3, r2
 8001732:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <HAL_ADC_Init+0x3f0>)
 800173c:	4013      	ands	r3, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001744:	430b      	orrs	r3, r1
 8001746:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d10c      	bne.n	800176a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f023 010f 	bic.w	r1, r3, #15
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	1e5a      	subs	r2, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	631a      	str	r2, [r3, #48]	; 0x30
 8001768:	e007      	b.n	800177a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 020f 	bic.w	r2, r2, #15
 8001778:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f023 0303 	bic.w	r3, r3, #3
 8001788:	f043 0201 	orr.w	r2, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	641a      	str	r2, [r3, #64]	; 0x40
 8001790:	e00a      	b.n	80017a8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f023 0312 	bic.w	r3, r3, #18
 800179a:	f043 0210 	orr.w	r2, r3, #16
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80017a2:	2301      	movs	r3, #1
 80017a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80017a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3768      	adds	r7, #104	; 0x68
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	fff0c007 	.word	0xfff0c007

080017b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b09b      	sub	sp, #108	; 0x6c
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d101      	bne.n	80017da <HAL_ADC_ConfigChannel+0x22>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e2cb      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x5ba>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f040 82af 	bne.w	8001d50 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d81c      	bhi.n	8001834 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	461a      	mov	r2, r3
 800180e:	231f      	movs	r3, #31
 8001810:	4093      	lsls	r3, r2
 8001812:	43db      	mvns	r3, r3
 8001814:	4019      	ands	r1, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fa00 f203 	lsl.w	r2, r0, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	631a      	str	r2, [r3, #48]	; 0x30
 8001832:	e063      	b.n	80018fc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b09      	cmp	r3, #9
 800183a:	d81e      	bhi.n	800187a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	3b1e      	subs	r3, #30
 8001850:	221f      	movs	r2, #31
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	4019      	ands	r1, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	3b1e      	subs	r3, #30
 800186c:	fa00 f203 	lsl.w	r2, r0, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	635a      	str	r2, [r3, #52]	; 0x34
 8001878:	e040      	b.n	80018fc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b0e      	cmp	r3, #14
 8001880:	d81e      	bhi.n	80018c0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	3b3c      	subs	r3, #60	; 0x3c
 8001896:	221f      	movs	r2, #31
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	4019      	ands	r1, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	3b3c      	subs	r3, #60	; 0x3c
 80018b2:	fa00 f203 	lsl.w	r2, r0, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	639a      	str	r2, [r3, #56]	; 0x38
 80018be:	e01d      	b.n	80018fc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	3b5a      	subs	r3, #90	; 0x5a
 80018d4:	221f      	movs	r2, #31
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	4019      	ands	r1, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	3b5a      	subs	r3, #90	; 0x5a
 80018f0:	fa00 f203 	lsl.w	r2, r0, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 030c 	and.w	r3, r3, #12
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 80e5 	bne.w	8001ad6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b09      	cmp	r3, #9
 8001912:	d91c      	bls.n	800194e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6999      	ldr	r1, [r3, #24]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	3b1e      	subs	r3, #30
 8001926:	2207      	movs	r2, #7
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	4019      	ands	r1, r3
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	6898      	ldr	r0, [r3, #8]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	3b1e      	subs	r3, #30
 8001940:	fa00 f203 	lsl.w	r2, r0, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	619a      	str	r2, [r3, #24]
 800194c:	e019      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6959      	ldr	r1, [r3, #20]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	2207      	movs	r2, #7
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	4019      	ands	r1, r3
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	6898      	ldr	r0, [r3, #8]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4613      	mov	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4413      	add	r3, r2
 8001976:	fa00 f203 	lsl.w	r2, r0, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	08db      	lsrs	r3, r3, #3
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	3b01      	subs	r3, #1
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d84f      	bhi.n	8001a44 <HAL_ADC_ConfigChannel+0x28c>
 80019a4:	a201      	add	r2, pc, #4	; (adr r2, 80019ac <HAL_ADC_ConfigChannel+0x1f4>)
 80019a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019aa:	bf00      	nop
 80019ac:	080019bd 	.word	0x080019bd
 80019b0:	080019df 	.word	0x080019df
 80019b4:	08001a01 	.word	0x08001a01
 80019b8:	08001a23 	.word	0x08001a23
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019c2:	4b9f      	ldr	r3, [pc, #636]	; (8001c40 <HAL_ADC_ConfigChannel+0x488>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	0691      	lsls	r1, r2, #26
 80019cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019ce:	430a      	orrs	r2, r1
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019da:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019dc:	e07e      	b.n	8001adc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019e4:	4b96      	ldr	r3, [pc, #600]	; (8001c40 <HAL_ADC_ConfigChannel+0x488>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	0691      	lsls	r1, r2, #26
 80019ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019f0:	430a      	orrs	r2, r1
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019fc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019fe:	e06d      	b.n	8001adc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a06:	4b8e      	ldr	r3, [pc, #568]	; (8001c40 <HAL_ADC_ConfigChannel+0x488>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	0691      	lsls	r1, r2, #26
 8001a10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a12:	430a      	orrs	r2, r1
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a1e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a20:	e05c      	b.n	8001adc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a28:	4b85      	ldr	r3, [pc, #532]	; (8001c40 <HAL_ADC_ConfigChannel+0x488>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	0691      	lsls	r1, r2, #26
 8001a32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a34:	430a      	orrs	r2, r1
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a40:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a42:	e04b      	b.n	8001adc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	069b      	lsls	r3, r3, #26
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d107      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a66:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	069b      	lsls	r3, r3, #26
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d107      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a8a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	069b      	lsls	r3, r3, #26
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d107      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001aae:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ab6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	069b      	lsls	r3, r3, #26
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d10a      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ad2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001ad4:	e001      	b.n	8001ada <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001ad6:	bf00      	nop
 8001ad8:	e000      	b.n	8001adc <HAL_ADC_ConfigChannel+0x324>
      break;
 8001ada:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d108      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x344>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x344>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_ADC_ConfigChannel+0x346>
 8001afc:	2300      	movs	r3, #0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f040 8131 	bne.w	8001d66 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d00f      	beq.n	8001b2c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	400a      	ands	r2, r1
 8001b26:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001b2a:	e049      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b09      	cmp	r3, #9
 8001b4c:	d91c      	bls.n	8001b88 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6999      	ldr	r1, [r3, #24]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3b1b      	subs	r3, #27
 8001b60:	2207      	movs	r2, #7
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	4019      	ands	r1, r3
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	6898      	ldr	r0, [r3, #8]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	3b1b      	subs	r3, #27
 8001b7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	619a      	str	r2, [r3, #24]
 8001b86:	e01b      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6959      	ldr	r1, [r3, #20]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	4019      	ands	r1, r3
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	6898      	ldr	r0, [r3, #8]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bc8:	d004      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0x41c>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <HAL_ADC_ConfigChannel+0x48c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d101      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x420>
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <HAL_ADC_ConfigChannel+0x490>)
 8001bd6:	e000      	b.n	8001bda <HAL_ADC_ConfigChannel+0x422>
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <HAL_ADC_ConfigChannel+0x494>)
 8001bda:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b10      	cmp	r3, #16
 8001be2:	d105      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d015      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001bf4:	2b11      	cmp	r3, #17
 8001bf6:	d105      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00b      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c08:	2b12      	cmp	r3, #18
 8001c0a:	f040 80ac 	bne.w	8001d66 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f040 80a5 	bne.w	8001d66 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c24:	d102      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x474>
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <HAL_ADC_ConfigChannel+0x48c>)
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	e023      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x4bc>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <HAL_ADC_ConfigChannel+0x48c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d10c      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x498>
 8001c36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	e01a      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x4bc>
 8001c3e:	bf00      	nop
 8001c40:	83fff000 	.word	0x83fff000
 8001c44:	50000100 	.word	0x50000100
 8001c48:	50000300 	.word	0x50000300
 8001c4c:	50000700 	.word	0x50000700
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a4a      	ldr	r2, [pc, #296]	; (8001d80 <HAL_ADC_ConfigChannel+0x5c8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d102      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x4a8>
 8001c5a:	4b4a      	ldr	r3, [pc, #296]	; (8001d84 <HAL_ADC_ConfigChannel+0x5cc>)
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	e009      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x4bc>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a47      	ldr	r2, [pc, #284]	; (8001d84 <HAL_ADC_ConfigChannel+0x5cc>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d102      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x4b8>
 8001c6a:	4b45      	ldr	r3, [pc, #276]	; (8001d80 <HAL_ADC_ConfigChannel+0x5c8>)
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	e001      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x4bc>
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d108      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x4dc>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x4dc>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x4de>
 8001c94:	2300      	movs	r3, #0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d150      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c9a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d010      	beq.n	8001cc2 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d107      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x504>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x504>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x506>
 8001cbc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d13c      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b10      	cmp	r3, #16
 8001cc8:	d11d      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x54e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd2:	d118      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001cd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cde:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ce0:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <HAL_ADC_ConfigChannel+0x5d0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a29      	ldr	r2, [pc, #164]	; (8001d8c <HAL_ADC_ConfigChannel+0x5d4>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	0c9a      	lsrs	r2, r3, #18
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cf6:	e002      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f9      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d04:	e02e      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b11      	cmp	r3, #17
 8001d0c:	d10b      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x56e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d16:	d106      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d22:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d24:	e01e      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b12      	cmp	r3, #18
 8001d2c:	d11a      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d38:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d3a:	e013      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f043 0220 	orr.w	r2, r3, #32
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001d4e:	e00a      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f043 0220 	orr.w	r2, r3, #32
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001d62:	e000      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d64:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	376c      	adds	r7, #108	; 0x6c
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	50000400 	.word	0x50000400
 8001d84:	50000500 	.word	0x50000500
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	431bde83 	.word	0x431bde83

08001d90 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b099      	sub	sp, #100	; 0x64
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001da8:	d102      	bne.n	8001db0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001daa:	4b6d      	ldr	r3, [pc, #436]	; (8001f60 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	e01a      	b.n	8001de6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a6a      	ldr	r2, [pc, #424]	; (8001f60 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d103      	bne.n	8001dc2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001dba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	e011      	b.n	8001de6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a67      	ldr	r2, [pc, #412]	; (8001f64 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d102      	bne.n	8001dd2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001dcc:	4b66      	ldr	r3, [pc, #408]	; (8001f68 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	e009      	b.n	8001de6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a64      	ldr	r2, [pc, #400]	; (8001f68 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d102      	bne.n	8001de2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001ddc:	4b61      	ldr	r3, [pc, #388]	; (8001f64 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	e001      	b.n	8001de6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0b0      	b.n	8001f52 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e0a9      	b.n	8001f52 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f040 808d 	bne.w	8001f30 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f040 8086 	bne.w	8001f30 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e2c:	d004      	beq.n	8001e38 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a4b      	ldr	r2, [pc, #300]	; (8001f60 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d101      	bne.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001e38:	4b4c      	ldr	r3, [pc, #304]	; (8001f6c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001e3a:	e000      	b.n	8001e3e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001e3c:	4b4c      	ldr	r3, [pc, #304]	; (8001f70 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001e3e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d040      	beq.n	8001eca <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001e48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6859      	ldr	r1, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e5a:	035b      	lsls	r3, r3, #13
 8001e5c:	430b      	orrs	r3, r1
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e62:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d108      	bne.n	8001e84 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001e84:	2300      	movs	r3, #0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d15c      	bne.n	8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d107      	bne.n	8001ea6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001ea6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d14b      	bne.n	8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001eac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001eb4:	f023 030f 	bic.w	r3, r3, #15
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	6811      	ldr	r1, [r2, #0]
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	6892      	ldr	r2, [r2, #8]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ec6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ec8:	e03c      	b.n	8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ed4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d108      	bne.n	8001ef6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d123      	bne.n	8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d107      	bne.n	8001f18 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001f18:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d112      	bne.n	8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f26:	f023 030f 	bic.w	r3, r3, #15
 8001f2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f2c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f2e:	e009      	b.n	8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f043 0220 	orr.w	r2, r3, #32
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001f42:	e000      	b.n	8001f46 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f44:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001f52:	4618      	mov	r0, r3
 8001f54:	3764      	adds	r7, #100	; 0x64
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	50000100 	.word	0x50000100
 8001f64:	50000400 	.word	0x50000400
 8001f68:	50000500 	.word	0x50000500
 8001f6c:	50000300 	.word	0x50000300
 8001f70:	50000700 	.word	0x50000700

08001f74 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d108      	bne.n	8001fa0 <ADC_Disable+0x2c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <ADC_Disable+0x2c>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <ADC_Disable+0x2e>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d040      	beq.n	8002028 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 030d 	and.w	r3, r3, #13
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d10f      	bne.n	8001fd4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0202 	orr.w	r2, r2, #2
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2203      	movs	r2, #3
 8001fca:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001fcc:	f7ff f9ca 	bl	8001364 <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fd2:	e022      	b.n	800201a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f043 0210 	orr.w	r2, r3, #16
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe4:	f043 0201 	orr.w	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e01c      	b.n	800202a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ff0:	f7ff f9b8 	bl	8001364 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d90d      	bls.n	800201a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f043 0210 	orr.w	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f043 0201 	orr.w	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e007      	b.n	800202a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b01      	cmp	r3, #1
 8002026:	d0e3      	beq.n	8001ff0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002050:	4013      	ands	r3, r2
 8002052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800205c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002066:	4a04      	ldr	r2, [pc, #16]	; (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	60d3      	str	r3, [r2, #12]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <__NVIC_GetPriorityGrouping+0x18>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	f003 0307 	and.w	r3, r3, #7
}
 800208a:	4618      	mov	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	db0b      	blt.n	80020c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	f003 021f 	and.w	r2, r3, #31
 80020b0:	4907      	ldr	r1, [pc, #28]	; (80020d0 <__NVIC_EnableIRQ+0x38>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	2001      	movs	r0, #1
 80020ba:	fa00 f202 	lsl.w	r2, r0, r2
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000e100 	.word	0xe000e100

080020d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	6039      	str	r1, [r7, #0]
 80020de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db0a      	blt.n	80020fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	490c      	ldr	r1, [pc, #48]	; (8002120 <__NVIC_SetPriority+0x4c>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	0112      	lsls	r2, r2, #4
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	440b      	add	r3, r1
 80020f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020fc:	e00a      	b.n	8002114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4908      	ldr	r1, [pc, #32]	; (8002124 <__NVIC_SetPriority+0x50>)
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	3b04      	subs	r3, #4
 800210c:	0112      	lsls	r2, r2, #4
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	440b      	add	r3, r1
 8002112:	761a      	strb	r2, [r3, #24]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000e100 	.word	0xe000e100
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002128:	b480      	push	{r7}
 800212a:	b089      	sub	sp, #36	; 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f1c3 0307 	rsb	r3, r3, #7
 8002142:	2b04      	cmp	r3, #4
 8002144:	bf28      	it	cs
 8002146:	2304      	movcs	r3, #4
 8002148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3304      	adds	r3, #4
 800214e:	2b06      	cmp	r3, #6
 8002150:	d902      	bls.n	8002158 <NVIC_EncodePriority+0x30>
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3b03      	subs	r3, #3
 8002156:	e000      	b.n	800215a <NVIC_EncodePriority+0x32>
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43da      	mvns	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	401a      	ands	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002170:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa01 f303 	lsl.w	r3, r1, r3
 800217a:	43d9      	mvns	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	4313      	orrs	r3, r2
         );
}
 8002182:	4618      	mov	r0, r3
 8002184:	3724      	adds	r7, #36	; 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a0:	d301      	bcc.n	80021a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a2:	2301      	movs	r3, #1
 80021a4:	e00f      	b.n	80021c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <SysTick_Config+0x40>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ae:	210f      	movs	r1, #15
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021b4:	f7ff ff8e 	bl	80020d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <SysTick_Config+0x40>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <SysTick_Config+0x40>)
 80021c0:	2207      	movs	r2, #7
 80021c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	e000e010 	.word	0xe000e010

080021d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ff29 	bl	8002034 <__NVIC_SetPriorityGrouping>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b086      	sub	sp, #24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021fc:	f7ff ff3e 	bl	800207c <__NVIC_GetPriorityGrouping>
 8002200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	6978      	ldr	r0, [r7, #20]
 8002208:	f7ff ff8e 	bl	8002128 <NVIC_EncodePriority>
 800220c:	4602      	mov	r2, r0
 800220e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff5d 	bl	80020d4 <__NVIC_SetPriority>
}
 800221a:	bf00      	nop
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff31 	bl	8002098 <__NVIC_EnableIRQ>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ffa2 	bl	8002190 <SysTick_Config>
 800224c:	4603      	mov	r3, r0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e037      	b.n	80022dc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002282:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002286:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002290:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f8b4 	bl	800242c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}  
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	2204      	movs	r2, #4
 8002302:	409a      	lsls	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d024      	beq.n	8002356 <HAL_DMA_IRQHandler+0x72>
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b00      	cmp	r3, #0
 8002314:	d01f      	beq.n	8002356 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	2b00      	cmp	r3, #0
 8002322:	d107      	bne.n	8002334 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0204 	bic.w	r2, r2, #4
 8002332:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233c:	2104      	movs	r1, #4
 800233e:	fa01 f202 	lsl.w	r2, r1, r2
 8002342:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	2b00      	cmp	r3, #0
 800234a:	d06a      	beq.n	8002422 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002354:	e065      	b.n	8002422 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	2202      	movs	r2, #2
 800235c:	409a      	lsls	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d02c      	beq.n	80023c0 <HAL_DMA_IRQHandler+0xdc>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d027      	beq.n	80023c0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10b      	bne.n	8002396 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 020a 	bic.w	r2, r2, #10
 800238c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239e:	2102      	movs	r1, #2
 80023a0:	fa01 f202 	lsl.w	r2, r1, r2
 80023a4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d035      	beq.n	8002422 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80023be:	e030      	b.n	8002422 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	2208      	movs	r2, #8
 80023c6:	409a      	lsls	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d028      	beq.n	8002422 <HAL_DMA_IRQHandler+0x13e>
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d023      	beq.n	8002422 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 020e 	bic.w	r2, r2, #14
 80023e8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f2:	2101      	movs	r1, #1
 80023f4:	fa01 f202 	lsl.w	r2, r1, r2
 80023f8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	2b00      	cmp	r3, #0
 8002416:	d004      	beq.n	8002422 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	4798      	blx	r3
    }
  }
}  
 8002420:	e7ff      	b.n	8002422 <HAL_DMA_IRQHandler+0x13e>
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	4b14      	ldr	r3, [pc, #80]	; (800248c <DMA_CalcBaseAndBitshift+0x60>)
 800243c:	429a      	cmp	r2, r3
 800243e:	d80f      	bhi.n	8002460 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <DMA_CalcBaseAndBitshift+0x64>)
 8002448:	4413      	add	r3, r2
 800244a:	4a12      	ldr	r2, [pc, #72]	; (8002494 <DMA_CalcBaseAndBitshift+0x68>)
 800244c:	fba2 2303 	umull	r2, r3, r2, r3
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	009a      	lsls	r2, r3, #2
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <DMA_CalcBaseAndBitshift+0x6c>)
 800245c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800245e:	e00e      	b.n	800247e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	4b0d      	ldr	r3, [pc, #52]	; (800249c <DMA_CalcBaseAndBitshift+0x70>)
 8002468:	4413      	add	r3, r2
 800246a:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <DMA_CalcBaseAndBitshift+0x68>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	009a      	lsls	r2, r3, #2
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a09      	ldr	r2, [pc, #36]	; (80024a0 <DMA_CalcBaseAndBitshift+0x74>)
 800247c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40020407 	.word	0x40020407
 8002490:	bffdfff8 	.word	0xbffdfff8
 8002494:	cccccccd 	.word	0xcccccccd
 8002498:	40020000 	.word	0x40020000
 800249c:	bffdfbf8 	.word	0xbffdfbf8
 80024a0:	40020400 	.word	0x40020400

080024a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b2:	e160      	b.n	8002776 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	2101      	movs	r1, #1
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	fa01 f303 	lsl.w	r3, r1, r3
 80024c0:	4013      	ands	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8152 	beq.w	8002770 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d00b      	beq.n	80024ec <HAL_GPIO_Init+0x48>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d007      	beq.n	80024ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024e0:	2b11      	cmp	r3, #17
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b12      	cmp	r3, #18
 80024ea:	d130      	bne.n	800254e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4013      	ands	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002522:	2201      	movs	r2, #1
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	f003 0201 	and.w	r2, r3, #1
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	2203      	movs	r2, #3
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0xea>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b12      	cmp	r3, #18
 800258c:	d123      	bne.n	80025d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	08da      	lsrs	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3208      	adds	r2, #8
 8002596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	220f      	movs	r2, #15
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	08da      	lsrs	r2, r3, #3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3208      	adds	r2, #8
 80025d0:	6939      	ldr	r1, [r7, #16]
 80025d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	2203      	movs	r2, #3
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 0203 	and.w	r2, r3, #3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 80ac 	beq.w	8002770 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002618:	4b5e      	ldr	r3, [pc, #376]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	4a5d      	ldr	r2, [pc, #372]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6193      	str	r3, [r2, #24]
 8002624:	4b5b      	ldr	r3, [pc, #364]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002630:	4a59      	ldr	r2, [pc, #356]	; (8002798 <HAL_GPIO_Init+0x2f4>)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3302      	adds	r3, #2
 8002638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	220f      	movs	r2, #15
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800265a:	d025      	beq.n	80026a8 <HAL_GPIO_Init+0x204>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a4f      	ldr	r2, [pc, #316]	; (800279c <HAL_GPIO_Init+0x2f8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d01f      	beq.n	80026a4 <HAL_GPIO_Init+0x200>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a4e      	ldr	r2, [pc, #312]	; (80027a0 <HAL_GPIO_Init+0x2fc>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d019      	beq.n	80026a0 <HAL_GPIO_Init+0x1fc>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a4d      	ldr	r2, [pc, #308]	; (80027a4 <HAL_GPIO_Init+0x300>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d013      	beq.n	800269c <HAL_GPIO_Init+0x1f8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a4c      	ldr	r2, [pc, #304]	; (80027a8 <HAL_GPIO_Init+0x304>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d00d      	beq.n	8002698 <HAL_GPIO_Init+0x1f4>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a4b      	ldr	r2, [pc, #300]	; (80027ac <HAL_GPIO_Init+0x308>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d007      	beq.n	8002694 <HAL_GPIO_Init+0x1f0>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a4a      	ldr	r2, [pc, #296]	; (80027b0 <HAL_GPIO_Init+0x30c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d101      	bne.n	8002690 <HAL_GPIO_Init+0x1ec>
 800268c:	2306      	movs	r3, #6
 800268e:	e00c      	b.n	80026aa <HAL_GPIO_Init+0x206>
 8002690:	2307      	movs	r3, #7
 8002692:	e00a      	b.n	80026aa <HAL_GPIO_Init+0x206>
 8002694:	2305      	movs	r3, #5
 8002696:	e008      	b.n	80026aa <HAL_GPIO_Init+0x206>
 8002698:	2304      	movs	r3, #4
 800269a:	e006      	b.n	80026aa <HAL_GPIO_Init+0x206>
 800269c:	2303      	movs	r3, #3
 800269e:	e004      	b.n	80026aa <HAL_GPIO_Init+0x206>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e002      	b.n	80026aa <HAL_GPIO_Init+0x206>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <HAL_GPIO_Init+0x206>
 80026a8:	2300      	movs	r3, #0
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	f002 0203 	and.w	r2, r2, #3
 80026b0:	0092      	lsls	r2, r2, #2
 80026b2:	4093      	lsls	r3, r2
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026ba:	4937      	ldr	r1, [pc, #220]	; (8002798 <HAL_GPIO_Init+0x2f4>)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c8:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <HAL_GPIO_Init+0x310>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026ec:	4a31      	ldr	r2, [pc, #196]	; (80027b4 <HAL_GPIO_Init+0x310>)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026f2:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <HAL_GPIO_Init+0x310>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002716:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <HAL_GPIO_Init+0x310>)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <HAL_GPIO_Init+0x310>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	43db      	mvns	r3, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002740:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <HAL_GPIO_Init+0x310>)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002746:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <HAL_GPIO_Init+0x310>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	43db      	mvns	r3, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <HAL_GPIO_Init+0x310>)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	3301      	adds	r3, #1
 8002774:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	f47f ae97 	bne.w	80024b4 <HAL_GPIO_Init+0x10>
  }
}
 8002786:	bf00      	nop
 8002788:	bf00      	nop
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	40021000 	.word	0x40021000
 8002798:	40010000 	.word	0x40010000
 800279c:	48000400 	.word	0x48000400
 80027a0:	48000800 	.word	0x48000800
 80027a4:	48000c00 	.word	0x48000c00
 80027a8:	48001000 	.word	0x48001000
 80027ac:	48001400 	.word	0x48001400
 80027b0:	48001800 	.word	0x48001800
 80027b4:	40010400 	.word	0x40010400

080027b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80027be:	af00      	add	r7, sp, #0
 80027c0:	1d3b      	adds	r3, r7, #4
 80027c2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027c4:	1d3b      	adds	r3, r7, #4
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f000 bf01 	b.w	80035d4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8160 	beq.w	8002aa2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027e2:	4bae      	ldr	r3, [pc, #696]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d00c      	beq.n	8002808 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027ee:	4bab      	ldr	r3, [pc, #684]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d159      	bne.n	80028ae <HAL_RCC_OscConfig+0xf6>
 80027fa:	4ba8      	ldr	r3, [pc, #672]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002806:	d152      	bne.n	80028ae <HAL_RCC_OscConfig+0xf6>
 8002808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800280c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800281c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d102      	bne.n	800283a <HAL_RCC_OscConfig+0x82>
 8002834:	4b99      	ldr	r3, [pc, #612]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	e015      	b.n	8002866 <HAL_RCC_OscConfig+0xae>
 800283a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800283e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800284e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002852:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002856:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002862:	4b8e      	ldr	r3, [pc, #568]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800286a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800286e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002872:	fa92 f2a2 	rbit	r2, r2
 8002876:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800287a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800287e:	fab2 f282 	clz	r2, r2
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	f042 0220 	orr.w	r2, r2, #32
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	f002 021f 	and.w	r2, r2, #31
 800288e:	2101      	movs	r1, #1
 8002890:	fa01 f202 	lsl.w	r2, r1, r2
 8002894:	4013      	ands	r3, r2
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 8102 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x2e8>
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f040 80fc 	bne.w	8002aa0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	f000 be93 	b.w	80035d4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b8:	d106      	bne.n	80028c8 <HAL_RCC_OscConfig+0x110>
 80028ba:	4b78      	ldr	r3, [pc, #480]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a77      	ldr	r2, [pc, #476]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e030      	b.n	800292a <HAL_RCC_OscConfig+0x172>
 80028c8:	1d3b      	adds	r3, r7, #4
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0x134>
 80028d2:	4b72      	ldr	r3, [pc, #456]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a71      	ldr	r2, [pc, #452]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 80028d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	4b6f      	ldr	r3, [pc, #444]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a6e      	ldr	r2, [pc, #440]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 80028e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e01e      	b.n	800292a <HAL_RCC_OscConfig+0x172>
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f6:	d10c      	bne.n	8002912 <HAL_RCC_OscConfig+0x15a>
 80028f8:	4b68      	ldr	r3, [pc, #416]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a67      	ldr	r2, [pc, #412]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 80028fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b65      	ldr	r3, [pc, #404]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a64      	ldr	r2, [pc, #400]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 800290a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	e00b      	b.n	800292a <HAL_RCC_OscConfig+0x172>
 8002912:	4b62      	ldr	r3, [pc, #392]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a61      	ldr	r2, [pc, #388]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 8002918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b5f      	ldr	r3, [pc, #380]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a5e      	ldr	r2, [pc, #376]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 8002924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002928:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d059      	beq.n	80029e8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7fe fd16 	bl	8001364 <HAL_GetTick>
 8002938:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293c:	e00a      	b.n	8002954 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800293e:	f7fe fd11 	bl	8001364 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d902      	bls.n	8002954 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	f000 be40 	b.w	80035d4 <HAL_RCC_OscConfig+0xe1c>
 8002954:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002958:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002960:	fa93 f3a3 	rbit	r3, r3
 8002964:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002968:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	b2db      	uxtb	r3, r3
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b01      	cmp	r3, #1
 800297e:	d102      	bne.n	8002986 <HAL_RCC_OscConfig+0x1ce>
 8002980:	4b46      	ldr	r3, [pc, #280]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	e015      	b.n	80029b2 <HAL_RCC_OscConfig+0x1fa>
 8002986:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800298a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800299a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800299e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80029a2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80029ae:	4b3b      	ldr	r3, [pc, #236]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029b6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80029ba:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80029be:	fa92 f2a2 	rbit	r2, r2
 80029c2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80029c6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80029ca:	fab2 f282 	clz	r2, r2
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	f042 0220 	orr.w	r2, r2, #32
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	f002 021f 	and.w	r2, r2, #31
 80029da:	2101      	movs	r1, #1
 80029dc:	fa01 f202 	lsl.w	r2, r1, r2
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0ab      	beq.n	800293e <HAL_RCC_OscConfig+0x186>
 80029e6:	e05c      	b.n	8002aa2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fe fcbc 	bl	8001364 <HAL_GetTick>
 80029ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f2:	f7fe fcb7 	bl	8001364 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d902      	bls.n	8002a08 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	f000 bde6 	b.w	80035d4 <HAL_RCC_OscConfig+0xe1c>
 8002a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a0c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002a1c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d102      	bne.n	8002a3a <HAL_RCC_OscConfig+0x282>
 8002a34:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	e015      	b.n	8002a66 <HAL_RCC_OscConfig+0x2ae>
 8002a3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a3e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002a4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a52:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a56:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <HAL_RCC_OscConfig+0x2e4>)
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a6a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002a6e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002a72:	fa92 f2a2 	rbit	r2, r2
 8002a76:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002a7a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a7e:	fab2 f282 	clz	r2, r2
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	f042 0220 	orr.w	r2, r2, #32
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	f002 021f 	and.w	r2, r2, #31
 8002a8e:	2101      	movs	r1, #1
 8002a90:	fa01 f202 	lsl.w	r2, r1, r2
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1ab      	bne.n	80029f2 <HAL_RCC_OscConfig+0x23a>
 8002a9a:	e002      	b.n	8002aa2 <HAL_RCC_OscConfig+0x2ea>
 8002a9c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8170 	beq.w	8002d92 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ab2:	4bd0      	ldr	r3, [pc, #832]	; (8002df4 <HAL_RCC_OscConfig+0x63c>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00c      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002abe:	4bcd      	ldr	r3, [pc, #820]	; (8002df4 <HAL_RCC_OscConfig+0x63c>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d16d      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x3ee>
 8002aca:	4bca      	ldr	r3, [pc, #808]	; (8002df4 <HAL_RCC_OscConfig+0x63c>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ad6:	d166      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x3ee>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002aea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d102      	bne.n	8002b08 <HAL_RCC_OscConfig+0x350>
 8002b02:	4bbc      	ldr	r3, [pc, #752]	; (8002df4 <HAL_RCC_OscConfig+0x63c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	e013      	b.n	8002b30 <HAL_RCC_OscConfig+0x378>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b20:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b2c:	4bb1      	ldr	r3, [pc, #708]	; (8002df4 <HAL_RCC_OscConfig+0x63c>)
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	2202      	movs	r2, #2
 8002b32:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002b36:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002b3a:	fa92 f2a2 	rbit	r2, r2
 8002b3e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002b42:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b46:	fab2 f282 	clz	r2, r2
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	f042 0220 	orr.w	r2, r2, #32
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	f002 021f 	and.w	r2, r2, #31
 8002b56:	2101      	movs	r1, #1
 8002b58:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d007      	beq.n	8002b72 <HAL_RCC_OscConfig+0x3ba>
 8002b62:	1d3b      	adds	r3, r7, #4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d002      	beq.n	8002b72 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f000 bd31 	b.w	80035d4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b72:	4ba0      	ldr	r3, [pc, #640]	; (8002df4 <HAL_RCC_OscConfig+0x63c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	21f8      	movs	r1, #248	; 0xf8
 8002b82:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002b8a:	fa91 f1a1 	rbit	r1, r1
 8002b8e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002b92:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b96:	fab1 f181 	clz	r1, r1
 8002b9a:	b2c9      	uxtb	r1, r1
 8002b9c:	408b      	lsls	r3, r1
 8002b9e:	4995      	ldr	r1, [pc, #596]	; (8002df4 <HAL_RCC_OscConfig+0x63c>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba4:	e0f5      	b.n	8002d92 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 8085 	beq.w	8002cbc <HAL_RCC_OscConfig+0x504>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002bbc:	fa93 f3a3 	rbit	r3, r3
 8002bc0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002bc4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc8:	fab3 f383 	clz	r3, r3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bd2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	2301      	movs	r3, #1
 8002bdc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bde:	f7fe fbc1 	bl	8001364 <HAL_GetTick>
 8002be2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be6:	e00a      	b.n	8002bfe <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be8:	f7fe fbbc 	bl	8001364 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d902      	bls.n	8002bfe <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	f000 bceb 	b.w	80035d4 <HAL_RCC_OscConfig+0xe1c>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002c08:	fa93 f3a3 	rbit	r3, r3
 8002c0c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002c10:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c14:	fab3 f383 	clz	r3, r3
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d102      	bne.n	8002c2e <HAL_RCC_OscConfig+0x476>
 8002c28:	4b72      	ldr	r3, [pc, #456]	; (8002df4 <HAL_RCC_OscConfig+0x63c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	e013      	b.n	8002c56 <HAL_RCC_OscConfig+0x49e>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002c40:	2302      	movs	r3, #2
 8002c42:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c46:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c52:	4b68      	ldr	r3, [pc, #416]	; (8002df4 <HAL_RCC_OscConfig+0x63c>)
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	2202      	movs	r2, #2
 8002c58:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002c5c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002c60:	fa92 f2a2 	rbit	r2, r2
 8002c64:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002c68:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c6c:	fab2 f282 	clz	r2, r2
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	f042 0220 	orr.w	r2, r2, #32
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	f002 021f 	and.w	r2, r2, #31
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0af      	beq.n	8002be8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c88:	4b5a      	ldr	r3, [pc, #360]	; (8002df4 <HAL_RCC_OscConfig+0x63c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c90:	1d3b      	adds	r3, r7, #4
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	21f8      	movs	r1, #248	; 0xf8
 8002c98:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002ca0:	fa91 f1a1 	rbit	r1, r1
 8002ca4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002ca8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002cac:	fab1 f181 	clz	r1, r1
 8002cb0:	b2c9      	uxtb	r1, r1
 8002cb2:	408b      	lsls	r3, r1
 8002cb4:	494f      	ldr	r1, [pc, #316]	; (8002df4 <HAL_RCC_OscConfig+0x63c>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]
 8002cba:	e06a      	b.n	8002d92 <HAL_RCC_OscConfig+0x5da>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002cce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cdc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fb3c 	bl	8001364 <HAL_GetTick>
 8002cec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf2:	f7fe fb37 	bl	8001364 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d902      	bls.n	8002d08 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	f000 bc66 	b.w	80035d4 <HAL_RCC_OscConfig+0xe1c>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002d1a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d102      	bne.n	8002d38 <HAL_RCC_OscConfig+0x580>
 8002d32:	4b30      	ldr	r3, [pc, #192]	; (8002df4 <HAL_RCC_OscConfig+0x63c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	e013      	b.n	8002d60 <HAL_RCC_OscConfig+0x5a8>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d50:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d5c:	4b25      	ldr	r3, [pc, #148]	; (8002df4 <HAL_RCC_OscConfig+0x63c>)
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	2202      	movs	r2, #2
 8002d62:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002d66:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002d6a:	fa92 f2a2 	rbit	r2, r2
 8002d6e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002d72:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d76:	fab2 f282 	clz	r2, r2
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	f042 0220 	orr.w	r2, r2, #32
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	f002 021f 	and.w	r2, r2, #31
 8002d86:	2101      	movs	r1, #1
 8002d88:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1af      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d92:	1d3b      	adds	r3, r7, #4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80da 	beq.w	8002f56 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d069      	beq.n	8002e80 <HAL_RCC_OscConfig+0x6c8>
 8002dac:	2301      	movs	r3, #1
 8002dae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002dbe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCC_OscConfig+0x640>)
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd6:	f7fe fac5 	bl	8001364 <HAL_GetTick>
 8002dda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dde:	e00d      	b.n	8002dfc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de0:	f7fe fac0 	bl	8001364 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d905      	bls.n	8002dfc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e3ef      	b.n	80035d4 <HAL_RCC_OscConfig+0xe1c>
 8002df4:	40021000 	.word	0x40021000
 8002df8:	10908120 	.word	0x10908120
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e06:	fa93 f2a3 	rbit	r2, r3
 8002e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002e14:	2202      	movs	r2, #2
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	fa93 f2a3 	rbit	r2, r3
 8002e22:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	fa93 f2a3 	rbit	r2, r3
 8002e3a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002e3e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e40:	4ba4      	ldr	r3, [pc, #656]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 8002e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e44:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002e48:	2102      	movs	r1, #2
 8002e4a:	6019      	str	r1, [r3, #0]
 8002e4c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	fa93 f1a3 	rbit	r1, r3
 8002e56:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002e5a:	6019      	str	r1, [r3, #0]
  return result;
 8002e5c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	2101      	movs	r1, #1
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0b0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x628>
 8002e7e:	e06a      	b.n	8002f56 <HAL_RCC_OscConfig+0x79e>
 8002e80:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e84:	2201      	movs	r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	fa93 f2a3 	rbit	r2, r3
 8002e92:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e96:	601a      	str	r2, [r3, #0]
  return result;
 8002e98:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e9c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b8c      	ldr	r3, [pc, #560]	; (80030d8 <HAL_RCC_OscConfig+0x920>)
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	461a      	mov	r2, r3
 8002eae:	2300      	movs	r3, #0
 8002eb0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb2:	f7fe fa57 	bl	8001364 <HAL_GetTick>
 8002eb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eba:	e009      	b.n	8002ed0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ebc:	f7fe fa52 	bl	8001364 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e381      	b.n	80035d4 <HAL_RCC_OscConfig+0xe1c>
 8002ed0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	fa93 f2a3 	rbit	r2, r3
 8002ee2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002eec:	2202      	movs	r2, #2
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	fa93 f2a3 	rbit	r2, r3
 8002efa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f04:	2202      	movs	r2, #2
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	fa93 f2a3 	rbit	r2, r3
 8002f12:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002f16:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f18:	4b6e      	ldr	r3, [pc, #440]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 8002f1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f20:	2102      	movs	r1, #2
 8002f22:	6019      	str	r1, [r3, #0]
 8002f24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	fa93 f1a3 	rbit	r1, r3
 8002f2e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002f32:	6019      	str	r1, [r3, #0]
  return result;
 8002f34:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	fab3 f383 	clz	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1b2      	bne.n	8002ebc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f56:	1d3b      	adds	r3, r7, #4
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 8157 	beq.w	8003214 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6c:	4b59      	ldr	r3, [pc, #356]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d112      	bne.n	8002f9e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f78:	4b56      	ldr	r3, [pc, #344]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	4a55      	ldr	r2, [pc, #340]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 8002f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f82:	61d3      	str	r3, [r2, #28]
 8002f84:	4b53      	ldr	r3, [pc, #332]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f8c:	f107 030c 	add.w	r3, r7, #12
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f107 030c 	add.w	r3, r7, #12
 8002f96:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9e:	4b4f      	ldr	r3, [pc, #316]	; (80030dc <HAL_RCC_OscConfig+0x924>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d11a      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002faa:	4b4c      	ldr	r3, [pc, #304]	; (80030dc <HAL_RCC_OscConfig+0x924>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a4b      	ldr	r2, [pc, #300]	; (80030dc <HAL_RCC_OscConfig+0x924>)
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe f9d5 	bl	8001364 <HAL_GetTick>
 8002fba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbe:	e009      	b.n	8002fd4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc0:	f7fe f9d0 	bl	8001364 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b64      	cmp	r3, #100	; 0x64
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e2ff      	b.n	80035d4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd4:	4b41      	ldr	r3, [pc, #260]	; (80030dc <HAL_RCC_OscConfig+0x924>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0ef      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe0:	1d3b      	adds	r3, r7, #4
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d106      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x840>
 8002fea:	4b3a      	ldr	r3, [pc, #232]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	4a39      	ldr	r2, [pc, #228]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6213      	str	r3, [r2, #32]
 8002ff6:	e02f      	b.n	8003058 <HAL_RCC_OscConfig+0x8a0>
 8002ff8:	1d3b      	adds	r3, r7, #4
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0x864>
 8003002:	4b34      	ldr	r3, [pc, #208]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	4a33      	ldr	r2, [pc, #204]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 8003008:	f023 0301 	bic.w	r3, r3, #1
 800300c:	6213      	str	r3, [r2, #32]
 800300e:	4b31      	ldr	r3, [pc, #196]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	4a30      	ldr	r2, [pc, #192]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	6213      	str	r3, [r2, #32]
 800301a:	e01d      	b.n	8003058 <HAL_RCC_OscConfig+0x8a0>
 800301c:	1d3b      	adds	r3, r7, #4
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2b05      	cmp	r3, #5
 8003024:	d10c      	bne.n	8003040 <HAL_RCC_OscConfig+0x888>
 8003026:	4b2b      	ldr	r3, [pc, #172]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	4a2a      	ldr	r2, [pc, #168]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 800302c:	f043 0304 	orr.w	r3, r3, #4
 8003030:	6213      	str	r3, [r2, #32]
 8003032:	4b28      	ldr	r3, [pc, #160]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	4a27      	ldr	r2, [pc, #156]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	6213      	str	r3, [r2, #32]
 800303e:	e00b      	b.n	8003058 <HAL_RCC_OscConfig+0x8a0>
 8003040:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4a23      	ldr	r2, [pc, #140]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 8003046:	f023 0301 	bic.w	r3, r3, #1
 800304a:	6213      	str	r3, [r2, #32]
 800304c:	4b21      	ldr	r3, [pc, #132]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	4a20      	ldr	r2, [pc, #128]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 8003052:	f023 0304 	bic.w	r3, r3, #4
 8003056:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003058:	1d3b      	adds	r3, r7, #4
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d06a      	beq.n	8003138 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003062:	f7fe f97f 	bl	8001364 <HAL_GetTick>
 8003066:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306a:	e00b      	b.n	8003084 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800306c:	f7fe f97a 	bl	8001364 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	f241 3288 	movw	r2, #5000	; 0x1388
 800307c:	4293      	cmp	r3, r2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e2a7      	b.n	80035d4 <HAL_RCC_OscConfig+0xe1c>
 8003084:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003088:	2202      	movs	r2, #2
 800308a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	fa93 f2a3 	rbit	r2, r3
 8003096:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80030a0:	2202      	movs	r2, #2
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	fa93 f2a3 	rbit	r2, r3
 80030ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80030b2:	601a      	str	r2, [r3, #0]
  return result;
 80030b4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80030b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ba:	fab3 f383 	clz	r3, r3
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	f043 0302 	orr.w	r3, r3, #2
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d108      	bne.n	80030e0 <HAL_RCC_OscConfig+0x928>
 80030ce:	4b01      	ldr	r3, [pc, #4]	; (80030d4 <HAL_RCC_OscConfig+0x91c>)
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	e013      	b.n	80030fc <HAL_RCC_OscConfig+0x944>
 80030d4:	40021000 	.word	0x40021000
 80030d8:	10908120 	.word	0x10908120
 80030dc:	40007000 	.word	0x40007000
 80030e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030e4:	2202      	movs	r2, #2
 80030e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	fa93 f2a3 	rbit	r2, r3
 80030f2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	4bc0      	ldr	r3, [pc, #768]	; (80033fc <HAL_RCC_OscConfig+0xc44>)
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003100:	2102      	movs	r1, #2
 8003102:	6011      	str	r1, [r2, #0]
 8003104:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	fa92 f1a2 	rbit	r1, r2
 800310e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003112:	6011      	str	r1, [r2, #0]
  return result;
 8003114:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003118:	6812      	ldr	r2, [r2, #0]
 800311a:	fab2 f282 	clz	r2, r2
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	f002 021f 	and.w	r2, r2, #31
 800312a:	2101      	movs	r1, #1
 800312c:	fa01 f202 	lsl.w	r2, r1, r2
 8003130:	4013      	ands	r3, r2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d09a      	beq.n	800306c <HAL_RCC_OscConfig+0x8b4>
 8003136:	e063      	b.n	8003200 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003138:	f7fe f914 	bl	8001364 <HAL_GetTick>
 800313c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003140:	e00b      	b.n	800315a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fe f90f 	bl	8001364 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003152:	4293      	cmp	r3, r2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e23c      	b.n	80035d4 <HAL_RCC_OscConfig+0xe1c>
 800315a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800315e:	2202      	movs	r2, #2
 8003160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	fa93 f2a3 	rbit	r2, r3
 800316c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003176:	2202      	movs	r2, #2
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	fa93 f2a3 	rbit	r2, r3
 8003184:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003188:	601a      	str	r2, [r3, #0]
  return result;
 800318a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800318e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003190:	fab3 f383 	clz	r3, r3
 8003194:	b2db      	uxtb	r3, r3
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	b2db      	uxtb	r3, r3
 800319a:	f043 0302 	orr.w	r3, r3, #2
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d102      	bne.n	80031aa <HAL_RCC_OscConfig+0x9f2>
 80031a4:	4b95      	ldr	r3, [pc, #596]	; (80033fc <HAL_RCC_OscConfig+0xc44>)
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	e00d      	b.n	80031c6 <HAL_RCC_OscConfig+0xa0e>
 80031aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80031ae:	2202      	movs	r2, #2
 80031b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	fa93 f2a3 	rbit	r2, r3
 80031bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	4b8e      	ldr	r3, [pc, #568]	; (80033fc <HAL_RCC_OscConfig+0xc44>)
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80031ca:	2102      	movs	r1, #2
 80031cc:	6011      	str	r1, [r2, #0]
 80031ce:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	fa92 f1a2 	rbit	r1, r2
 80031d8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80031dc:	6011      	str	r1, [r2, #0]
  return result;
 80031de:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	fab2 f282 	clz	r2, r2
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	f002 021f 	and.w	r2, r2, #31
 80031f4:	2101      	movs	r1, #1
 80031f6:	fa01 f202 	lsl.w	r2, r1, r2
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1a0      	bne.n	8003142 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003200:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003204:	2b01      	cmp	r3, #1
 8003206:	d105      	bne.n	8003214 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003208:	4b7c      	ldr	r3, [pc, #496]	; (80033fc <HAL_RCC_OscConfig+0xc44>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	4a7b      	ldr	r2, [pc, #492]	; (80033fc <HAL_RCC_OscConfig+0xc44>)
 800320e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003212:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 81d9 	beq.w	80035d2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003220:	4b76      	ldr	r3, [pc, #472]	; (80033fc <HAL_RCC_OscConfig+0xc44>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 030c 	and.w	r3, r3, #12
 8003228:	2b08      	cmp	r3, #8
 800322a:	f000 81a6 	beq.w	800357a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322e:	1d3b      	adds	r3, r7, #4
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	2b02      	cmp	r3, #2
 8003236:	f040 811e 	bne.w	8003476 <HAL_RCC_OscConfig+0xcbe>
 800323a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800323e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003242:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	fa93 f2a3 	rbit	r2, r3
 800324e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003252:	601a      	str	r2, [r3, #0]
  return result;
 8003254:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003258:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003264:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	461a      	mov	r2, r3
 800326c:	2300      	movs	r3, #0
 800326e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fe f878 	bl	8001364 <HAL_GetTick>
 8003274:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003278:	e009      	b.n	800328e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327a:	f7fe f873 	bl	8001364 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e1a2      	b.n	80035d4 <HAL_RCC_OscConfig+0xe1c>
 800328e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003292:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	fa93 f2a3 	rbit	r2, r3
 80032a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80032a6:	601a      	str	r2, [r3, #0]
  return result;
 80032a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80032ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d102      	bne.n	80032c8 <HAL_RCC_OscConfig+0xb10>
 80032c2:	4b4e      	ldr	r3, [pc, #312]	; (80033fc <HAL_RCC_OscConfig+0xc44>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	e01b      	b.n	8003300 <HAL_RCC_OscConfig+0xb48>
 80032c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	fa93 f2a3 	rbit	r2, r3
 80032dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	fa93 f2a3 	rbit	r2, r3
 80032f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	4b3f      	ldr	r3, [pc, #252]	; (80033fc <HAL_RCC_OscConfig+0xc44>)
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003304:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003308:	6011      	str	r1, [r2, #0]
 800330a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	fa92 f1a2 	rbit	r1, r2
 8003314:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003318:	6011      	str	r1, [r2, #0]
  return result;
 800331a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	fab2 f282 	clz	r2, r2
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	f042 0220 	orr.w	r2, r2, #32
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	f002 021f 	and.w	r2, r2, #31
 8003330:	2101      	movs	r1, #1
 8003332:	fa01 f202 	lsl.w	r2, r1, r2
 8003336:	4013      	ands	r3, r2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d19e      	bne.n	800327a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800333c:	4b2f      	ldr	r3, [pc, #188]	; (80033fc <HAL_RCC_OscConfig+0xc44>)
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	f023 020f 	bic.w	r2, r3, #15
 8003344:	1d3b      	adds	r3, r7, #4
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	492c      	ldr	r1, [pc, #176]	; (80033fc <HAL_RCC_OscConfig+0xc44>)
 800334c:	4313      	orrs	r3, r2
 800334e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003350:	4b2a      	ldr	r3, [pc, #168]	; (80033fc <HAL_RCC_OscConfig+0xc44>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003358:	1d3b      	adds	r3, r7, #4
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6a19      	ldr	r1, [r3, #32]
 800335e:	1d3b      	adds	r3, r7, #4
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	430b      	orrs	r3, r1
 8003366:	4925      	ldr	r1, [pc, #148]	; (80033fc <HAL_RCC_OscConfig+0xc44>)
 8003368:	4313      	orrs	r3, r2
 800336a:	604b      	str	r3, [r1, #4]
 800336c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003370:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003374:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	fa93 f2a3 	rbit	r2, r3
 8003380:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003384:	601a      	str	r2, [r3, #0]
  return result;
 8003386:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800338a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003396:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	461a      	mov	r2, r3
 800339e:	2301      	movs	r3, #1
 80033a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a2:	f7fd ffdf 	bl	8001364 <HAL_GetTick>
 80033a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033aa:	e009      	b.n	80033c0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fd ffda 	bl	8001364 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e109      	b.n	80035d4 <HAL_RCC_OscConfig+0xe1c>
 80033c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	fa93 f2a3 	rbit	r2, r3
 80033d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033d8:	601a      	str	r2, [r3, #0]
  return result;
 80033da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033e0:	fab3 f383 	clz	r3, r3
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d105      	bne.n	8003400 <HAL_RCC_OscConfig+0xc48>
 80033f4:	4b01      	ldr	r3, [pc, #4]	; (80033fc <HAL_RCC_OscConfig+0xc44>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	e01e      	b.n	8003438 <HAL_RCC_OscConfig+0xc80>
 80033fa:	bf00      	nop
 80033fc:	40021000 	.word	0x40021000
 8003400:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003404:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	fa93 f2a3 	rbit	r2, r3
 8003414:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800341e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	fa93 f2a3 	rbit	r2, r3
 800342e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	4b6a      	ldr	r3, [pc, #424]	; (80035e0 <HAL_RCC_OscConfig+0xe28>)
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800343c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003440:	6011      	str	r1, [r2, #0]
 8003442:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	fa92 f1a2 	rbit	r1, r2
 800344c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003450:	6011      	str	r1, [r2, #0]
  return result;
 8003452:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	fab2 f282 	clz	r2, r2
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	f042 0220 	orr.w	r2, r2, #32
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	f002 021f 	and.w	r2, r2, #31
 8003468:	2101      	movs	r1, #1
 800346a:	fa01 f202 	lsl.w	r2, r1, r2
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d09b      	beq.n	80033ac <HAL_RCC_OscConfig+0xbf4>
 8003474:	e0ad      	b.n	80035d2 <HAL_RCC_OscConfig+0xe1a>
 8003476:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800347a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800347e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003480:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	fa93 f2a3 	rbit	r2, r3
 800348a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800348e:	601a      	str	r2, [r3, #0]
  return result;
 8003490:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003494:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	461a      	mov	r2, r3
 80034a8:	2300      	movs	r3, #0
 80034aa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fd ff5a 	bl	8001364 <HAL_GetTick>
 80034b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b4:	e009      	b.n	80034ca <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fd ff55 	bl	8001364 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e084      	b.n	80035d4 <HAL_RCC_OscConfig+0xe1c>
 80034ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	fa93 f2a3 	rbit	r2, r3
 80034de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034e2:	601a      	str	r2, [r3, #0]
  return result;
 80034e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d102      	bne.n	8003504 <HAL_RCC_OscConfig+0xd4c>
 80034fe:	4b38      	ldr	r3, [pc, #224]	; (80035e0 <HAL_RCC_OscConfig+0xe28>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	e01b      	b.n	800353c <HAL_RCC_OscConfig+0xd84>
 8003504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003508:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800350c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	fa93 f2a3 	rbit	r2, r3
 8003518:	f107 0320 	add.w	r3, r7, #32
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	f107 031c 	add.w	r3, r7, #28
 8003522:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	f107 031c 	add.w	r3, r7, #28
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	fa93 f2a3 	rbit	r2, r3
 8003532:	f107 0318 	add.w	r3, r7, #24
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <HAL_RCC_OscConfig+0xe28>)
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	f107 0214 	add.w	r2, r7, #20
 8003540:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003544:	6011      	str	r1, [r2, #0]
 8003546:	f107 0214 	add.w	r2, r7, #20
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	fa92 f1a2 	rbit	r1, r2
 8003550:	f107 0210 	add.w	r2, r7, #16
 8003554:	6011      	str	r1, [r2, #0]
  return result;
 8003556:	f107 0210 	add.w	r2, r7, #16
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	fab2 f282 	clz	r2, r2
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	f042 0220 	orr.w	r2, r2, #32
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	f002 021f 	and.w	r2, r2, #31
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f202 	lsl.w	r2, r1, r2
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d19e      	bne.n	80034b6 <HAL_RCC_OscConfig+0xcfe>
 8003578:	e02b      	b.n	80035d2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800357a:	1d3b      	adds	r3, r7, #4
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e025      	b.n	80035d4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003588:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <HAL_RCC_OscConfig+0xe28>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003590:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <HAL_RCC_OscConfig+0xe28>)
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003598:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800359c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80035a0:	1d3b      	adds	r3, r7, #4
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d111      	bne.n	80035ce <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80035aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80035ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035b2:	1d3b      	adds	r3, r7, #4
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d108      	bne.n	80035ce <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80035bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035c0:	f003 020f 	and.w	r2, r3, #15
 80035c4:	1d3b      	adds	r3, r7, #4
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d001      	beq.n	80035d2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000

080035e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b09e      	sub	sp, #120	; 0x78
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e162      	b.n	80038c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035fc:	4b90      	ldr	r3, [pc, #576]	; (8003840 <HAL_RCC_ClockConfig+0x25c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d910      	bls.n	800362c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360a:	4b8d      	ldr	r3, [pc, #564]	; (8003840 <HAL_RCC_ClockConfig+0x25c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 0207 	bic.w	r2, r3, #7
 8003612:	498b      	ldr	r1, [pc, #556]	; (8003840 <HAL_RCC_ClockConfig+0x25c>)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	4313      	orrs	r3, r2
 8003618:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361a:	4b89      	ldr	r3, [pc, #548]	; (8003840 <HAL_RCC_ClockConfig+0x25c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e14a      	b.n	80038c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003638:	4b82      	ldr	r3, [pc, #520]	; (8003844 <HAL_RCC_ClockConfig+0x260>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	497f      	ldr	r1, [pc, #508]	; (8003844 <HAL_RCC_ClockConfig+0x260>)
 8003646:	4313      	orrs	r3, r2
 8003648:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 80dc 	beq.w	8003810 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d13c      	bne.n	80036da <HAL_RCC_ClockConfig+0xf6>
 8003660:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003664:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003668:	fa93 f3a3 	rbit	r3, r3
 800366c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800366e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003670:	fab3 f383 	clz	r3, r3
 8003674:	b2db      	uxtb	r3, r3
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b01      	cmp	r3, #1
 8003682:	d102      	bne.n	800368a <HAL_RCC_ClockConfig+0xa6>
 8003684:	4b6f      	ldr	r3, [pc, #444]	; (8003844 <HAL_RCC_ClockConfig+0x260>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	e00f      	b.n	80036aa <HAL_RCC_ClockConfig+0xc6>
 800368a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800368e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	667b      	str	r3, [r7, #100]	; 0x64
 8003698:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800369c:	663b      	str	r3, [r7, #96]	; 0x60
 800369e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036a6:	4b67      	ldr	r3, [pc, #412]	; (8003844 <HAL_RCC_ClockConfig+0x260>)
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80036b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036b2:	fa92 f2a2 	rbit	r2, r2
 80036b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80036b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036ba:	fab2 f282 	clz	r2, r2
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	f042 0220 	orr.w	r2, r2, #32
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	f002 021f 	and.w	r2, r2, #31
 80036ca:	2101      	movs	r1, #1
 80036cc:	fa01 f202 	lsl.w	r2, r1, r2
 80036d0:	4013      	ands	r3, r2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d17b      	bne.n	80037ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e0f3      	b.n	80038c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d13c      	bne.n	800375c <HAL_RCC_ClockConfig+0x178>
 80036e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f2:	fab3 f383 	clz	r3, r3
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d102      	bne.n	800370c <HAL_RCC_ClockConfig+0x128>
 8003706:	4b4f      	ldr	r3, [pc, #316]	; (8003844 <HAL_RCC_ClockConfig+0x260>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	e00f      	b.n	800372c <HAL_RCC_ClockConfig+0x148>
 800370c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003710:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	647b      	str	r3, [r7, #68]	; 0x44
 800371a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800371e:	643b      	str	r3, [r7, #64]	; 0x40
 8003720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003722:	fa93 f3a3 	rbit	r3, r3
 8003726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003728:	4b46      	ldr	r3, [pc, #280]	; (8003844 <HAL_RCC_ClockConfig+0x260>)
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003730:	63ba      	str	r2, [r7, #56]	; 0x38
 8003732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003734:	fa92 f2a2 	rbit	r2, r2
 8003738:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800373a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800373c:	fab2 f282 	clz	r2, r2
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	f042 0220 	orr.w	r2, r2, #32
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	f002 021f 	and.w	r2, r2, #31
 800374c:	2101      	movs	r1, #1
 800374e:	fa01 f202 	lsl.w	r2, r1, r2
 8003752:	4013      	ands	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d13a      	bne.n	80037ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0b2      	b.n	80038c2 <HAL_RCC_ClockConfig+0x2de>
 800375c:	2302      	movs	r3, #2
 800375e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	fa93 f3a3 	rbit	r3, r3
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376a:	fab3 f383 	clz	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b01      	cmp	r3, #1
 800377c:	d102      	bne.n	8003784 <HAL_RCC_ClockConfig+0x1a0>
 800377e:	4b31      	ldr	r3, [pc, #196]	; (8003844 <HAL_RCC_ClockConfig+0x260>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	e00d      	b.n	80037a0 <HAL_RCC_ClockConfig+0x1bc>
 8003784:	2302      	movs	r3, #2
 8003786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
 8003790:	2302      	movs	r3, #2
 8003792:	623b      	str	r3, [r7, #32]
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	fa93 f3a3 	rbit	r3, r3
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	4b29      	ldr	r3, [pc, #164]	; (8003844 <HAL_RCC_ClockConfig+0x260>)
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	2202      	movs	r2, #2
 80037a2:	61ba      	str	r2, [r7, #24]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	fa92 f2a2 	rbit	r2, r2
 80037aa:	617a      	str	r2, [r7, #20]
  return result;
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	fab2 f282 	clz	r2, r2
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	f042 0220 	orr.w	r2, r2, #32
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	f002 021f 	and.w	r2, r2, #31
 80037be:	2101      	movs	r1, #1
 80037c0:	fa01 f202 	lsl.w	r2, r1, r2
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e079      	b.n	80038c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ce:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <HAL_RCC_ClockConfig+0x260>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f023 0203 	bic.w	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	491a      	ldr	r1, [pc, #104]	; (8003844 <HAL_RCC_ClockConfig+0x260>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e0:	f7fd fdc0 	bl	8001364 <HAL_GetTick>
 80037e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e8:	f7fd fdbc 	bl	8001364 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e061      	b.n	80038c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fe:	4b11      	ldr	r3, [pc, #68]	; (8003844 <HAL_RCC_ClockConfig+0x260>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 020c 	and.w	r2, r3, #12
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	429a      	cmp	r2, r3
 800380e:	d1eb      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_ClockConfig+0x25c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d214      	bcs.n	8003848 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381e:	4b08      	ldr	r3, [pc, #32]	; (8003840 <HAL_RCC_ClockConfig+0x25c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 0207 	bic.w	r2, r3, #7
 8003826:	4906      	ldr	r1, [pc, #24]	; (8003840 <HAL_RCC_ClockConfig+0x25c>)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	4313      	orrs	r3, r2
 800382c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800382e:	4b04      	ldr	r3, [pc, #16]	; (8003840 <HAL_RCC_ClockConfig+0x25c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d005      	beq.n	8003848 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e040      	b.n	80038c2 <HAL_RCC_ClockConfig+0x2de>
 8003840:	40022000 	.word	0x40022000
 8003844:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003854:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <HAL_RCC_ClockConfig+0x2e8>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	491a      	ldr	r1, [pc, #104]	; (80038cc <HAL_RCC_ClockConfig+0x2e8>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d009      	beq.n	8003886 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003872:	4b16      	ldr	r3, [pc, #88]	; (80038cc <HAL_RCC_ClockConfig+0x2e8>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4912      	ldr	r1, [pc, #72]	; (80038cc <HAL_RCC_ClockConfig+0x2e8>)
 8003882:	4313      	orrs	r3, r2
 8003884:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003886:	f000 f829 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 800388a:	4601      	mov	r1, r0
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <HAL_RCC_ClockConfig+0x2e8>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003894:	22f0      	movs	r2, #240	; 0xf0
 8003896:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	fa92 f2a2 	rbit	r2, r2
 800389e:	60fa      	str	r2, [r7, #12]
  return result;
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	fab2 f282 	clz	r2, r2
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	40d3      	lsrs	r3, r2
 80038aa:	4a09      	ldr	r2, [pc, #36]	; (80038d0 <HAL_RCC_ClockConfig+0x2ec>)
 80038ac:	5cd3      	ldrb	r3, [r2, r3]
 80038ae:	fa21 f303 	lsr.w	r3, r1, r3
 80038b2:	4a08      	ldr	r2, [pc, #32]	; (80038d4 <HAL_RCC_ClockConfig+0x2f0>)
 80038b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80038b6:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <HAL_RCC_ClockConfig+0x2f4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fd fd0e 	bl	80012dc <HAL_InitTick>
  
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3778      	adds	r7, #120	; 0x78
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000
 80038d0:	08005b04 	.word	0x08005b04
 80038d4:	20000000 	.word	0x20000000
 80038d8:	20000004 	.word	0x20000004

080038dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	b08b      	sub	sp, #44	; 0x2c
 80038e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
 80038e6:	2300      	movs	r3, #0
 80038e8:	61bb      	str	r3, [r7, #24]
 80038ea:	2300      	movs	r3, #0
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80038f6:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b04      	cmp	r3, #4
 8003904:	d002      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x30>
 8003906:	2b08      	cmp	r3, #8
 8003908:	d003      	beq.n	8003912 <HAL_RCC_GetSysClockFreq+0x36>
 800390a:	e03f      	b.n	800398c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800390c:	4b25      	ldr	r3, [pc, #148]	; (80039a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800390e:	623b      	str	r3, [r7, #32]
      break;
 8003910:	e03f      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003918:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800391c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	fa92 f2a2 	rbit	r2, r2
 8003924:	607a      	str	r2, [r7, #4]
  return result;
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	fab2 f282 	clz	r2, r2
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	40d3      	lsrs	r3, r2
 8003930:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003932:	5cd3      	ldrb	r3, [r2, r3]
 8003934:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003936:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	220f      	movs	r2, #15
 8003940:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	fa92 f2a2 	rbit	r2, r2
 8003948:	60fa      	str	r2, [r7, #12]
  return result;
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	fab2 f282 	clz	r2, r2
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	40d3      	lsrs	r3, r2
 8003954:	4a15      	ldr	r2, [pc, #84]	; (80039ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8003956:	5cd3      	ldrb	r3, [r2, r3]
 8003958:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003964:	4a0f      	ldr	r2, [pc, #60]	; (80039a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	fbb2 f2f3 	udiv	r2, r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	fb02 f303 	mul.w	r3, r2, r3
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
 8003974:	e007      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003976:	4a0b      	ldr	r2, [pc, #44]	; (80039a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	fbb2 f2f3 	udiv	r2, r2, r3
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	fb02 f303 	mul.w	r3, r2, r3
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	623b      	str	r3, [r7, #32]
      break;
 800398a:	e002      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800398e:	623b      	str	r3, [r7, #32]
      break;
 8003990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003992:	6a3b      	ldr	r3, [r7, #32]
}
 8003994:	4618      	mov	r0, r3
 8003996:	372c      	adds	r7, #44	; 0x2c
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	40021000 	.word	0x40021000
 80039a4:	007a1200 	.word	0x007a1200
 80039a8:	08005b1c 	.word	0x08005b1c
 80039ac:	08005b2c 	.word	0x08005b2c

080039b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039b6:	681b      	ldr	r3, [r3, #0]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	20000000 	.word	0x20000000

080039c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80039ce:	f7ff ffef 	bl	80039b0 <HAL_RCC_GetHCLKFreq>
 80039d2:	4601      	mov	r1, r0
 80039d4:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80039e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	fa92 f2a2 	rbit	r2, r2
 80039e8:	603a      	str	r2, [r7, #0]
  return result;
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	fab2 f282 	clz	r2, r2
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	40d3      	lsrs	r3, r2
 80039f4:	4a04      	ldr	r2, [pc, #16]	; (8003a08 <HAL_RCC_GetPCLK1Freq+0x40>)
 80039f6:	5cd3      	ldrb	r3, [r2, r3]
 80039f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40021000 	.word	0x40021000
 8003a08:	08005b14 	.word	0x08005b14

08003a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a12:	f7ff ffcd 	bl	80039b0 <HAL_RCC_GetHCLKFreq>
 8003a16:	4601      	mov	r1, r0
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003a20:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003a24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	fa92 f2a2 	rbit	r2, r2
 8003a2c:	603a      	str	r2, [r7, #0]
  return result;
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	fab2 f282 	clz	r2, r2
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	40d3      	lsrs	r3, r2
 8003a38:	4a04      	ldr	r2, [pc, #16]	; (8003a4c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a3a:	5cd3      	ldrb	r3, [r2, r3]
 8003a3c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	08005b14 	.word	0x08005b14

08003a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b092      	sub	sp, #72	; 0x48
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80d4 	beq.w	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a74:	4b4e      	ldr	r3, [pc, #312]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10e      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a80:	4b4b      	ldr	r3, [pc, #300]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	4a4a      	ldr	r2, [pc, #296]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	61d3      	str	r3, [r2, #28]
 8003a8c:	4b48      	ldr	r3, [pc, #288]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9e:	4b45      	ldr	r3, [pc, #276]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d118      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aaa:	4b42      	ldr	r3, [pc, #264]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a41      	ldr	r2, [pc, #260]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab6:	f7fd fc55 	bl	8001364 <HAL_GetTick>
 8003aba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abc:	e008      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003abe:	f7fd fc51 	bl	8001364 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b64      	cmp	r3, #100	; 0x64
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e1d6      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad0:	4b38      	ldr	r3, [pc, #224]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003adc:	4b34      	ldr	r3, [pc, #208]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8084 	beq.w	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d07c      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003afc:	4b2c      	ldr	r3, [pc, #176]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b26      	ldr	r3, [pc, #152]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	461a      	mov	r2, r3
 8003b26:	2301      	movs	r3, #1
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	4b1d      	ldr	r3, [pc, #116]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b4e:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b52:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d04b      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5e:	f7fd fc01 	bl	8001364 <HAL_GetTick>
 8003b62:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b64:	e00a      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b66:	f7fd fbfd 	bl	8001364 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e180      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	fa93 f3a3 	rbit	r3, r3
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
 8003b88:	2302      	movs	r3, #2
 8003b8a:	623b      	str	r3, [r7, #32]
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	61fb      	str	r3, [r7, #28]
  return result;
 8003b94:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	f043 0302 	orr.w	r3, r3, #2
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d108      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003baa:	4b01      	ldr	r3, [pc, #4]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	e00d      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40007000 	.word	0x40007000
 8003bb8:	10908100 	.word	0x10908100
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	fa93 f3a3 	rbit	r3, r3
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	4ba0      	ldr	r3, [pc, #640]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	2202      	movs	r2, #2
 8003bce:	613a      	str	r2, [r7, #16]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	fa92 f2a2 	rbit	r2, r2
 8003bd6:	60fa      	str	r2, [r7, #12]
  return result;
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	fab2 f282 	clz	r2, r2
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	f002 021f 	and.w	r2, r2, #31
 8003bea:	2101      	movs	r1, #1
 8003bec:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0b7      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003bf6:	4b95      	ldr	r3, [pc, #596]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4992      	ldr	r1, [pc, #584]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d105      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c10:	4b8e      	ldr	r3, [pc, #568]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	4a8d      	ldr	r2, [pc, #564]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c28:	4b88      	ldr	r3, [pc, #544]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	f023 0203 	bic.w	r2, r3, #3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4985      	ldr	r1, [pc, #532]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c46:	4b81      	ldr	r3, [pc, #516]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	497e      	ldr	r1, [pc, #504]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c64:	4b79      	ldr	r3, [pc, #484]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	4976      	ldr	r1, [pc, #472]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c82:	4b72      	ldr	r3, [pc, #456]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	f023 0210 	bic.w	r2, r3, #16
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	496f      	ldr	r1, [pc, #444]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003ca0:	4b6a      	ldr	r3, [pc, #424]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	4967      	ldr	r1, [pc, #412]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cbe:	4b63      	ldr	r3, [pc, #396]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f023 0220 	bic.w	r2, r3, #32
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	4960      	ldr	r1, [pc, #384]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cdc:	4b5b      	ldr	r3, [pc, #364]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	4958      	ldr	r1, [pc, #352]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d008      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cfa:	4b54      	ldr	r3, [pc, #336]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	4951      	ldr	r1, [pc, #324]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0310 	and.w	r3, r3, #16
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d18:	4b4c      	ldr	r3, [pc, #304]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	4949      	ldr	r1, [pc, #292]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d36:	4b45      	ldr	r3, [pc, #276]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	4942      	ldr	r1, [pc, #264]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d54:	4b3d      	ldr	r3, [pc, #244]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	493a      	ldr	r1, [pc, #232]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003d72:	4b36      	ldr	r3, [pc, #216]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	4933      	ldr	r1, [pc, #204]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d90:	4b2e      	ldr	r3, [pc, #184]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9c:	492b      	ldr	r1, [pc, #172]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003dae:	4b27      	ldr	r3, [pc, #156]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	4924      	ldr	r1, [pc, #144]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003dcc:	4b1f      	ldr	r3, [pc, #124]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	491c      	ldr	r1, [pc, #112]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d008      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003dea:	4b18      	ldr	r3, [pc, #96]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df6:	4915      	ldr	r1, [pc, #84]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003e08:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e14:	490d      	ldr	r1, [pc, #52]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e32:	4906      	ldr	r1, [pc, #24]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00c      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003e44:	4b01      	ldr	r3, [pc, #4]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	e002      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003e4a:	bf00      	nop
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e58:	490b      	ldr	r1, [pc, #44]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003e6a:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e76:	4904      	ldr	r1, [pc, #16]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3748      	adds	r7, #72	; 0x48
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40021000 	.word	0x40021000

08003e8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e09d      	b.n	8003fda <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d108      	bne.n	8003eb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eae:	d009      	beq.n	8003ec4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	61da      	str	r2, [r3, #28]
 8003eb6:	e005      	b.n	8003ec4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fc ff84 	bl	8000dec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003efa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f04:	d902      	bls.n	8003f0c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	e002      	b.n	8003f12 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f10:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f1a:	d007      	beq.n	8003f2c <HAL_SPI_Init+0xa0>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f24:	d002      	beq.n	8003f2c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6e:	ea42 0103 	orr.w	r1, r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	0c1b      	lsrs	r3, r3, #16
 8003f88:	f003 0204 	and.w	r2, r3, #4
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003fa8:	ea42 0103 	orr.w	r1, r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69da      	ldr	r2, [r3, #28]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e040      	b.n	8004076 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d106      	bne.n	800400a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7fd f8c5 	bl	8001194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2224      	movs	r2, #36	; 0x24
 800400e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0201 	bic.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f8c1 	bl	80041a8 <UART_SetConfig>
 8004026:	4603      	mov	r3, r0
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e022      	b.n	8004076 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fa8b 	bl	8004554 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800404c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800405c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fb12 	bl	8004698 <UART_CheckIdleState>
 8004074:	4603      	mov	r3, r0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b08a      	sub	sp, #40	; 0x28
 8004082:	af02      	add	r7, sp, #8
 8004084:	60f8      	str	r0, [r7, #12]
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	603b      	str	r3, [r7, #0]
 800408a:	4613      	mov	r3, r2
 800408c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004092:	2b20      	cmp	r3, #32
 8004094:	f040 8082 	bne.w	800419c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <HAL_UART_Transmit+0x26>
 800409e:	88fb      	ldrh	r3, [r7, #6]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e07a      	b.n	800419e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_UART_Transmit+0x38>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e073      	b.n	800419e <HAL_UART_Transmit+0x120>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2221      	movs	r2, #33	; 0x21
 80040ca:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040cc:	f7fd f94a 	bl	8001364 <HAL_GetTick>
 80040d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	88fa      	ldrh	r2, [r7, #6]
 80040d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	88fa      	ldrh	r2, [r7, #6]
 80040de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ea:	d108      	bne.n	80040fe <HAL_UART_Transmit+0x80>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d104      	bne.n	80040fe <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	e003      	b.n	8004106 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004102:	2300      	movs	r3, #0
 8004104:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800410e:	e02d      	b.n	800416c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2200      	movs	r2, #0
 8004118:	2180      	movs	r1, #128	; 0x80
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 fb05 	bl	800472a <UART_WaitOnFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e039      	b.n	800419e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10b      	bne.n	8004148 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	881a      	ldrh	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800413c:	b292      	uxth	r2, r2
 800413e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	3302      	adds	r3, #2
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	e008      	b.n	800415a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	781a      	ldrb	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	b292      	uxth	r2, r2
 8004152:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	3301      	adds	r3, #1
 8004158:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1cb      	bne.n	8004110 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2200      	movs	r2, #0
 8004180:	2140      	movs	r1, #64	; 0x40
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 fad1 	bl	800472a <UART_WaitOnFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e005      	b.n	800419e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	e000      	b.n	800419e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800419c:	2302      	movs	r3, #2
  }
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4bab      	ldr	r3, [pc, #684]	; (8004480 <UART_SetConfig+0x2d8>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6812      	ldr	r2, [r2, #0]
 80041da:	6979      	ldr	r1, [r7, #20]
 80041dc:	430b      	orrs	r3, r1
 80041de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	430a      	orrs	r2, r1
 8004218:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a99      	ldr	r2, [pc, #612]	; (8004484 <UART_SetConfig+0x2dc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d120      	bne.n	8004266 <UART_SetConfig+0xbe>
 8004224:	4b98      	ldr	r3, [pc, #608]	; (8004488 <UART_SetConfig+0x2e0>)
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	2b03      	cmp	r3, #3
 800422e:	d817      	bhi.n	8004260 <UART_SetConfig+0xb8>
 8004230:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <UART_SetConfig+0x90>)
 8004232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004236:	bf00      	nop
 8004238:	08004249 	.word	0x08004249
 800423c:	08004255 	.word	0x08004255
 8004240:	0800425b 	.word	0x0800425b
 8004244:	0800424f 	.word	0x0800424f
 8004248:	2301      	movs	r3, #1
 800424a:	77fb      	strb	r3, [r7, #31]
 800424c:	e0b5      	b.n	80043ba <UART_SetConfig+0x212>
 800424e:	2302      	movs	r3, #2
 8004250:	77fb      	strb	r3, [r7, #31]
 8004252:	e0b2      	b.n	80043ba <UART_SetConfig+0x212>
 8004254:	2304      	movs	r3, #4
 8004256:	77fb      	strb	r3, [r7, #31]
 8004258:	e0af      	b.n	80043ba <UART_SetConfig+0x212>
 800425a:	2308      	movs	r3, #8
 800425c:	77fb      	strb	r3, [r7, #31]
 800425e:	e0ac      	b.n	80043ba <UART_SetConfig+0x212>
 8004260:	2310      	movs	r3, #16
 8004262:	77fb      	strb	r3, [r7, #31]
 8004264:	e0a9      	b.n	80043ba <UART_SetConfig+0x212>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a88      	ldr	r2, [pc, #544]	; (800448c <UART_SetConfig+0x2e4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d124      	bne.n	80042ba <UART_SetConfig+0x112>
 8004270:	4b85      	ldr	r3, [pc, #532]	; (8004488 <UART_SetConfig+0x2e0>)
 8004272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004274:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004278:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800427c:	d011      	beq.n	80042a2 <UART_SetConfig+0xfa>
 800427e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004282:	d817      	bhi.n	80042b4 <UART_SetConfig+0x10c>
 8004284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004288:	d011      	beq.n	80042ae <UART_SetConfig+0x106>
 800428a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800428e:	d811      	bhi.n	80042b4 <UART_SetConfig+0x10c>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <UART_SetConfig+0xf4>
 8004294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004298:	d006      	beq.n	80042a8 <UART_SetConfig+0x100>
 800429a:	e00b      	b.n	80042b4 <UART_SetConfig+0x10c>
 800429c:	2300      	movs	r3, #0
 800429e:	77fb      	strb	r3, [r7, #31]
 80042a0:	e08b      	b.n	80043ba <UART_SetConfig+0x212>
 80042a2:	2302      	movs	r3, #2
 80042a4:	77fb      	strb	r3, [r7, #31]
 80042a6:	e088      	b.n	80043ba <UART_SetConfig+0x212>
 80042a8:	2304      	movs	r3, #4
 80042aa:	77fb      	strb	r3, [r7, #31]
 80042ac:	e085      	b.n	80043ba <UART_SetConfig+0x212>
 80042ae:	2308      	movs	r3, #8
 80042b0:	77fb      	strb	r3, [r7, #31]
 80042b2:	e082      	b.n	80043ba <UART_SetConfig+0x212>
 80042b4:	2310      	movs	r3, #16
 80042b6:	77fb      	strb	r3, [r7, #31]
 80042b8:	e07f      	b.n	80043ba <UART_SetConfig+0x212>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a74      	ldr	r2, [pc, #464]	; (8004490 <UART_SetConfig+0x2e8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d124      	bne.n	800430e <UART_SetConfig+0x166>
 80042c4:	4b70      	ldr	r3, [pc, #448]	; (8004488 <UART_SetConfig+0x2e0>)
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80042cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80042d0:	d011      	beq.n	80042f6 <UART_SetConfig+0x14e>
 80042d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80042d6:	d817      	bhi.n	8004308 <UART_SetConfig+0x160>
 80042d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042dc:	d011      	beq.n	8004302 <UART_SetConfig+0x15a>
 80042de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042e2:	d811      	bhi.n	8004308 <UART_SetConfig+0x160>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <UART_SetConfig+0x148>
 80042e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042ec:	d006      	beq.n	80042fc <UART_SetConfig+0x154>
 80042ee:	e00b      	b.n	8004308 <UART_SetConfig+0x160>
 80042f0:	2300      	movs	r3, #0
 80042f2:	77fb      	strb	r3, [r7, #31]
 80042f4:	e061      	b.n	80043ba <UART_SetConfig+0x212>
 80042f6:	2302      	movs	r3, #2
 80042f8:	77fb      	strb	r3, [r7, #31]
 80042fa:	e05e      	b.n	80043ba <UART_SetConfig+0x212>
 80042fc:	2304      	movs	r3, #4
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e05b      	b.n	80043ba <UART_SetConfig+0x212>
 8004302:	2308      	movs	r3, #8
 8004304:	77fb      	strb	r3, [r7, #31]
 8004306:	e058      	b.n	80043ba <UART_SetConfig+0x212>
 8004308:	2310      	movs	r3, #16
 800430a:	77fb      	strb	r3, [r7, #31]
 800430c:	e055      	b.n	80043ba <UART_SetConfig+0x212>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a60      	ldr	r2, [pc, #384]	; (8004494 <UART_SetConfig+0x2ec>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d124      	bne.n	8004362 <UART_SetConfig+0x1ba>
 8004318:	4b5b      	ldr	r3, [pc, #364]	; (8004488 <UART_SetConfig+0x2e0>)
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004320:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004324:	d011      	beq.n	800434a <UART_SetConfig+0x1a2>
 8004326:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800432a:	d817      	bhi.n	800435c <UART_SetConfig+0x1b4>
 800432c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004330:	d011      	beq.n	8004356 <UART_SetConfig+0x1ae>
 8004332:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004336:	d811      	bhi.n	800435c <UART_SetConfig+0x1b4>
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <UART_SetConfig+0x19c>
 800433c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004340:	d006      	beq.n	8004350 <UART_SetConfig+0x1a8>
 8004342:	e00b      	b.n	800435c <UART_SetConfig+0x1b4>
 8004344:	2300      	movs	r3, #0
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e037      	b.n	80043ba <UART_SetConfig+0x212>
 800434a:	2302      	movs	r3, #2
 800434c:	77fb      	strb	r3, [r7, #31]
 800434e:	e034      	b.n	80043ba <UART_SetConfig+0x212>
 8004350:	2304      	movs	r3, #4
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e031      	b.n	80043ba <UART_SetConfig+0x212>
 8004356:	2308      	movs	r3, #8
 8004358:	77fb      	strb	r3, [r7, #31]
 800435a:	e02e      	b.n	80043ba <UART_SetConfig+0x212>
 800435c:	2310      	movs	r3, #16
 800435e:	77fb      	strb	r3, [r7, #31]
 8004360:	e02b      	b.n	80043ba <UART_SetConfig+0x212>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a4c      	ldr	r2, [pc, #304]	; (8004498 <UART_SetConfig+0x2f0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d124      	bne.n	80043b6 <UART_SetConfig+0x20e>
 800436c:	4b46      	ldr	r3, [pc, #280]	; (8004488 <UART_SetConfig+0x2e0>)
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004374:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004378:	d011      	beq.n	800439e <UART_SetConfig+0x1f6>
 800437a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800437e:	d817      	bhi.n	80043b0 <UART_SetConfig+0x208>
 8004380:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004384:	d011      	beq.n	80043aa <UART_SetConfig+0x202>
 8004386:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800438a:	d811      	bhi.n	80043b0 <UART_SetConfig+0x208>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <UART_SetConfig+0x1f0>
 8004390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004394:	d006      	beq.n	80043a4 <UART_SetConfig+0x1fc>
 8004396:	e00b      	b.n	80043b0 <UART_SetConfig+0x208>
 8004398:	2300      	movs	r3, #0
 800439a:	77fb      	strb	r3, [r7, #31]
 800439c:	e00d      	b.n	80043ba <UART_SetConfig+0x212>
 800439e:	2302      	movs	r3, #2
 80043a0:	77fb      	strb	r3, [r7, #31]
 80043a2:	e00a      	b.n	80043ba <UART_SetConfig+0x212>
 80043a4:	2304      	movs	r3, #4
 80043a6:	77fb      	strb	r3, [r7, #31]
 80043a8:	e007      	b.n	80043ba <UART_SetConfig+0x212>
 80043aa:	2308      	movs	r3, #8
 80043ac:	77fb      	strb	r3, [r7, #31]
 80043ae:	e004      	b.n	80043ba <UART_SetConfig+0x212>
 80043b0:	2310      	movs	r3, #16
 80043b2:	77fb      	strb	r3, [r7, #31]
 80043b4:	e001      	b.n	80043ba <UART_SetConfig+0x212>
 80043b6:	2310      	movs	r3, #16
 80043b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c2:	d16d      	bne.n	80044a0 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 80043c4:	7ffb      	ldrb	r3, [r7, #31]
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d827      	bhi.n	800441a <UART_SetConfig+0x272>
 80043ca:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <UART_SetConfig+0x228>)
 80043cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d0:	080043f5 	.word	0x080043f5
 80043d4:	080043fd 	.word	0x080043fd
 80043d8:	08004405 	.word	0x08004405
 80043dc:	0800441b 	.word	0x0800441b
 80043e0:	0800440b 	.word	0x0800440b
 80043e4:	0800441b 	.word	0x0800441b
 80043e8:	0800441b 	.word	0x0800441b
 80043ec:	0800441b 	.word	0x0800441b
 80043f0:	08004413 	.word	0x08004413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f4:	f7ff fae8 	bl	80039c8 <HAL_RCC_GetPCLK1Freq>
 80043f8:	61b8      	str	r0, [r7, #24]
        break;
 80043fa:	e013      	b.n	8004424 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043fc:	f7ff fb06 	bl	8003a0c <HAL_RCC_GetPCLK2Freq>
 8004400:	61b8      	str	r0, [r7, #24]
        break;
 8004402:	e00f      	b.n	8004424 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004404:	4b25      	ldr	r3, [pc, #148]	; (800449c <UART_SetConfig+0x2f4>)
 8004406:	61bb      	str	r3, [r7, #24]
        break;
 8004408:	e00c      	b.n	8004424 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800440a:	f7ff fa67 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 800440e:	61b8      	str	r0, [r7, #24]
        break;
 8004410:	e008      	b.n	8004424 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004416:	61bb      	str	r3, [r7, #24]
        break;
 8004418:	e004      	b.n	8004424 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 800441a:	2300      	movs	r3, #0
 800441c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	77bb      	strb	r3, [r7, #30]
        break;
 8004422:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 8086 	beq.w	8004538 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	005a      	lsls	r2, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	085b      	lsrs	r3, r3, #1
 8004436:	441a      	add	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	b29b      	uxth	r3, r3
 8004442:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	2b0f      	cmp	r3, #15
 8004448:	d916      	bls.n	8004478 <UART_SetConfig+0x2d0>
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004450:	d212      	bcs.n	8004478 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	b29b      	uxth	r3, r3
 8004456:	f023 030f 	bic.w	r3, r3, #15
 800445a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	b29b      	uxth	r3, r3
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	b29a      	uxth	r2, r3
 8004468:	89fb      	ldrh	r3, [r7, #14]
 800446a:	4313      	orrs	r3, r2
 800446c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	89fa      	ldrh	r2, [r7, #14]
 8004474:	60da      	str	r2, [r3, #12]
 8004476:	e05f      	b.n	8004538 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	77bb      	strb	r3, [r7, #30]
 800447c:	e05c      	b.n	8004538 <UART_SetConfig+0x390>
 800447e:	bf00      	nop
 8004480:	efff69f3 	.word	0xefff69f3
 8004484:	40013800 	.word	0x40013800
 8004488:	40021000 	.word	0x40021000
 800448c:	40004400 	.word	0x40004400
 8004490:	40004800 	.word	0x40004800
 8004494:	40004c00 	.word	0x40004c00
 8004498:	40005000 	.word	0x40005000
 800449c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80044a0:	7ffb      	ldrb	r3, [r7, #31]
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d827      	bhi.n	80044f6 <UART_SetConfig+0x34e>
 80044a6:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <UART_SetConfig+0x304>)
 80044a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ac:	080044d1 	.word	0x080044d1
 80044b0:	080044d9 	.word	0x080044d9
 80044b4:	080044e1 	.word	0x080044e1
 80044b8:	080044f7 	.word	0x080044f7
 80044bc:	080044e7 	.word	0x080044e7
 80044c0:	080044f7 	.word	0x080044f7
 80044c4:	080044f7 	.word	0x080044f7
 80044c8:	080044f7 	.word	0x080044f7
 80044cc:	080044ef 	.word	0x080044ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d0:	f7ff fa7a 	bl	80039c8 <HAL_RCC_GetPCLK1Freq>
 80044d4:	61b8      	str	r0, [r7, #24]
        break;
 80044d6:	e013      	b.n	8004500 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d8:	f7ff fa98 	bl	8003a0c <HAL_RCC_GetPCLK2Freq>
 80044dc:	61b8      	str	r0, [r7, #24]
        break;
 80044de:	e00f      	b.n	8004500 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e0:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <UART_SetConfig+0x3a8>)
 80044e2:	61bb      	str	r3, [r7, #24]
        break;
 80044e4:	e00c      	b.n	8004500 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e6:	f7ff f9f9 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 80044ea:	61b8      	str	r0, [r7, #24]
        break;
 80044ec:	e008      	b.n	8004500 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f2:	61bb      	str	r3, [r7, #24]
        break;
 80044f4:	e004      	b.n	8004500 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	77bb      	strb	r3, [r7, #30]
        break;
 80044fe:	bf00      	nop
    }

    if (pclk != 0U)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d018      	beq.n	8004538 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	085a      	lsrs	r2, r3, #1
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	441a      	add	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	b29b      	uxth	r3, r3
 800451a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b0f      	cmp	r3, #15
 8004520:	d908      	bls.n	8004534 <UART_SetConfig+0x38c>
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004528:	d204      	bcs.n	8004534 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	e001      	b.n	8004538 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004544:	7fbb      	ldrb	r3, [r7, #30]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	007a1200 	.word	0x007a1200

08004554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01a      	beq.n	800466a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004652:	d10a      	bne.n	800466a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	605a      	str	r2, [r3, #4]
  }
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af02      	add	r7, sp, #8
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046a8:	f7fc fe5c 	bl	8001364 <HAL_GetTick>
 80046ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d10e      	bne.n	80046da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f82d 	bl	800472a <UART_WaitOnFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e023      	b.n	8004722 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d10e      	bne.n	8004706 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f817 	bl	800472a <UART_WaitOnFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e00d      	b.n	8004722 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2220      	movs	r2, #32
 800470a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	603b      	str	r3, [r7, #0]
 8004736:	4613      	mov	r3, r2
 8004738:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800473a:	e05e      	b.n	80047fa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004742:	d05a      	beq.n	80047fa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004744:	f7fc fe0e 	bl	8001364 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	429a      	cmp	r2, r3
 8004752:	d302      	bcc.n	800475a <UART_WaitOnFlagUntilTimeout+0x30>
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d11b      	bne.n	8004792 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004768:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0201 	bic.w	r2, r2, #1
 8004778:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e043      	b.n	800481a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d02c      	beq.n	80047fa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ae:	d124      	bne.n	80047fa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0201 	bic.w	r2, r2, #1
 80047d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2220      	movs	r2, #32
 80047e4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e00f      	b.n	800481a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4013      	ands	r3, r2
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	429a      	cmp	r2, r3
 8004808:	bf0c      	ite	eq
 800480a:	2301      	moveq	r3, #1
 800480c:	2300      	movne	r3, #0
 800480e:	b2db      	uxtb	r3, r3
 8004810:	461a      	mov	r2, r3
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	429a      	cmp	r2, r3
 8004816:	d091      	beq.n	800473c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <__errno>:
 8004824:	4b01      	ldr	r3, [pc, #4]	; (800482c <__errno+0x8>)
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	2000000c 	.word	0x2000000c

08004830 <__libc_init_array>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	4d0d      	ldr	r5, [pc, #52]	; (8004868 <__libc_init_array+0x38>)
 8004834:	4c0d      	ldr	r4, [pc, #52]	; (800486c <__libc_init_array+0x3c>)
 8004836:	1b64      	subs	r4, r4, r5
 8004838:	10a4      	asrs	r4, r4, #2
 800483a:	2600      	movs	r6, #0
 800483c:	42a6      	cmp	r6, r4
 800483e:	d109      	bne.n	8004854 <__libc_init_array+0x24>
 8004840:	4d0b      	ldr	r5, [pc, #44]	; (8004870 <__libc_init_array+0x40>)
 8004842:	4c0c      	ldr	r4, [pc, #48]	; (8004874 <__libc_init_array+0x44>)
 8004844:	f001 f948 	bl	8005ad8 <_init>
 8004848:	1b64      	subs	r4, r4, r5
 800484a:	10a4      	asrs	r4, r4, #2
 800484c:	2600      	movs	r6, #0
 800484e:	42a6      	cmp	r6, r4
 8004850:	d105      	bne.n	800485e <__libc_init_array+0x2e>
 8004852:	bd70      	pop	{r4, r5, r6, pc}
 8004854:	f855 3b04 	ldr.w	r3, [r5], #4
 8004858:	4798      	blx	r3
 800485a:	3601      	adds	r6, #1
 800485c:	e7ee      	b.n	800483c <__libc_init_array+0xc>
 800485e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004862:	4798      	blx	r3
 8004864:	3601      	adds	r6, #1
 8004866:	e7f2      	b.n	800484e <__libc_init_array+0x1e>
 8004868:	08005bd4 	.word	0x08005bd4
 800486c:	08005bd4 	.word	0x08005bd4
 8004870:	08005bd4 	.word	0x08005bd4
 8004874:	08005bd8 	.word	0x08005bd8

08004878 <memset>:
 8004878:	4402      	add	r2, r0
 800487a:	4603      	mov	r3, r0
 800487c:	4293      	cmp	r3, r2
 800487e:	d100      	bne.n	8004882 <memset+0xa>
 8004880:	4770      	bx	lr
 8004882:	f803 1b01 	strb.w	r1, [r3], #1
 8004886:	e7f9      	b.n	800487c <memset+0x4>

08004888 <iprintf>:
 8004888:	b40f      	push	{r0, r1, r2, r3}
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <iprintf+0x2c>)
 800488c:	b513      	push	{r0, r1, r4, lr}
 800488e:	681c      	ldr	r4, [r3, #0]
 8004890:	b124      	cbz	r4, 800489c <iprintf+0x14>
 8004892:	69a3      	ldr	r3, [r4, #24]
 8004894:	b913      	cbnz	r3, 800489c <iprintf+0x14>
 8004896:	4620      	mov	r0, r4
 8004898:	f000 f886 	bl	80049a8 <__sinit>
 800489c:	ab05      	add	r3, sp, #20
 800489e:	9a04      	ldr	r2, [sp, #16]
 80048a0:	68a1      	ldr	r1, [r4, #8]
 80048a2:	9301      	str	r3, [sp, #4]
 80048a4:	4620      	mov	r0, r4
 80048a6:	f000 faff 	bl	8004ea8 <_vfiprintf_r>
 80048aa:	b002      	add	sp, #8
 80048ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048b0:	b004      	add	sp, #16
 80048b2:	4770      	bx	lr
 80048b4:	2000000c 	.word	0x2000000c

080048b8 <siprintf>:
 80048b8:	b40e      	push	{r1, r2, r3}
 80048ba:	b500      	push	{lr}
 80048bc:	b09c      	sub	sp, #112	; 0x70
 80048be:	ab1d      	add	r3, sp, #116	; 0x74
 80048c0:	9002      	str	r0, [sp, #8]
 80048c2:	9006      	str	r0, [sp, #24]
 80048c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048c8:	4809      	ldr	r0, [pc, #36]	; (80048f0 <siprintf+0x38>)
 80048ca:	9107      	str	r1, [sp, #28]
 80048cc:	9104      	str	r1, [sp, #16]
 80048ce:	4909      	ldr	r1, [pc, #36]	; (80048f4 <siprintf+0x3c>)
 80048d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80048d4:	9105      	str	r1, [sp, #20]
 80048d6:	6800      	ldr	r0, [r0, #0]
 80048d8:	9301      	str	r3, [sp, #4]
 80048da:	a902      	add	r1, sp, #8
 80048dc:	f000 f9ba 	bl	8004c54 <_svfiprintf_r>
 80048e0:	9b02      	ldr	r3, [sp, #8]
 80048e2:	2200      	movs	r2, #0
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	b01c      	add	sp, #112	; 0x70
 80048e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048ec:	b003      	add	sp, #12
 80048ee:	4770      	bx	lr
 80048f0:	2000000c 	.word	0x2000000c
 80048f4:	ffff0208 	.word	0xffff0208

080048f8 <std>:
 80048f8:	2300      	movs	r3, #0
 80048fa:	b510      	push	{r4, lr}
 80048fc:	4604      	mov	r4, r0
 80048fe:	e9c0 3300 	strd	r3, r3, [r0]
 8004902:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004906:	6083      	str	r3, [r0, #8]
 8004908:	8181      	strh	r1, [r0, #12]
 800490a:	6643      	str	r3, [r0, #100]	; 0x64
 800490c:	81c2      	strh	r2, [r0, #14]
 800490e:	6183      	str	r3, [r0, #24]
 8004910:	4619      	mov	r1, r3
 8004912:	2208      	movs	r2, #8
 8004914:	305c      	adds	r0, #92	; 0x5c
 8004916:	f7ff ffaf 	bl	8004878 <memset>
 800491a:	4b05      	ldr	r3, [pc, #20]	; (8004930 <std+0x38>)
 800491c:	6263      	str	r3, [r4, #36]	; 0x24
 800491e:	4b05      	ldr	r3, [pc, #20]	; (8004934 <std+0x3c>)
 8004920:	62a3      	str	r3, [r4, #40]	; 0x28
 8004922:	4b05      	ldr	r3, [pc, #20]	; (8004938 <std+0x40>)
 8004924:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004926:	4b05      	ldr	r3, [pc, #20]	; (800493c <std+0x44>)
 8004928:	6224      	str	r4, [r4, #32]
 800492a:	6323      	str	r3, [r4, #48]	; 0x30
 800492c:	bd10      	pop	{r4, pc}
 800492e:	bf00      	nop
 8004930:	08005451 	.word	0x08005451
 8004934:	08005473 	.word	0x08005473
 8004938:	080054ab 	.word	0x080054ab
 800493c:	080054cf 	.word	0x080054cf

08004940 <_cleanup_r>:
 8004940:	4901      	ldr	r1, [pc, #4]	; (8004948 <_cleanup_r+0x8>)
 8004942:	f000 b8af 	b.w	8004aa4 <_fwalk_reent>
 8004946:	bf00      	nop
 8004948:	080057a9 	.word	0x080057a9

0800494c <__sfmoreglue>:
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	1e4a      	subs	r2, r1, #1
 8004950:	2568      	movs	r5, #104	; 0x68
 8004952:	4355      	muls	r5, r2
 8004954:	460e      	mov	r6, r1
 8004956:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800495a:	f000 f8c5 	bl	8004ae8 <_malloc_r>
 800495e:	4604      	mov	r4, r0
 8004960:	b140      	cbz	r0, 8004974 <__sfmoreglue+0x28>
 8004962:	2100      	movs	r1, #0
 8004964:	e9c0 1600 	strd	r1, r6, [r0]
 8004968:	300c      	adds	r0, #12
 800496a:	60a0      	str	r0, [r4, #8]
 800496c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004970:	f7ff ff82 	bl	8004878 <memset>
 8004974:	4620      	mov	r0, r4
 8004976:	bd70      	pop	{r4, r5, r6, pc}

08004978 <__sfp_lock_acquire>:
 8004978:	4801      	ldr	r0, [pc, #4]	; (8004980 <__sfp_lock_acquire+0x8>)
 800497a:	f000 b8b3 	b.w	8004ae4 <__retarget_lock_acquire_recursive>
 800497e:	bf00      	nop
 8004980:	20000438 	.word	0x20000438

08004984 <__sfp_lock_release>:
 8004984:	4801      	ldr	r0, [pc, #4]	; (800498c <__sfp_lock_release+0x8>)
 8004986:	f000 b8ae 	b.w	8004ae6 <__retarget_lock_release_recursive>
 800498a:	bf00      	nop
 800498c:	20000438 	.word	0x20000438

08004990 <__sinit_lock_acquire>:
 8004990:	4801      	ldr	r0, [pc, #4]	; (8004998 <__sinit_lock_acquire+0x8>)
 8004992:	f000 b8a7 	b.w	8004ae4 <__retarget_lock_acquire_recursive>
 8004996:	bf00      	nop
 8004998:	20000433 	.word	0x20000433

0800499c <__sinit_lock_release>:
 800499c:	4801      	ldr	r0, [pc, #4]	; (80049a4 <__sinit_lock_release+0x8>)
 800499e:	f000 b8a2 	b.w	8004ae6 <__retarget_lock_release_recursive>
 80049a2:	bf00      	nop
 80049a4:	20000433 	.word	0x20000433

080049a8 <__sinit>:
 80049a8:	b510      	push	{r4, lr}
 80049aa:	4604      	mov	r4, r0
 80049ac:	f7ff fff0 	bl	8004990 <__sinit_lock_acquire>
 80049b0:	69a3      	ldr	r3, [r4, #24]
 80049b2:	b11b      	cbz	r3, 80049bc <__sinit+0x14>
 80049b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049b8:	f7ff bff0 	b.w	800499c <__sinit_lock_release>
 80049bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049c0:	6523      	str	r3, [r4, #80]	; 0x50
 80049c2:	4b13      	ldr	r3, [pc, #76]	; (8004a10 <__sinit+0x68>)
 80049c4:	4a13      	ldr	r2, [pc, #76]	; (8004a14 <__sinit+0x6c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80049ca:	42a3      	cmp	r3, r4
 80049cc:	bf04      	itt	eq
 80049ce:	2301      	moveq	r3, #1
 80049d0:	61a3      	streq	r3, [r4, #24]
 80049d2:	4620      	mov	r0, r4
 80049d4:	f000 f820 	bl	8004a18 <__sfp>
 80049d8:	6060      	str	r0, [r4, #4]
 80049da:	4620      	mov	r0, r4
 80049dc:	f000 f81c 	bl	8004a18 <__sfp>
 80049e0:	60a0      	str	r0, [r4, #8]
 80049e2:	4620      	mov	r0, r4
 80049e4:	f000 f818 	bl	8004a18 <__sfp>
 80049e8:	2200      	movs	r2, #0
 80049ea:	60e0      	str	r0, [r4, #12]
 80049ec:	2104      	movs	r1, #4
 80049ee:	6860      	ldr	r0, [r4, #4]
 80049f0:	f7ff ff82 	bl	80048f8 <std>
 80049f4:	68a0      	ldr	r0, [r4, #8]
 80049f6:	2201      	movs	r2, #1
 80049f8:	2109      	movs	r1, #9
 80049fa:	f7ff ff7d 	bl	80048f8 <std>
 80049fe:	68e0      	ldr	r0, [r4, #12]
 8004a00:	2202      	movs	r2, #2
 8004a02:	2112      	movs	r1, #18
 8004a04:	f7ff ff78 	bl	80048f8 <std>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	61a3      	str	r3, [r4, #24]
 8004a0c:	e7d2      	b.n	80049b4 <__sinit+0xc>
 8004a0e:	bf00      	nop
 8004a10:	08005b3c 	.word	0x08005b3c
 8004a14:	08004941 	.word	0x08004941

08004a18 <__sfp>:
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	4607      	mov	r7, r0
 8004a1c:	f7ff ffac 	bl	8004978 <__sfp_lock_acquire>
 8004a20:	4b1e      	ldr	r3, [pc, #120]	; (8004a9c <__sfp+0x84>)
 8004a22:	681e      	ldr	r6, [r3, #0]
 8004a24:	69b3      	ldr	r3, [r6, #24]
 8004a26:	b913      	cbnz	r3, 8004a2e <__sfp+0x16>
 8004a28:	4630      	mov	r0, r6
 8004a2a:	f7ff ffbd 	bl	80049a8 <__sinit>
 8004a2e:	3648      	adds	r6, #72	; 0x48
 8004a30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a34:	3b01      	subs	r3, #1
 8004a36:	d503      	bpl.n	8004a40 <__sfp+0x28>
 8004a38:	6833      	ldr	r3, [r6, #0]
 8004a3a:	b30b      	cbz	r3, 8004a80 <__sfp+0x68>
 8004a3c:	6836      	ldr	r6, [r6, #0]
 8004a3e:	e7f7      	b.n	8004a30 <__sfp+0x18>
 8004a40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a44:	b9d5      	cbnz	r5, 8004a7c <__sfp+0x64>
 8004a46:	4b16      	ldr	r3, [pc, #88]	; (8004aa0 <__sfp+0x88>)
 8004a48:	60e3      	str	r3, [r4, #12]
 8004a4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a4e:	6665      	str	r5, [r4, #100]	; 0x64
 8004a50:	f000 f847 	bl	8004ae2 <__retarget_lock_init_recursive>
 8004a54:	f7ff ff96 	bl	8004984 <__sfp_lock_release>
 8004a58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a60:	6025      	str	r5, [r4, #0]
 8004a62:	61a5      	str	r5, [r4, #24]
 8004a64:	2208      	movs	r2, #8
 8004a66:	4629      	mov	r1, r5
 8004a68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a6c:	f7ff ff04 	bl	8004878 <memset>
 8004a70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a78:	4620      	mov	r0, r4
 8004a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a7c:	3468      	adds	r4, #104	; 0x68
 8004a7e:	e7d9      	b.n	8004a34 <__sfp+0x1c>
 8004a80:	2104      	movs	r1, #4
 8004a82:	4638      	mov	r0, r7
 8004a84:	f7ff ff62 	bl	800494c <__sfmoreglue>
 8004a88:	4604      	mov	r4, r0
 8004a8a:	6030      	str	r0, [r6, #0]
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	d1d5      	bne.n	8004a3c <__sfp+0x24>
 8004a90:	f7ff ff78 	bl	8004984 <__sfp_lock_release>
 8004a94:	230c      	movs	r3, #12
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	e7ee      	b.n	8004a78 <__sfp+0x60>
 8004a9a:	bf00      	nop
 8004a9c:	08005b3c 	.word	0x08005b3c
 8004aa0:	ffff0001 	.word	0xffff0001

08004aa4 <_fwalk_reent>:
 8004aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aa8:	4606      	mov	r6, r0
 8004aaa:	4688      	mov	r8, r1
 8004aac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ab0:	2700      	movs	r7, #0
 8004ab2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ab6:	f1b9 0901 	subs.w	r9, r9, #1
 8004aba:	d505      	bpl.n	8004ac8 <_fwalk_reent+0x24>
 8004abc:	6824      	ldr	r4, [r4, #0]
 8004abe:	2c00      	cmp	r4, #0
 8004ac0:	d1f7      	bne.n	8004ab2 <_fwalk_reent+0xe>
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ac8:	89ab      	ldrh	r3, [r5, #12]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d907      	bls.n	8004ade <_fwalk_reent+0x3a>
 8004ace:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	d003      	beq.n	8004ade <_fwalk_reent+0x3a>
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	4630      	mov	r0, r6
 8004ada:	47c0      	blx	r8
 8004adc:	4307      	orrs	r7, r0
 8004ade:	3568      	adds	r5, #104	; 0x68
 8004ae0:	e7e9      	b.n	8004ab6 <_fwalk_reent+0x12>

08004ae2 <__retarget_lock_init_recursive>:
 8004ae2:	4770      	bx	lr

08004ae4 <__retarget_lock_acquire_recursive>:
 8004ae4:	4770      	bx	lr

08004ae6 <__retarget_lock_release_recursive>:
 8004ae6:	4770      	bx	lr

08004ae8 <_malloc_r>:
 8004ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aea:	1ccd      	adds	r5, r1, #3
 8004aec:	f025 0503 	bic.w	r5, r5, #3
 8004af0:	3508      	adds	r5, #8
 8004af2:	2d0c      	cmp	r5, #12
 8004af4:	bf38      	it	cc
 8004af6:	250c      	movcc	r5, #12
 8004af8:	2d00      	cmp	r5, #0
 8004afa:	4606      	mov	r6, r0
 8004afc:	db01      	blt.n	8004b02 <_malloc_r+0x1a>
 8004afe:	42a9      	cmp	r1, r5
 8004b00:	d903      	bls.n	8004b0a <_malloc_r+0x22>
 8004b02:	230c      	movs	r3, #12
 8004b04:	6033      	str	r3, [r6, #0]
 8004b06:	2000      	movs	r0, #0
 8004b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b0a:	f000 ff27 	bl	800595c <__malloc_lock>
 8004b0e:	4921      	ldr	r1, [pc, #132]	; (8004b94 <_malloc_r+0xac>)
 8004b10:	680a      	ldr	r2, [r1, #0]
 8004b12:	4614      	mov	r4, r2
 8004b14:	b99c      	cbnz	r4, 8004b3e <_malloc_r+0x56>
 8004b16:	4f20      	ldr	r7, [pc, #128]	; (8004b98 <_malloc_r+0xb0>)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	b923      	cbnz	r3, 8004b26 <_malloc_r+0x3e>
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	4630      	mov	r0, r6
 8004b20:	f000 fc86 	bl	8005430 <_sbrk_r>
 8004b24:	6038      	str	r0, [r7, #0]
 8004b26:	4629      	mov	r1, r5
 8004b28:	4630      	mov	r0, r6
 8004b2a:	f000 fc81 	bl	8005430 <_sbrk_r>
 8004b2e:	1c43      	adds	r3, r0, #1
 8004b30:	d123      	bne.n	8004b7a <_malloc_r+0x92>
 8004b32:	230c      	movs	r3, #12
 8004b34:	6033      	str	r3, [r6, #0]
 8004b36:	4630      	mov	r0, r6
 8004b38:	f000 ff16 	bl	8005968 <__malloc_unlock>
 8004b3c:	e7e3      	b.n	8004b06 <_malloc_r+0x1e>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	1b5b      	subs	r3, r3, r5
 8004b42:	d417      	bmi.n	8004b74 <_malloc_r+0x8c>
 8004b44:	2b0b      	cmp	r3, #11
 8004b46:	d903      	bls.n	8004b50 <_malloc_r+0x68>
 8004b48:	6023      	str	r3, [r4, #0]
 8004b4a:	441c      	add	r4, r3
 8004b4c:	6025      	str	r5, [r4, #0]
 8004b4e:	e004      	b.n	8004b5a <_malloc_r+0x72>
 8004b50:	6863      	ldr	r3, [r4, #4]
 8004b52:	42a2      	cmp	r2, r4
 8004b54:	bf0c      	ite	eq
 8004b56:	600b      	streq	r3, [r1, #0]
 8004b58:	6053      	strne	r3, [r2, #4]
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	f000 ff04 	bl	8005968 <__malloc_unlock>
 8004b60:	f104 000b 	add.w	r0, r4, #11
 8004b64:	1d23      	adds	r3, r4, #4
 8004b66:	f020 0007 	bic.w	r0, r0, #7
 8004b6a:	1ac2      	subs	r2, r0, r3
 8004b6c:	d0cc      	beq.n	8004b08 <_malloc_r+0x20>
 8004b6e:	1a1b      	subs	r3, r3, r0
 8004b70:	50a3      	str	r3, [r4, r2]
 8004b72:	e7c9      	b.n	8004b08 <_malloc_r+0x20>
 8004b74:	4622      	mov	r2, r4
 8004b76:	6864      	ldr	r4, [r4, #4]
 8004b78:	e7cc      	b.n	8004b14 <_malloc_r+0x2c>
 8004b7a:	1cc4      	adds	r4, r0, #3
 8004b7c:	f024 0403 	bic.w	r4, r4, #3
 8004b80:	42a0      	cmp	r0, r4
 8004b82:	d0e3      	beq.n	8004b4c <_malloc_r+0x64>
 8004b84:	1a21      	subs	r1, r4, r0
 8004b86:	4630      	mov	r0, r6
 8004b88:	f000 fc52 	bl	8005430 <_sbrk_r>
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d1dd      	bne.n	8004b4c <_malloc_r+0x64>
 8004b90:	e7cf      	b.n	8004b32 <_malloc_r+0x4a>
 8004b92:	bf00      	nop
 8004b94:	2000009c 	.word	0x2000009c
 8004b98:	200000a0 	.word	0x200000a0

08004b9c <__ssputs_r>:
 8004b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba0:	688e      	ldr	r6, [r1, #8]
 8004ba2:	429e      	cmp	r6, r3
 8004ba4:	4682      	mov	sl, r0
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	4690      	mov	r8, r2
 8004baa:	461f      	mov	r7, r3
 8004bac:	d838      	bhi.n	8004c20 <__ssputs_r+0x84>
 8004bae:	898a      	ldrh	r2, [r1, #12]
 8004bb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bb4:	d032      	beq.n	8004c1c <__ssputs_r+0x80>
 8004bb6:	6825      	ldr	r5, [r4, #0]
 8004bb8:	6909      	ldr	r1, [r1, #16]
 8004bba:	eba5 0901 	sub.w	r9, r5, r1
 8004bbe:	6965      	ldr	r5, [r4, #20]
 8004bc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bc8:	3301      	adds	r3, #1
 8004bca:	444b      	add	r3, r9
 8004bcc:	106d      	asrs	r5, r5, #1
 8004bce:	429d      	cmp	r5, r3
 8004bd0:	bf38      	it	cc
 8004bd2:	461d      	movcc	r5, r3
 8004bd4:	0553      	lsls	r3, r2, #21
 8004bd6:	d531      	bpl.n	8004c3c <__ssputs_r+0xa0>
 8004bd8:	4629      	mov	r1, r5
 8004bda:	f7ff ff85 	bl	8004ae8 <_malloc_r>
 8004bde:	4606      	mov	r6, r0
 8004be0:	b950      	cbnz	r0, 8004bf8 <__ssputs_r+0x5c>
 8004be2:	230c      	movs	r3, #12
 8004be4:	f8ca 3000 	str.w	r3, [sl]
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bee:	81a3      	strh	r3, [r4, #12]
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf8:	6921      	ldr	r1, [r4, #16]
 8004bfa:	464a      	mov	r2, r9
 8004bfc:	f000 fe86 	bl	800590c <memcpy>
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c0a:	81a3      	strh	r3, [r4, #12]
 8004c0c:	6126      	str	r6, [r4, #16]
 8004c0e:	6165      	str	r5, [r4, #20]
 8004c10:	444e      	add	r6, r9
 8004c12:	eba5 0509 	sub.w	r5, r5, r9
 8004c16:	6026      	str	r6, [r4, #0]
 8004c18:	60a5      	str	r5, [r4, #8]
 8004c1a:	463e      	mov	r6, r7
 8004c1c:	42be      	cmp	r6, r7
 8004c1e:	d900      	bls.n	8004c22 <__ssputs_r+0x86>
 8004c20:	463e      	mov	r6, r7
 8004c22:	4632      	mov	r2, r6
 8004c24:	6820      	ldr	r0, [r4, #0]
 8004c26:	4641      	mov	r1, r8
 8004c28:	f000 fe7e 	bl	8005928 <memmove>
 8004c2c:	68a3      	ldr	r3, [r4, #8]
 8004c2e:	6822      	ldr	r2, [r4, #0]
 8004c30:	1b9b      	subs	r3, r3, r6
 8004c32:	4432      	add	r2, r6
 8004c34:	60a3      	str	r3, [r4, #8]
 8004c36:	6022      	str	r2, [r4, #0]
 8004c38:	2000      	movs	r0, #0
 8004c3a:	e7db      	b.n	8004bf4 <__ssputs_r+0x58>
 8004c3c:	462a      	mov	r2, r5
 8004c3e:	f000 fee9 	bl	8005a14 <_realloc_r>
 8004c42:	4606      	mov	r6, r0
 8004c44:	2800      	cmp	r0, #0
 8004c46:	d1e1      	bne.n	8004c0c <__ssputs_r+0x70>
 8004c48:	6921      	ldr	r1, [r4, #16]
 8004c4a:	4650      	mov	r0, sl
 8004c4c:	f000 fe92 	bl	8005974 <_free_r>
 8004c50:	e7c7      	b.n	8004be2 <__ssputs_r+0x46>
	...

08004c54 <_svfiprintf_r>:
 8004c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c58:	4698      	mov	r8, r3
 8004c5a:	898b      	ldrh	r3, [r1, #12]
 8004c5c:	061b      	lsls	r3, r3, #24
 8004c5e:	b09d      	sub	sp, #116	; 0x74
 8004c60:	4607      	mov	r7, r0
 8004c62:	460d      	mov	r5, r1
 8004c64:	4614      	mov	r4, r2
 8004c66:	d50e      	bpl.n	8004c86 <_svfiprintf_r+0x32>
 8004c68:	690b      	ldr	r3, [r1, #16]
 8004c6a:	b963      	cbnz	r3, 8004c86 <_svfiprintf_r+0x32>
 8004c6c:	2140      	movs	r1, #64	; 0x40
 8004c6e:	f7ff ff3b 	bl	8004ae8 <_malloc_r>
 8004c72:	6028      	str	r0, [r5, #0]
 8004c74:	6128      	str	r0, [r5, #16]
 8004c76:	b920      	cbnz	r0, 8004c82 <_svfiprintf_r+0x2e>
 8004c78:	230c      	movs	r3, #12
 8004c7a:	603b      	str	r3, [r7, #0]
 8004c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c80:	e0d1      	b.n	8004e26 <_svfiprintf_r+0x1d2>
 8004c82:	2340      	movs	r3, #64	; 0x40
 8004c84:	616b      	str	r3, [r5, #20]
 8004c86:	2300      	movs	r3, #0
 8004c88:	9309      	str	r3, [sp, #36]	; 0x24
 8004c8a:	2320      	movs	r3, #32
 8004c8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c90:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c94:	2330      	movs	r3, #48	; 0x30
 8004c96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004e40 <_svfiprintf_r+0x1ec>
 8004c9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c9e:	f04f 0901 	mov.w	r9, #1
 8004ca2:	4623      	mov	r3, r4
 8004ca4:	469a      	mov	sl, r3
 8004ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004caa:	b10a      	cbz	r2, 8004cb0 <_svfiprintf_r+0x5c>
 8004cac:	2a25      	cmp	r2, #37	; 0x25
 8004cae:	d1f9      	bne.n	8004ca4 <_svfiprintf_r+0x50>
 8004cb0:	ebba 0b04 	subs.w	fp, sl, r4
 8004cb4:	d00b      	beq.n	8004cce <_svfiprintf_r+0x7a>
 8004cb6:	465b      	mov	r3, fp
 8004cb8:	4622      	mov	r2, r4
 8004cba:	4629      	mov	r1, r5
 8004cbc:	4638      	mov	r0, r7
 8004cbe:	f7ff ff6d 	bl	8004b9c <__ssputs_r>
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	f000 80aa 	beq.w	8004e1c <_svfiprintf_r+0x1c8>
 8004cc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cca:	445a      	add	r2, fp
 8004ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8004cce:	f89a 3000 	ldrb.w	r3, [sl]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 80a2 	beq.w	8004e1c <_svfiprintf_r+0x1c8>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ce2:	f10a 0a01 	add.w	sl, sl, #1
 8004ce6:	9304      	str	r3, [sp, #16]
 8004ce8:	9307      	str	r3, [sp, #28]
 8004cea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cee:	931a      	str	r3, [sp, #104]	; 0x68
 8004cf0:	4654      	mov	r4, sl
 8004cf2:	2205      	movs	r2, #5
 8004cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cf8:	4851      	ldr	r0, [pc, #324]	; (8004e40 <_svfiprintf_r+0x1ec>)
 8004cfa:	f7fb fa79 	bl	80001f0 <memchr>
 8004cfe:	9a04      	ldr	r2, [sp, #16]
 8004d00:	b9d8      	cbnz	r0, 8004d3a <_svfiprintf_r+0xe6>
 8004d02:	06d0      	lsls	r0, r2, #27
 8004d04:	bf44      	itt	mi
 8004d06:	2320      	movmi	r3, #32
 8004d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d0c:	0711      	lsls	r1, r2, #28
 8004d0e:	bf44      	itt	mi
 8004d10:	232b      	movmi	r3, #43	; 0x2b
 8004d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d16:	f89a 3000 	ldrb.w	r3, [sl]
 8004d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d1c:	d015      	beq.n	8004d4a <_svfiprintf_r+0xf6>
 8004d1e:	9a07      	ldr	r2, [sp, #28]
 8004d20:	4654      	mov	r4, sl
 8004d22:	2000      	movs	r0, #0
 8004d24:	f04f 0c0a 	mov.w	ip, #10
 8004d28:	4621      	mov	r1, r4
 8004d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d2e:	3b30      	subs	r3, #48	; 0x30
 8004d30:	2b09      	cmp	r3, #9
 8004d32:	d94e      	bls.n	8004dd2 <_svfiprintf_r+0x17e>
 8004d34:	b1b0      	cbz	r0, 8004d64 <_svfiprintf_r+0x110>
 8004d36:	9207      	str	r2, [sp, #28]
 8004d38:	e014      	b.n	8004d64 <_svfiprintf_r+0x110>
 8004d3a:	eba0 0308 	sub.w	r3, r0, r8
 8004d3e:	fa09 f303 	lsl.w	r3, r9, r3
 8004d42:	4313      	orrs	r3, r2
 8004d44:	9304      	str	r3, [sp, #16]
 8004d46:	46a2      	mov	sl, r4
 8004d48:	e7d2      	b.n	8004cf0 <_svfiprintf_r+0x9c>
 8004d4a:	9b03      	ldr	r3, [sp, #12]
 8004d4c:	1d19      	adds	r1, r3, #4
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	9103      	str	r1, [sp, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bfbb      	ittet	lt
 8004d56:	425b      	neglt	r3, r3
 8004d58:	f042 0202 	orrlt.w	r2, r2, #2
 8004d5c:	9307      	strge	r3, [sp, #28]
 8004d5e:	9307      	strlt	r3, [sp, #28]
 8004d60:	bfb8      	it	lt
 8004d62:	9204      	strlt	r2, [sp, #16]
 8004d64:	7823      	ldrb	r3, [r4, #0]
 8004d66:	2b2e      	cmp	r3, #46	; 0x2e
 8004d68:	d10c      	bne.n	8004d84 <_svfiprintf_r+0x130>
 8004d6a:	7863      	ldrb	r3, [r4, #1]
 8004d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d6e:	d135      	bne.n	8004ddc <_svfiprintf_r+0x188>
 8004d70:	9b03      	ldr	r3, [sp, #12]
 8004d72:	1d1a      	adds	r2, r3, #4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	9203      	str	r2, [sp, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bfb8      	it	lt
 8004d7c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004d80:	3402      	adds	r4, #2
 8004d82:	9305      	str	r3, [sp, #20]
 8004d84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e50 <_svfiprintf_r+0x1fc>
 8004d88:	7821      	ldrb	r1, [r4, #0]
 8004d8a:	2203      	movs	r2, #3
 8004d8c:	4650      	mov	r0, sl
 8004d8e:	f7fb fa2f 	bl	80001f0 <memchr>
 8004d92:	b140      	cbz	r0, 8004da6 <_svfiprintf_r+0x152>
 8004d94:	2340      	movs	r3, #64	; 0x40
 8004d96:	eba0 000a 	sub.w	r0, r0, sl
 8004d9a:	fa03 f000 	lsl.w	r0, r3, r0
 8004d9e:	9b04      	ldr	r3, [sp, #16]
 8004da0:	4303      	orrs	r3, r0
 8004da2:	3401      	adds	r4, #1
 8004da4:	9304      	str	r3, [sp, #16]
 8004da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004daa:	4826      	ldr	r0, [pc, #152]	; (8004e44 <_svfiprintf_r+0x1f0>)
 8004dac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004db0:	2206      	movs	r2, #6
 8004db2:	f7fb fa1d 	bl	80001f0 <memchr>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d038      	beq.n	8004e2c <_svfiprintf_r+0x1d8>
 8004dba:	4b23      	ldr	r3, [pc, #140]	; (8004e48 <_svfiprintf_r+0x1f4>)
 8004dbc:	bb1b      	cbnz	r3, 8004e06 <_svfiprintf_r+0x1b2>
 8004dbe:	9b03      	ldr	r3, [sp, #12]
 8004dc0:	3307      	adds	r3, #7
 8004dc2:	f023 0307 	bic.w	r3, r3, #7
 8004dc6:	3308      	adds	r3, #8
 8004dc8:	9303      	str	r3, [sp, #12]
 8004dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dcc:	4433      	add	r3, r6
 8004dce:	9309      	str	r3, [sp, #36]	; 0x24
 8004dd0:	e767      	b.n	8004ca2 <_svfiprintf_r+0x4e>
 8004dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	2001      	movs	r0, #1
 8004dda:	e7a5      	b.n	8004d28 <_svfiprintf_r+0xd4>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	3401      	adds	r4, #1
 8004de0:	9305      	str	r3, [sp, #20]
 8004de2:	4619      	mov	r1, r3
 8004de4:	f04f 0c0a 	mov.w	ip, #10
 8004de8:	4620      	mov	r0, r4
 8004dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dee:	3a30      	subs	r2, #48	; 0x30
 8004df0:	2a09      	cmp	r2, #9
 8004df2:	d903      	bls.n	8004dfc <_svfiprintf_r+0x1a8>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0c5      	beq.n	8004d84 <_svfiprintf_r+0x130>
 8004df8:	9105      	str	r1, [sp, #20]
 8004dfa:	e7c3      	b.n	8004d84 <_svfiprintf_r+0x130>
 8004dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e00:	4604      	mov	r4, r0
 8004e02:	2301      	movs	r3, #1
 8004e04:	e7f0      	b.n	8004de8 <_svfiprintf_r+0x194>
 8004e06:	ab03      	add	r3, sp, #12
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	462a      	mov	r2, r5
 8004e0c:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <_svfiprintf_r+0x1f8>)
 8004e0e:	a904      	add	r1, sp, #16
 8004e10:	4638      	mov	r0, r7
 8004e12:	f3af 8000 	nop.w
 8004e16:	1c42      	adds	r2, r0, #1
 8004e18:	4606      	mov	r6, r0
 8004e1a:	d1d6      	bne.n	8004dca <_svfiprintf_r+0x176>
 8004e1c:	89ab      	ldrh	r3, [r5, #12]
 8004e1e:	065b      	lsls	r3, r3, #25
 8004e20:	f53f af2c 	bmi.w	8004c7c <_svfiprintf_r+0x28>
 8004e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e26:	b01d      	add	sp, #116	; 0x74
 8004e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e2c:	ab03      	add	r3, sp, #12
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	462a      	mov	r2, r5
 8004e32:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <_svfiprintf_r+0x1f8>)
 8004e34:	a904      	add	r1, sp, #16
 8004e36:	4638      	mov	r0, r7
 8004e38:	f000 f9d4 	bl	80051e4 <_printf_i>
 8004e3c:	e7eb      	b.n	8004e16 <_svfiprintf_r+0x1c2>
 8004e3e:	bf00      	nop
 8004e40:	08005ba0 	.word	0x08005ba0
 8004e44:	08005baa 	.word	0x08005baa
 8004e48:	00000000 	.word	0x00000000
 8004e4c:	08004b9d 	.word	0x08004b9d
 8004e50:	08005ba6 	.word	0x08005ba6

08004e54 <__sfputc_r>:
 8004e54:	6893      	ldr	r3, [r2, #8]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	b410      	push	{r4}
 8004e5c:	6093      	str	r3, [r2, #8]
 8004e5e:	da08      	bge.n	8004e72 <__sfputc_r+0x1e>
 8004e60:	6994      	ldr	r4, [r2, #24]
 8004e62:	42a3      	cmp	r3, r4
 8004e64:	db01      	blt.n	8004e6a <__sfputc_r+0x16>
 8004e66:	290a      	cmp	r1, #10
 8004e68:	d103      	bne.n	8004e72 <__sfputc_r+0x1e>
 8004e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e6e:	f000 bb33 	b.w	80054d8 <__swbuf_r>
 8004e72:	6813      	ldr	r3, [r2, #0]
 8004e74:	1c58      	adds	r0, r3, #1
 8004e76:	6010      	str	r0, [r2, #0]
 8004e78:	7019      	strb	r1, [r3, #0]
 8004e7a:	4608      	mov	r0, r1
 8004e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <__sfputs_r>:
 8004e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e84:	4606      	mov	r6, r0
 8004e86:	460f      	mov	r7, r1
 8004e88:	4614      	mov	r4, r2
 8004e8a:	18d5      	adds	r5, r2, r3
 8004e8c:	42ac      	cmp	r4, r5
 8004e8e:	d101      	bne.n	8004e94 <__sfputs_r+0x12>
 8004e90:	2000      	movs	r0, #0
 8004e92:	e007      	b.n	8004ea4 <__sfputs_r+0x22>
 8004e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e98:	463a      	mov	r2, r7
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f7ff ffda 	bl	8004e54 <__sfputc_r>
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	d1f3      	bne.n	8004e8c <__sfputs_r+0xa>
 8004ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ea8 <_vfiprintf_r>:
 8004ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eac:	460d      	mov	r5, r1
 8004eae:	b09d      	sub	sp, #116	; 0x74
 8004eb0:	4614      	mov	r4, r2
 8004eb2:	4698      	mov	r8, r3
 8004eb4:	4606      	mov	r6, r0
 8004eb6:	b118      	cbz	r0, 8004ec0 <_vfiprintf_r+0x18>
 8004eb8:	6983      	ldr	r3, [r0, #24]
 8004eba:	b90b      	cbnz	r3, 8004ec0 <_vfiprintf_r+0x18>
 8004ebc:	f7ff fd74 	bl	80049a8 <__sinit>
 8004ec0:	4b89      	ldr	r3, [pc, #548]	; (80050e8 <_vfiprintf_r+0x240>)
 8004ec2:	429d      	cmp	r5, r3
 8004ec4:	d11b      	bne.n	8004efe <_vfiprintf_r+0x56>
 8004ec6:	6875      	ldr	r5, [r6, #4]
 8004ec8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004eca:	07d9      	lsls	r1, r3, #31
 8004ecc:	d405      	bmi.n	8004eda <_vfiprintf_r+0x32>
 8004ece:	89ab      	ldrh	r3, [r5, #12]
 8004ed0:	059a      	lsls	r2, r3, #22
 8004ed2:	d402      	bmi.n	8004eda <_vfiprintf_r+0x32>
 8004ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ed6:	f7ff fe05 	bl	8004ae4 <__retarget_lock_acquire_recursive>
 8004eda:	89ab      	ldrh	r3, [r5, #12]
 8004edc:	071b      	lsls	r3, r3, #28
 8004ede:	d501      	bpl.n	8004ee4 <_vfiprintf_r+0x3c>
 8004ee0:	692b      	ldr	r3, [r5, #16]
 8004ee2:	b9eb      	cbnz	r3, 8004f20 <_vfiprintf_r+0x78>
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	f000 fb5a 	bl	80055a0 <__swsetup_r>
 8004eec:	b1c0      	cbz	r0, 8004f20 <_vfiprintf_r+0x78>
 8004eee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ef0:	07dc      	lsls	r4, r3, #31
 8004ef2:	d50e      	bpl.n	8004f12 <_vfiprintf_r+0x6a>
 8004ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ef8:	b01d      	add	sp, #116	; 0x74
 8004efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004efe:	4b7b      	ldr	r3, [pc, #492]	; (80050ec <_vfiprintf_r+0x244>)
 8004f00:	429d      	cmp	r5, r3
 8004f02:	d101      	bne.n	8004f08 <_vfiprintf_r+0x60>
 8004f04:	68b5      	ldr	r5, [r6, #8]
 8004f06:	e7df      	b.n	8004ec8 <_vfiprintf_r+0x20>
 8004f08:	4b79      	ldr	r3, [pc, #484]	; (80050f0 <_vfiprintf_r+0x248>)
 8004f0a:	429d      	cmp	r5, r3
 8004f0c:	bf08      	it	eq
 8004f0e:	68f5      	ldreq	r5, [r6, #12]
 8004f10:	e7da      	b.n	8004ec8 <_vfiprintf_r+0x20>
 8004f12:	89ab      	ldrh	r3, [r5, #12]
 8004f14:	0598      	lsls	r0, r3, #22
 8004f16:	d4ed      	bmi.n	8004ef4 <_vfiprintf_r+0x4c>
 8004f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f1a:	f7ff fde4 	bl	8004ae6 <__retarget_lock_release_recursive>
 8004f1e:	e7e9      	b.n	8004ef4 <_vfiprintf_r+0x4c>
 8004f20:	2300      	movs	r3, #0
 8004f22:	9309      	str	r3, [sp, #36]	; 0x24
 8004f24:	2320      	movs	r3, #32
 8004f26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f2e:	2330      	movs	r3, #48	; 0x30
 8004f30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80050f4 <_vfiprintf_r+0x24c>
 8004f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f38:	f04f 0901 	mov.w	r9, #1
 8004f3c:	4623      	mov	r3, r4
 8004f3e:	469a      	mov	sl, r3
 8004f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f44:	b10a      	cbz	r2, 8004f4a <_vfiprintf_r+0xa2>
 8004f46:	2a25      	cmp	r2, #37	; 0x25
 8004f48:	d1f9      	bne.n	8004f3e <_vfiprintf_r+0x96>
 8004f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8004f4e:	d00b      	beq.n	8004f68 <_vfiprintf_r+0xc0>
 8004f50:	465b      	mov	r3, fp
 8004f52:	4622      	mov	r2, r4
 8004f54:	4629      	mov	r1, r5
 8004f56:	4630      	mov	r0, r6
 8004f58:	f7ff ff93 	bl	8004e82 <__sfputs_r>
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	f000 80aa 	beq.w	80050b6 <_vfiprintf_r+0x20e>
 8004f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f64:	445a      	add	r2, fp
 8004f66:	9209      	str	r2, [sp, #36]	; 0x24
 8004f68:	f89a 3000 	ldrb.w	r3, [sl]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 80a2 	beq.w	80050b6 <_vfiprintf_r+0x20e>
 8004f72:	2300      	movs	r3, #0
 8004f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f7c:	f10a 0a01 	add.w	sl, sl, #1
 8004f80:	9304      	str	r3, [sp, #16]
 8004f82:	9307      	str	r3, [sp, #28]
 8004f84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f88:	931a      	str	r3, [sp, #104]	; 0x68
 8004f8a:	4654      	mov	r4, sl
 8004f8c:	2205      	movs	r2, #5
 8004f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f92:	4858      	ldr	r0, [pc, #352]	; (80050f4 <_vfiprintf_r+0x24c>)
 8004f94:	f7fb f92c 	bl	80001f0 <memchr>
 8004f98:	9a04      	ldr	r2, [sp, #16]
 8004f9a:	b9d8      	cbnz	r0, 8004fd4 <_vfiprintf_r+0x12c>
 8004f9c:	06d1      	lsls	r1, r2, #27
 8004f9e:	bf44      	itt	mi
 8004fa0:	2320      	movmi	r3, #32
 8004fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fa6:	0713      	lsls	r3, r2, #28
 8004fa8:	bf44      	itt	mi
 8004faa:	232b      	movmi	r3, #43	; 0x2b
 8004fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8004fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8004fb6:	d015      	beq.n	8004fe4 <_vfiprintf_r+0x13c>
 8004fb8:	9a07      	ldr	r2, [sp, #28]
 8004fba:	4654      	mov	r4, sl
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	f04f 0c0a 	mov.w	ip, #10
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fc8:	3b30      	subs	r3, #48	; 0x30
 8004fca:	2b09      	cmp	r3, #9
 8004fcc:	d94e      	bls.n	800506c <_vfiprintf_r+0x1c4>
 8004fce:	b1b0      	cbz	r0, 8004ffe <_vfiprintf_r+0x156>
 8004fd0:	9207      	str	r2, [sp, #28]
 8004fd2:	e014      	b.n	8004ffe <_vfiprintf_r+0x156>
 8004fd4:	eba0 0308 	sub.w	r3, r0, r8
 8004fd8:	fa09 f303 	lsl.w	r3, r9, r3
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	9304      	str	r3, [sp, #16]
 8004fe0:	46a2      	mov	sl, r4
 8004fe2:	e7d2      	b.n	8004f8a <_vfiprintf_r+0xe2>
 8004fe4:	9b03      	ldr	r3, [sp, #12]
 8004fe6:	1d19      	adds	r1, r3, #4
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	9103      	str	r1, [sp, #12]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	bfbb      	ittet	lt
 8004ff0:	425b      	neglt	r3, r3
 8004ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8004ff6:	9307      	strge	r3, [sp, #28]
 8004ff8:	9307      	strlt	r3, [sp, #28]
 8004ffa:	bfb8      	it	lt
 8004ffc:	9204      	strlt	r2, [sp, #16]
 8004ffe:	7823      	ldrb	r3, [r4, #0]
 8005000:	2b2e      	cmp	r3, #46	; 0x2e
 8005002:	d10c      	bne.n	800501e <_vfiprintf_r+0x176>
 8005004:	7863      	ldrb	r3, [r4, #1]
 8005006:	2b2a      	cmp	r3, #42	; 0x2a
 8005008:	d135      	bne.n	8005076 <_vfiprintf_r+0x1ce>
 800500a:	9b03      	ldr	r3, [sp, #12]
 800500c:	1d1a      	adds	r2, r3, #4
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	9203      	str	r2, [sp, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	bfb8      	it	lt
 8005016:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800501a:	3402      	adds	r4, #2
 800501c:	9305      	str	r3, [sp, #20]
 800501e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005104 <_vfiprintf_r+0x25c>
 8005022:	7821      	ldrb	r1, [r4, #0]
 8005024:	2203      	movs	r2, #3
 8005026:	4650      	mov	r0, sl
 8005028:	f7fb f8e2 	bl	80001f0 <memchr>
 800502c:	b140      	cbz	r0, 8005040 <_vfiprintf_r+0x198>
 800502e:	2340      	movs	r3, #64	; 0x40
 8005030:	eba0 000a 	sub.w	r0, r0, sl
 8005034:	fa03 f000 	lsl.w	r0, r3, r0
 8005038:	9b04      	ldr	r3, [sp, #16]
 800503a:	4303      	orrs	r3, r0
 800503c:	3401      	adds	r4, #1
 800503e:	9304      	str	r3, [sp, #16]
 8005040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005044:	482c      	ldr	r0, [pc, #176]	; (80050f8 <_vfiprintf_r+0x250>)
 8005046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800504a:	2206      	movs	r2, #6
 800504c:	f7fb f8d0 	bl	80001f0 <memchr>
 8005050:	2800      	cmp	r0, #0
 8005052:	d03f      	beq.n	80050d4 <_vfiprintf_r+0x22c>
 8005054:	4b29      	ldr	r3, [pc, #164]	; (80050fc <_vfiprintf_r+0x254>)
 8005056:	bb1b      	cbnz	r3, 80050a0 <_vfiprintf_r+0x1f8>
 8005058:	9b03      	ldr	r3, [sp, #12]
 800505a:	3307      	adds	r3, #7
 800505c:	f023 0307 	bic.w	r3, r3, #7
 8005060:	3308      	adds	r3, #8
 8005062:	9303      	str	r3, [sp, #12]
 8005064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005066:	443b      	add	r3, r7
 8005068:	9309      	str	r3, [sp, #36]	; 0x24
 800506a:	e767      	b.n	8004f3c <_vfiprintf_r+0x94>
 800506c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005070:	460c      	mov	r4, r1
 8005072:	2001      	movs	r0, #1
 8005074:	e7a5      	b.n	8004fc2 <_vfiprintf_r+0x11a>
 8005076:	2300      	movs	r3, #0
 8005078:	3401      	adds	r4, #1
 800507a:	9305      	str	r3, [sp, #20]
 800507c:	4619      	mov	r1, r3
 800507e:	f04f 0c0a 	mov.w	ip, #10
 8005082:	4620      	mov	r0, r4
 8005084:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005088:	3a30      	subs	r2, #48	; 0x30
 800508a:	2a09      	cmp	r2, #9
 800508c:	d903      	bls.n	8005096 <_vfiprintf_r+0x1ee>
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0c5      	beq.n	800501e <_vfiprintf_r+0x176>
 8005092:	9105      	str	r1, [sp, #20]
 8005094:	e7c3      	b.n	800501e <_vfiprintf_r+0x176>
 8005096:	fb0c 2101 	mla	r1, ip, r1, r2
 800509a:	4604      	mov	r4, r0
 800509c:	2301      	movs	r3, #1
 800509e:	e7f0      	b.n	8005082 <_vfiprintf_r+0x1da>
 80050a0:	ab03      	add	r3, sp, #12
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	462a      	mov	r2, r5
 80050a6:	4b16      	ldr	r3, [pc, #88]	; (8005100 <_vfiprintf_r+0x258>)
 80050a8:	a904      	add	r1, sp, #16
 80050aa:	4630      	mov	r0, r6
 80050ac:	f3af 8000 	nop.w
 80050b0:	4607      	mov	r7, r0
 80050b2:	1c78      	adds	r0, r7, #1
 80050b4:	d1d6      	bne.n	8005064 <_vfiprintf_r+0x1bc>
 80050b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050b8:	07d9      	lsls	r1, r3, #31
 80050ba:	d405      	bmi.n	80050c8 <_vfiprintf_r+0x220>
 80050bc:	89ab      	ldrh	r3, [r5, #12]
 80050be:	059a      	lsls	r2, r3, #22
 80050c0:	d402      	bmi.n	80050c8 <_vfiprintf_r+0x220>
 80050c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050c4:	f7ff fd0f 	bl	8004ae6 <__retarget_lock_release_recursive>
 80050c8:	89ab      	ldrh	r3, [r5, #12]
 80050ca:	065b      	lsls	r3, r3, #25
 80050cc:	f53f af12 	bmi.w	8004ef4 <_vfiprintf_r+0x4c>
 80050d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050d2:	e711      	b.n	8004ef8 <_vfiprintf_r+0x50>
 80050d4:	ab03      	add	r3, sp, #12
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	462a      	mov	r2, r5
 80050da:	4b09      	ldr	r3, [pc, #36]	; (8005100 <_vfiprintf_r+0x258>)
 80050dc:	a904      	add	r1, sp, #16
 80050de:	4630      	mov	r0, r6
 80050e0:	f000 f880 	bl	80051e4 <_printf_i>
 80050e4:	e7e4      	b.n	80050b0 <_vfiprintf_r+0x208>
 80050e6:	bf00      	nop
 80050e8:	08005b60 	.word	0x08005b60
 80050ec:	08005b80 	.word	0x08005b80
 80050f0:	08005b40 	.word	0x08005b40
 80050f4:	08005ba0 	.word	0x08005ba0
 80050f8:	08005baa 	.word	0x08005baa
 80050fc:	00000000 	.word	0x00000000
 8005100:	08004e83 	.word	0x08004e83
 8005104:	08005ba6 	.word	0x08005ba6

08005108 <_printf_common>:
 8005108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800510c:	4616      	mov	r6, r2
 800510e:	4699      	mov	r9, r3
 8005110:	688a      	ldr	r2, [r1, #8]
 8005112:	690b      	ldr	r3, [r1, #16]
 8005114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005118:	4293      	cmp	r3, r2
 800511a:	bfb8      	it	lt
 800511c:	4613      	movlt	r3, r2
 800511e:	6033      	str	r3, [r6, #0]
 8005120:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005124:	4607      	mov	r7, r0
 8005126:	460c      	mov	r4, r1
 8005128:	b10a      	cbz	r2, 800512e <_printf_common+0x26>
 800512a:	3301      	adds	r3, #1
 800512c:	6033      	str	r3, [r6, #0]
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	0699      	lsls	r1, r3, #26
 8005132:	bf42      	ittt	mi
 8005134:	6833      	ldrmi	r3, [r6, #0]
 8005136:	3302      	addmi	r3, #2
 8005138:	6033      	strmi	r3, [r6, #0]
 800513a:	6825      	ldr	r5, [r4, #0]
 800513c:	f015 0506 	ands.w	r5, r5, #6
 8005140:	d106      	bne.n	8005150 <_printf_common+0x48>
 8005142:	f104 0a19 	add.w	sl, r4, #25
 8005146:	68e3      	ldr	r3, [r4, #12]
 8005148:	6832      	ldr	r2, [r6, #0]
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	42ab      	cmp	r3, r5
 800514e:	dc26      	bgt.n	800519e <_printf_common+0x96>
 8005150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005154:	1e13      	subs	r3, r2, #0
 8005156:	6822      	ldr	r2, [r4, #0]
 8005158:	bf18      	it	ne
 800515a:	2301      	movne	r3, #1
 800515c:	0692      	lsls	r2, r2, #26
 800515e:	d42b      	bmi.n	80051b8 <_printf_common+0xb0>
 8005160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005164:	4649      	mov	r1, r9
 8005166:	4638      	mov	r0, r7
 8005168:	47c0      	blx	r8
 800516a:	3001      	adds	r0, #1
 800516c:	d01e      	beq.n	80051ac <_printf_common+0xa4>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	68e5      	ldr	r5, [r4, #12]
 8005172:	6832      	ldr	r2, [r6, #0]
 8005174:	f003 0306 	and.w	r3, r3, #6
 8005178:	2b04      	cmp	r3, #4
 800517a:	bf08      	it	eq
 800517c:	1aad      	subeq	r5, r5, r2
 800517e:	68a3      	ldr	r3, [r4, #8]
 8005180:	6922      	ldr	r2, [r4, #16]
 8005182:	bf0c      	ite	eq
 8005184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005188:	2500      	movne	r5, #0
 800518a:	4293      	cmp	r3, r2
 800518c:	bfc4      	itt	gt
 800518e:	1a9b      	subgt	r3, r3, r2
 8005190:	18ed      	addgt	r5, r5, r3
 8005192:	2600      	movs	r6, #0
 8005194:	341a      	adds	r4, #26
 8005196:	42b5      	cmp	r5, r6
 8005198:	d11a      	bne.n	80051d0 <_printf_common+0xc8>
 800519a:	2000      	movs	r0, #0
 800519c:	e008      	b.n	80051b0 <_printf_common+0xa8>
 800519e:	2301      	movs	r3, #1
 80051a0:	4652      	mov	r2, sl
 80051a2:	4649      	mov	r1, r9
 80051a4:	4638      	mov	r0, r7
 80051a6:	47c0      	blx	r8
 80051a8:	3001      	adds	r0, #1
 80051aa:	d103      	bne.n	80051b4 <_printf_common+0xac>
 80051ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b4:	3501      	adds	r5, #1
 80051b6:	e7c6      	b.n	8005146 <_printf_common+0x3e>
 80051b8:	18e1      	adds	r1, r4, r3
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	2030      	movs	r0, #48	; 0x30
 80051be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051c2:	4422      	add	r2, r4
 80051c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051cc:	3302      	adds	r3, #2
 80051ce:	e7c7      	b.n	8005160 <_printf_common+0x58>
 80051d0:	2301      	movs	r3, #1
 80051d2:	4622      	mov	r2, r4
 80051d4:	4649      	mov	r1, r9
 80051d6:	4638      	mov	r0, r7
 80051d8:	47c0      	blx	r8
 80051da:	3001      	adds	r0, #1
 80051dc:	d0e6      	beq.n	80051ac <_printf_common+0xa4>
 80051de:	3601      	adds	r6, #1
 80051e0:	e7d9      	b.n	8005196 <_printf_common+0x8e>
	...

080051e4 <_printf_i>:
 80051e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051e8:	460c      	mov	r4, r1
 80051ea:	4691      	mov	r9, r2
 80051ec:	7e27      	ldrb	r7, [r4, #24]
 80051ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051f0:	2f78      	cmp	r7, #120	; 0x78
 80051f2:	4680      	mov	r8, r0
 80051f4:	469a      	mov	sl, r3
 80051f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051fa:	d807      	bhi.n	800520c <_printf_i+0x28>
 80051fc:	2f62      	cmp	r7, #98	; 0x62
 80051fe:	d80a      	bhi.n	8005216 <_printf_i+0x32>
 8005200:	2f00      	cmp	r7, #0
 8005202:	f000 80d8 	beq.w	80053b6 <_printf_i+0x1d2>
 8005206:	2f58      	cmp	r7, #88	; 0x58
 8005208:	f000 80a3 	beq.w	8005352 <_printf_i+0x16e>
 800520c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005214:	e03a      	b.n	800528c <_printf_i+0xa8>
 8005216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800521a:	2b15      	cmp	r3, #21
 800521c:	d8f6      	bhi.n	800520c <_printf_i+0x28>
 800521e:	a001      	add	r0, pc, #4	; (adr r0, 8005224 <_printf_i+0x40>)
 8005220:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005224:	0800527d 	.word	0x0800527d
 8005228:	08005291 	.word	0x08005291
 800522c:	0800520d 	.word	0x0800520d
 8005230:	0800520d 	.word	0x0800520d
 8005234:	0800520d 	.word	0x0800520d
 8005238:	0800520d 	.word	0x0800520d
 800523c:	08005291 	.word	0x08005291
 8005240:	0800520d 	.word	0x0800520d
 8005244:	0800520d 	.word	0x0800520d
 8005248:	0800520d 	.word	0x0800520d
 800524c:	0800520d 	.word	0x0800520d
 8005250:	0800539d 	.word	0x0800539d
 8005254:	080052c1 	.word	0x080052c1
 8005258:	0800537f 	.word	0x0800537f
 800525c:	0800520d 	.word	0x0800520d
 8005260:	0800520d 	.word	0x0800520d
 8005264:	080053bf 	.word	0x080053bf
 8005268:	0800520d 	.word	0x0800520d
 800526c:	080052c1 	.word	0x080052c1
 8005270:	0800520d 	.word	0x0800520d
 8005274:	0800520d 	.word	0x0800520d
 8005278:	08005387 	.word	0x08005387
 800527c:	680b      	ldr	r3, [r1, #0]
 800527e:	1d1a      	adds	r2, r3, #4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	600a      	str	r2, [r1, #0]
 8005284:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800528c:	2301      	movs	r3, #1
 800528e:	e0a3      	b.n	80053d8 <_printf_i+0x1f4>
 8005290:	6825      	ldr	r5, [r4, #0]
 8005292:	6808      	ldr	r0, [r1, #0]
 8005294:	062e      	lsls	r6, r5, #24
 8005296:	f100 0304 	add.w	r3, r0, #4
 800529a:	d50a      	bpl.n	80052b2 <_printf_i+0xce>
 800529c:	6805      	ldr	r5, [r0, #0]
 800529e:	600b      	str	r3, [r1, #0]
 80052a0:	2d00      	cmp	r5, #0
 80052a2:	da03      	bge.n	80052ac <_printf_i+0xc8>
 80052a4:	232d      	movs	r3, #45	; 0x2d
 80052a6:	426d      	negs	r5, r5
 80052a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052ac:	485e      	ldr	r0, [pc, #376]	; (8005428 <_printf_i+0x244>)
 80052ae:	230a      	movs	r3, #10
 80052b0:	e019      	b.n	80052e6 <_printf_i+0x102>
 80052b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80052b6:	6805      	ldr	r5, [r0, #0]
 80052b8:	600b      	str	r3, [r1, #0]
 80052ba:	bf18      	it	ne
 80052bc:	b22d      	sxthne	r5, r5
 80052be:	e7ef      	b.n	80052a0 <_printf_i+0xbc>
 80052c0:	680b      	ldr	r3, [r1, #0]
 80052c2:	6825      	ldr	r5, [r4, #0]
 80052c4:	1d18      	adds	r0, r3, #4
 80052c6:	6008      	str	r0, [r1, #0]
 80052c8:	0628      	lsls	r0, r5, #24
 80052ca:	d501      	bpl.n	80052d0 <_printf_i+0xec>
 80052cc:	681d      	ldr	r5, [r3, #0]
 80052ce:	e002      	b.n	80052d6 <_printf_i+0xf2>
 80052d0:	0669      	lsls	r1, r5, #25
 80052d2:	d5fb      	bpl.n	80052cc <_printf_i+0xe8>
 80052d4:	881d      	ldrh	r5, [r3, #0]
 80052d6:	4854      	ldr	r0, [pc, #336]	; (8005428 <_printf_i+0x244>)
 80052d8:	2f6f      	cmp	r7, #111	; 0x6f
 80052da:	bf0c      	ite	eq
 80052dc:	2308      	moveq	r3, #8
 80052de:	230a      	movne	r3, #10
 80052e0:	2100      	movs	r1, #0
 80052e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052e6:	6866      	ldr	r6, [r4, #4]
 80052e8:	60a6      	str	r6, [r4, #8]
 80052ea:	2e00      	cmp	r6, #0
 80052ec:	bfa2      	ittt	ge
 80052ee:	6821      	ldrge	r1, [r4, #0]
 80052f0:	f021 0104 	bicge.w	r1, r1, #4
 80052f4:	6021      	strge	r1, [r4, #0]
 80052f6:	b90d      	cbnz	r5, 80052fc <_printf_i+0x118>
 80052f8:	2e00      	cmp	r6, #0
 80052fa:	d04d      	beq.n	8005398 <_printf_i+0x1b4>
 80052fc:	4616      	mov	r6, r2
 80052fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8005302:	fb03 5711 	mls	r7, r3, r1, r5
 8005306:	5dc7      	ldrb	r7, [r0, r7]
 8005308:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800530c:	462f      	mov	r7, r5
 800530e:	42bb      	cmp	r3, r7
 8005310:	460d      	mov	r5, r1
 8005312:	d9f4      	bls.n	80052fe <_printf_i+0x11a>
 8005314:	2b08      	cmp	r3, #8
 8005316:	d10b      	bne.n	8005330 <_printf_i+0x14c>
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	07df      	lsls	r7, r3, #31
 800531c:	d508      	bpl.n	8005330 <_printf_i+0x14c>
 800531e:	6923      	ldr	r3, [r4, #16]
 8005320:	6861      	ldr	r1, [r4, #4]
 8005322:	4299      	cmp	r1, r3
 8005324:	bfde      	ittt	le
 8005326:	2330      	movle	r3, #48	; 0x30
 8005328:	f806 3c01 	strble.w	r3, [r6, #-1]
 800532c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005330:	1b92      	subs	r2, r2, r6
 8005332:	6122      	str	r2, [r4, #16]
 8005334:	f8cd a000 	str.w	sl, [sp]
 8005338:	464b      	mov	r3, r9
 800533a:	aa03      	add	r2, sp, #12
 800533c:	4621      	mov	r1, r4
 800533e:	4640      	mov	r0, r8
 8005340:	f7ff fee2 	bl	8005108 <_printf_common>
 8005344:	3001      	adds	r0, #1
 8005346:	d14c      	bne.n	80053e2 <_printf_i+0x1fe>
 8005348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800534c:	b004      	add	sp, #16
 800534e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005352:	4835      	ldr	r0, [pc, #212]	; (8005428 <_printf_i+0x244>)
 8005354:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	680e      	ldr	r6, [r1, #0]
 800535c:	061f      	lsls	r7, r3, #24
 800535e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005362:	600e      	str	r6, [r1, #0]
 8005364:	d514      	bpl.n	8005390 <_printf_i+0x1ac>
 8005366:	07d9      	lsls	r1, r3, #31
 8005368:	bf44      	itt	mi
 800536a:	f043 0320 	orrmi.w	r3, r3, #32
 800536e:	6023      	strmi	r3, [r4, #0]
 8005370:	b91d      	cbnz	r5, 800537a <_printf_i+0x196>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	f023 0320 	bic.w	r3, r3, #32
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	2310      	movs	r3, #16
 800537c:	e7b0      	b.n	80052e0 <_printf_i+0xfc>
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	f043 0320 	orr.w	r3, r3, #32
 8005384:	6023      	str	r3, [r4, #0]
 8005386:	2378      	movs	r3, #120	; 0x78
 8005388:	4828      	ldr	r0, [pc, #160]	; (800542c <_printf_i+0x248>)
 800538a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800538e:	e7e3      	b.n	8005358 <_printf_i+0x174>
 8005390:	065e      	lsls	r6, r3, #25
 8005392:	bf48      	it	mi
 8005394:	b2ad      	uxthmi	r5, r5
 8005396:	e7e6      	b.n	8005366 <_printf_i+0x182>
 8005398:	4616      	mov	r6, r2
 800539a:	e7bb      	b.n	8005314 <_printf_i+0x130>
 800539c:	680b      	ldr	r3, [r1, #0]
 800539e:	6826      	ldr	r6, [r4, #0]
 80053a0:	6960      	ldr	r0, [r4, #20]
 80053a2:	1d1d      	adds	r5, r3, #4
 80053a4:	600d      	str	r5, [r1, #0]
 80053a6:	0635      	lsls	r5, r6, #24
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	d501      	bpl.n	80053b0 <_printf_i+0x1cc>
 80053ac:	6018      	str	r0, [r3, #0]
 80053ae:	e002      	b.n	80053b6 <_printf_i+0x1d2>
 80053b0:	0671      	lsls	r1, r6, #25
 80053b2:	d5fb      	bpl.n	80053ac <_printf_i+0x1c8>
 80053b4:	8018      	strh	r0, [r3, #0]
 80053b6:	2300      	movs	r3, #0
 80053b8:	6123      	str	r3, [r4, #16]
 80053ba:	4616      	mov	r6, r2
 80053bc:	e7ba      	b.n	8005334 <_printf_i+0x150>
 80053be:	680b      	ldr	r3, [r1, #0]
 80053c0:	1d1a      	adds	r2, r3, #4
 80053c2:	600a      	str	r2, [r1, #0]
 80053c4:	681e      	ldr	r6, [r3, #0]
 80053c6:	6862      	ldr	r2, [r4, #4]
 80053c8:	2100      	movs	r1, #0
 80053ca:	4630      	mov	r0, r6
 80053cc:	f7fa ff10 	bl	80001f0 <memchr>
 80053d0:	b108      	cbz	r0, 80053d6 <_printf_i+0x1f2>
 80053d2:	1b80      	subs	r0, r0, r6
 80053d4:	6060      	str	r0, [r4, #4]
 80053d6:	6863      	ldr	r3, [r4, #4]
 80053d8:	6123      	str	r3, [r4, #16]
 80053da:	2300      	movs	r3, #0
 80053dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053e0:	e7a8      	b.n	8005334 <_printf_i+0x150>
 80053e2:	6923      	ldr	r3, [r4, #16]
 80053e4:	4632      	mov	r2, r6
 80053e6:	4649      	mov	r1, r9
 80053e8:	4640      	mov	r0, r8
 80053ea:	47d0      	blx	sl
 80053ec:	3001      	adds	r0, #1
 80053ee:	d0ab      	beq.n	8005348 <_printf_i+0x164>
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	079b      	lsls	r3, r3, #30
 80053f4:	d413      	bmi.n	800541e <_printf_i+0x23a>
 80053f6:	68e0      	ldr	r0, [r4, #12]
 80053f8:	9b03      	ldr	r3, [sp, #12]
 80053fa:	4298      	cmp	r0, r3
 80053fc:	bfb8      	it	lt
 80053fe:	4618      	movlt	r0, r3
 8005400:	e7a4      	b.n	800534c <_printf_i+0x168>
 8005402:	2301      	movs	r3, #1
 8005404:	4632      	mov	r2, r6
 8005406:	4649      	mov	r1, r9
 8005408:	4640      	mov	r0, r8
 800540a:	47d0      	blx	sl
 800540c:	3001      	adds	r0, #1
 800540e:	d09b      	beq.n	8005348 <_printf_i+0x164>
 8005410:	3501      	adds	r5, #1
 8005412:	68e3      	ldr	r3, [r4, #12]
 8005414:	9903      	ldr	r1, [sp, #12]
 8005416:	1a5b      	subs	r3, r3, r1
 8005418:	42ab      	cmp	r3, r5
 800541a:	dcf2      	bgt.n	8005402 <_printf_i+0x21e>
 800541c:	e7eb      	b.n	80053f6 <_printf_i+0x212>
 800541e:	2500      	movs	r5, #0
 8005420:	f104 0619 	add.w	r6, r4, #25
 8005424:	e7f5      	b.n	8005412 <_printf_i+0x22e>
 8005426:	bf00      	nop
 8005428:	08005bb1 	.word	0x08005bb1
 800542c:	08005bc2 	.word	0x08005bc2

08005430 <_sbrk_r>:
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	4d06      	ldr	r5, [pc, #24]	; (800544c <_sbrk_r+0x1c>)
 8005434:	2300      	movs	r3, #0
 8005436:	4604      	mov	r4, r0
 8005438:	4608      	mov	r0, r1
 800543a:	602b      	str	r3, [r5, #0]
 800543c:	f7fb fe32 	bl	80010a4 <_sbrk>
 8005440:	1c43      	adds	r3, r0, #1
 8005442:	d102      	bne.n	800544a <_sbrk_r+0x1a>
 8005444:	682b      	ldr	r3, [r5, #0]
 8005446:	b103      	cbz	r3, 800544a <_sbrk_r+0x1a>
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	bd38      	pop	{r3, r4, r5, pc}
 800544c:	2000043c 	.word	0x2000043c

08005450 <__sread>:
 8005450:	b510      	push	{r4, lr}
 8005452:	460c      	mov	r4, r1
 8005454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005458:	f000 fb02 	bl	8005a60 <_read_r>
 800545c:	2800      	cmp	r0, #0
 800545e:	bfab      	itete	ge
 8005460:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005462:	89a3      	ldrhlt	r3, [r4, #12]
 8005464:	181b      	addge	r3, r3, r0
 8005466:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800546a:	bfac      	ite	ge
 800546c:	6563      	strge	r3, [r4, #84]	; 0x54
 800546e:	81a3      	strhlt	r3, [r4, #12]
 8005470:	bd10      	pop	{r4, pc}

08005472 <__swrite>:
 8005472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005476:	461f      	mov	r7, r3
 8005478:	898b      	ldrh	r3, [r1, #12]
 800547a:	05db      	lsls	r3, r3, #23
 800547c:	4605      	mov	r5, r0
 800547e:	460c      	mov	r4, r1
 8005480:	4616      	mov	r6, r2
 8005482:	d505      	bpl.n	8005490 <__swrite+0x1e>
 8005484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005488:	2302      	movs	r3, #2
 800548a:	2200      	movs	r2, #0
 800548c:	f000 f9c8 	bl	8005820 <_lseek_r>
 8005490:	89a3      	ldrh	r3, [r4, #12]
 8005492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800549a:	81a3      	strh	r3, [r4, #12]
 800549c:	4632      	mov	r2, r6
 800549e:	463b      	mov	r3, r7
 80054a0:	4628      	mov	r0, r5
 80054a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054a6:	f000 b869 	b.w	800557c <_write_r>

080054aa <__sseek>:
 80054aa:	b510      	push	{r4, lr}
 80054ac:	460c      	mov	r4, r1
 80054ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b2:	f000 f9b5 	bl	8005820 <_lseek_r>
 80054b6:	1c43      	adds	r3, r0, #1
 80054b8:	89a3      	ldrh	r3, [r4, #12]
 80054ba:	bf15      	itete	ne
 80054bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80054be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054c6:	81a3      	strheq	r3, [r4, #12]
 80054c8:	bf18      	it	ne
 80054ca:	81a3      	strhne	r3, [r4, #12]
 80054cc:	bd10      	pop	{r4, pc}

080054ce <__sclose>:
 80054ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d2:	f000 b8d3 	b.w	800567c <_close_r>
	...

080054d8 <__swbuf_r>:
 80054d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054da:	460e      	mov	r6, r1
 80054dc:	4614      	mov	r4, r2
 80054de:	4605      	mov	r5, r0
 80054e0:	b118      	cbz	r0, 80054ea <__swbuf_r+0x12>
 80054e2:	6983      	ldr	r3, [r0, #24]
 80054e4:	b90b      	cbnz	r3, 80054ea <__swbuf_r+0x12>
 80054e6:	f7ff fa5f 	bl	80049a8 <__sinit>
 80054ea:	4b21      	ldr	r3, [pc, #132]	; (8005570 <__swbuf_r+0x98>)
 80054ec:	429c      	cmp	r4, r3
 80054ee:	d12b      	bne.n	8005548 <__swbuf_r+0x70>
 80054f0:	686c      	ldr	r4, [r5, #4]
 80054f2:	69a3      	ldr	r3, [r4, #24]
 80054f4:	60a3      	str	r3, [r4, #8]
 80054f6:	89a3      	ldrh	r3, [r4, #12]
 80054f8:	071a      	lsls	r2, r3, #28
 80054fa:	d52f      	bpl.n	800555c <__swbuf_r+0x84>
 80054fc:	6923      	ldr	r3, [r4, #16]
 80054fe:	b36b      	cbz	r3, 800555c <__swbuf_r+0x84>
 8005500:	6923      	ldr	r3, [r4, #16]
 8005502:	6820      	ldr	r0, [r4, #0]
 8005504:	1ac0      	subs	r0, r0, r3
 8005506:	6963      	ldr	r3, [r4, #20]
 8005508:	b2f6      	uxtb	r6, r6
 800550a:	4283      	cmp	r3, r0
 800550c:	4637      	mov	r7, r6
 800550e:	dc04      	bgt.n	800551a <__swbuf_r+0x42>
 8005510:	4621      	mov	r1, r4
 8005512:	4628      	mov	r0, r5
 8005514:	f000 f948 	bl	80057a8 <_fflush_r>
 8005518:	bb30      	cbnz	r0, 8005568 <__swbuf_r+0x90>
 800551a:	68a3      	ldr	r3, [r4, #8]
 800551c:	3b01      	subs	r3, #1
 800551e:	60a3      	str	r3, [r4, #8]
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	6022      	str	r2, [r4, #0]
 8005526:	701e      	strb	r6, [r3, #0]
 8005528:	6963      	ldr	r3, [r4, #20]
 800552a:	3001      	adds	r0, #1
 800552c:	4283      	cmp	r3, r0
 800552e:	d004      	beq.n	800553a <__swbuf_r+0x62>
 8005530:	89a3      	ldrh	r3, [r4, #12]
 8005532:	07db      	lsls	r3, r3, #31
 8005534:	d506      	bpl.n	8005544 <__swbuf_r+0x6c>
 8005536:	2e0a      	cmp	r6, #10
 8005538:	d104      	bne.n	8005544 <__swbuf_r+0x6c>
 800553a:	4621      	mov	r1, r4
 800553c:	4628      	mov	r0, r5
 800553e:	f000 f933 	bl	80057a8 <_fflush_r>
 8005542:	b988      	cbnz	r0, 8005568 <__swbuf_r+0x90>
 8005544:	4638      	mov	r0, r7
 8005546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005548:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <__swbuf_r+0x9c>)
 800554a:	429c      	cmp	r4, r3
 800554c:	d101      	bne.n	8005552 <__swbuf_r+0x7a>
 800554e:	68ac      	ldr	r4, [r5, #8]
 8005550:	e7cf      	b.n	80054f2 <__swbuf_r+0x1a>
 8005552:	4b09      	ldr	r3, [pc, #36]	; (8005578 <__swbuf_r+0xa0>)
 8005554:	429c      	cmp	r4, r3
 8005556:	bf08      	it	eq
 8005558:	68ec      	ldreq	r4, [r5, #12]
 800555a:	e7ca      	b.n	80054f2 <__swbuf_r+0x1a>
 800555c:	4621      	mov	r1, r4
 800555e:	4628      	mov	r0, r5
 8005560:	f000 f81e 	bl	80055a0 <__swsetup_r>
 8005564:	2800      	cmp	r0, #0
 8005566:	d0cb      	beq.n	8005500 <__swbuf_r+0x28>
 8005568:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800556c:	e7ea      	b.n	8005544 <__swbuf_r+0x6c>
 800556e:	bf00      	nop
 8005570:	08005b60 	.word	0x08005b60
 8005574:	08005b80 	.word	0x08005b80
 8005578:	08005b40 	.word	0x08005b40

0800557c <_write_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4d07      	ldr	r5, [pc, #28]	; (800559c <_write_r+0x20>)
 8005580:	4604      	mov	r4, r0
 8005582:	4608      	mov	r0, r1
 8005584:	4611      	mov	r1, r2
 8005586:	2200      	movs	r2, #0
 8005588:	602a      	str	r2, [r5, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	f7fb fd39 	bl	8001002 <_write>
 8005590:	1c43      	adds	r3, r0, #1
 8005592:	d102      	bne.n	800559a <_write_r+0x1e>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	b103      	cbz	r3, 800559a <_write_r+0x1e>
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	bd38      	pop	{r3, r4, r5, pc}
 800559c:	2000043c 	.word	0x2000043c

080055a0 <__swsetup_r>:
 80055a0:	4b32      	ldr	r3, [pc, #200]	; (800566c <__swsetup_r+0xcc>)
 80055a2:	b570      	push	{r4, r5, r6, lr}
 80055a4:	681d      	ldr	r5, [r3, #0]
 80055a6:	4606      	mov	r6, r0
 80055a8:	460c      	mov	r4, r1
 80055aa:	b125      	cbz	r5, 80055b6 <__swsetup_r+0x16>
 80055ac:	69ab      	ldr	r3, [r5, #24]
 80055ae:	b913      	cbnz	r3, 80055b6 <__swsetup_r+0x16>
 80055b0:	4628      	mov	r0, r5
 80055b2:	f7ff f9f9 	bl	80049a8 <__sinit>
 80055b6:	4b2e      	ldr	r3, [pc, #184]	; (8005670 <__swsetup_r+0xd0>)
 80055b8:	429c      	cmp	r4, r3
 80055ba:	d10f      	bne.n	80055dc <__swsetup_r+0x3c>
 80055bc:	686c      	ldr	r4, [r5, #4]
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055c4:	0719      	lsls	r1, r3, #28
 80055c6:	d42c      	bmi.n	8005622 <__swsetup_r+0x82>
 80055c8:	06dd      	lsls	r5, r3, #27
 80055ca:	d411      	bmi.n	80055f0 <__swsetup_r+0x50>
 80055cc:	2309      	movs	r3, #9
 80055ce:	6033      	str	r3, [r6, #0]
 80055d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055da:	e03e      	b.n	800565a <__swsetup_r+0xba>
 80055dc:	4b25      	ldr	r3, [pc, #148]	; (8005674 <__swsetup_r+0xd4>)
 80055de:	429c      	cmp	r4, r3
 80055e0:	d101      	bne.n	80055e6 <__swsetup_r+0x46>
 80055e2:	68ac      	ldr	r4, [r5, #8]
 80055e4:	e7eb      	b.n	80055be <__swsetup_r+0x1e>
 80055e6:	4b24      	ldr	r3, [pc, #144]	; (8005678 <__swsetup_r+0xd8>)
 80055e8:	429c      	cmp	r4, r3
 80055ea:	bf08      	it	eq
 80055ec:	68ec      	ldreq	r4, [r5, #12]
 80055ee:	e7e6      	b.n	80055be <__swsetup_r+0x1e>
 80055f0:	0758      	lsls	r0, r3, #29
 80055f2:	d512      	bpl.n	800561a <__swsetup_r+0x7a>
 80055f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055f6:	b141      	cbz	r1, 800560a <__swsetup_r+0x6a>
 80055f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055fc:	4299      	cmp	r1, r3
 80055fe:	d002      	beq.n	8005606 <__swsetup_r+0x66>
 8005600:	4630      	mov	r0, r6
 8005602:	f000 f9b7 	bl	8005974 <_free_r>
 8005606:	2300      	movs	r3, #0
 8005608:	6363      	str	r3, [r4, #52]	; 0x34
 800560a:	89a3      	ldrh	r3, [r4, #12]
 800560c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005610:	81a3      	strh	r3, [r4, #12]
 8005612:	2300      	movs	r3, #0
 8005614:	6063      	str	r3, [r4, #4]
 8005616:	6923      	ldr	r3, [r4, #16]
 8005618:	6023      	str	r3, [r4, #0]
 800561a:	89a3      	ldrh	r3, [r4, #12]
 800561c:	f043 0308 	orr.w	r3, r3, #8
 8005620:	81a3      	strh	r3, [r4, #12]
 8005622:	6923      	ldr	r3, [r4, #16]
 8005624:	b94b      	cbnz	r3, 800563a <__swsetup_r+0x9a>
 8005626:	89a3      	ldrh	r3, [r4, #12]
 8005628:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800562c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005630:	d003      	beq.n	800563a <__swsetup_r+0x9a>
 8005632:	4621      	mov	r1, r4
 8005634:	4630      	mov	r0, r6
 8005636:	f000 f929 	bl	800588c <__smakebuf_r>
 800563a:	89a0      	ldrh	r0, [r4, #12]
 800563c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005640:	f010 0301 	ands.w	r3, r0, #1
 8005644:	d00a      	beq.n	800565c <__swsetup_r+0xbc>
 8005646:	2300      	movs	r3, #0
 8005648:	60a3      	str	r3, [r4, #8]
 800564a:	6963      	ldr	r3, [r4, #20]
 800564c:	425b      	negs	r3, r3
 800564e:	61a3      	str	r3, [r4, #24]
 8005650:	6923      	ldr	r3, [r4, #16]
 8005652:	b943      	cbnz	r3, 8005666 <__swsetup_r+0xc6>
 8005654:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005658:	d1ba      	bne.n	80055d0 <__swsetup_r+0x30>
 800565a:	bd70      	pop	{r4, r5, r6, pc}
 800565c:	0781      	lsls	r1, r0, #30
 800565e:	bf58      	it	pl
 8005660:	6963      	ldrpl	r3, [r4, #20]
 8005662:	60a3      	str	r3, [r4, #8]
 8005664:	e7f4      	b.n	8005650 <__swsetup_r+0xb0>
 8005666:	2000      	movs	r0, #0
 8005668:	e7f7      	b.n	800565a <__swsetup_r+0xba>
 800566a:	bf00      	nop
 800566c:	2000000c 	.word	0x2000000c
 8005670:	08005b60 	.word	0x08005b60
 8005674:	08005b80 	.word	0x08005b80
 8005678:	08005b40 	.word	0x08005b40

0800567c <_close_r>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	4d06      	ldr	r5, [pc, #24]	; (8005698 <_close_r+0x1c>)
 8005680:	2300      	movs	r3, #0
 8005682:	4604      	mov	r4, r0
 8005684:	4608      	mov	r0, r1
 8005686:	602b      	str	r3, [r5, #0]
 8005688:	f7fb fcd7 	bl	800103a <_close>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d102      	bne.n	8005696 <_close_r+0x1a>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	b103      	cbz	r3, 8005696 <_close_r+0x1a>
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	bd38      	pop	{r3, r4, r5, pc}
 8005698:	2000043c 	.word	0x2000043c

0800569c <__sflush_r>:
 800569c:	898a      	ldrh	r2, [r1, #12]
 800569e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056a2:	4605      	mov	r5, r0
 80056a4:	0710      	lsls	r0, r2, #28
 80056a6:	460c      	mov	r4, r1
 80056a8:	d458      	bmi.n	800575c <__sflush_r+0xc0>
 80056aa:	684b      	ldr	r3, [r1, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	dc05      	bgt.n	80056bc <__sflush_r+0x20>
 80056b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	dc02      	bgt.n	80056bc <__sflush_r+0x20>
 80056b6:	2000      	movs	r0, #0
 80056b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056be:	2e00      	cmp	r6, #0
 80056c0:	d0f9      	beq.n	80056b6 <__sflush_r+0x1a>
 80056c2:	2300      	movs	r3, #0
 80056c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80056c8:	682f      	ldr	r7, [r5, #0]
 80056ca:	602b      	str	r3, [r5, #0]
 80056cc:	d032      	beq.n	8005734 <__sflush_r+0x98>
 80056ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80056d0:	89a3      	ldrh	r3, [r4, #12]
 80056d2:	075a      	lsls	r2, r3, #29
 80056d4:	d505      	bpl.n	80056e2 <__sflush_r+0x46>
 80056d6:	6863      	ldr	r3, [r4, #4]
 80056d8:	1ac0      	subs	r0, r0, r3
 80056da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056dc:	b10b      	cbz	r3, 80056e2 <__sflush_r+0x46>
 80056de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056e0:	1ac0      	subs	r0, r0, r3
 80056e2:	2300      	movs	r3, #0
 80056e4:	4602      	mov	r2, r0
 80056e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056e8:	6a21      	ldr	r1, [r4, #32]
 80056ea:	4628      	mov	r0, r5
 80056ec:	47b0      	blx	r6
 80056ee:	1c43      	adds	r3, r0, #1
 80056f0:	89a3      	ldrh	r3, [r4, #12]
 80056f2:	d106      	bne.n	8005702 <__sflush_r+0x66>
 80056f4:	6829      	ldr	r1, [r5, #0]
 80056f6:	291d      	cmp	r1, #29
 80056f8:	d82c      	bhi.n	8005754 <__sflush_r+0xb8>
 80056fa:	4a2a      	ldr	r2, [pc, #168]	; (80057a4 <__sflush_r+0x108>)
 80056fc:	40ca      	lsrs	r2, r1
 80056fe:	07d6      	lsls	r6, r2, #31
 8005700:	d528      	bpl.n	8005754 <__sflush_r+0xb8>
 8005702:	2200      	movs	r2, #0
 8005704:	6062      	str	r2, [r4, #4]
 8005706:	04d9      	lsls	r1, r3, #19
 8005708:	6922      	ldr	r2, [r4, #16]
 800570a:	6022      	str	r2, [r4, #0]
 800570c:	d504      	bpl.n	8005718 <__sflush_r+0x7c>
 800570e:	1c42      	adds	r2, r0, #1
 8005710:	d101      	bne.n	8005716 <__sflush_r+0x7a>
 8005712:	682b      	ldr	r3, [r5, #0]
 8005714:	b903      	cbnz	r3, 8005718 <__sflush_r+0x7c>
 8005716:	6560      	str	r0, [r4, #84]	; 0x54
 8005718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800571a:	602f      	str	r7, [r5, #0]
 800571c:	2900      	cmp	r1, #0
 800571e:	d0ca      	beq.n	80056b6 <__sflush_r+0x1a>
 8005720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005724:	4299      	cmp	r1, r3
 8005726:	d002      	beq.n	800572e <__sflush_r+0x92>
 8005728:	4628      	mov	r0, r5
 800572a:	f000 f923 	bl	8005974 <_free_r>
 800572e:	2000      	movs	r0, #0
 8005730:	6360      	str	r0, [r4, #52]	; 0x34
 8005732:	e7c1      	b.n	80056b8 <__sflush_r+0x1c>
 8005734:	6a21      	ldr	r1, [r4, #32]
 8005736:	2301      	movs	r3, #1
 8005738:	4628      	mov	r0, r5
 800573a:	47b0      	blx	r6
 800573c:	1c41      	adds	r1, r0, #1
 800573e:	d1c7      	bne.n	80056d0 <__sflush_r+0x34>
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0c4      	beq.n	80056d0 <__sflush_r+0x34>
 8005746:	2b1d      	cmp	r3, #29
 8005748:	d001      	beq.n	800574e <__sflush_r+0xb2>
 800574a:	2b16      	cmp	r3, #22
 800574c:	d101      	bne.n	8005752 <__sflush_r+0xb6>
 800574e:	602f      	str	r7, [r5, #0]
 8005750:	e7b1      	b.n	80056b6 <__sflush_r+0x1a>
 8005752:	89a3      	ldrh	r3, [r4, #12]
 8005754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005758:	81a3      	strh	r3, [r4, #12]
 800575a:	e7ad      	b.n	80056b8 <__sflush_r+0x1c>
 800575c:	690f      	ldr	r7, [r1, #16]
 800575e:	2f00      	cmp	r7, #0
 8005760:	d0a9      	beq.n	80056b6 <__sflush_r+0x1a>
 8005762:	0793      	lsls	r3, r2, #30
 8005764:	680e      	ldr	r6, [r1, #0]
 8005766:	bf08      	it	eq
 8005768:	694b      	ldreq	r3, [r1, #20]
 800576a:	600f      	str	r7, [r1, #0]
 800576c:	bf18      	it	ne
 800576e:	2300      	movne	r3, #0
 8005770:	eba6 0807 	sub.w	r8, r6, r7
 8005774:	608b      	str	r3, [r1, #8]
 8005776:	f1b8 0f00 	cmp.w	r8, #0
 800577a:	dd9c      	ble.n	80056b6 <__sflush_r+0x1a>
 800577c:	6a21      	ldr	r1, [r4, #32]
 800577e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005780:	4643      	mov	r3, r8
 8005782:	463a      	mov	r2, r7
 8005784:	4628      	mov	r0, r5
 8005786:	47b0      	blx	r6
 8005788:	2800      	cmp	r0, #0
 800578a:	dc06      	bgt.n	800579a <__sflush_r+0xfe>
 800578c:	89a3      	ldrh	r3, [r4, #12]
 800578e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005792:	81a3      	strh	r3, [r4, #12]
 8005794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005798:	e78e      	b.n	80056b8 <__sflush_r+0x1c>
 800579a:	4407      	add	r7, r0
 800579c:	eba8 0800 	sub.w	r8, r8, r0
 80057a0:	e7e9      	b.n	8005776 <__sflush_r+0xda>
 80057a2:	bf00      	nop
 80057a4:	20400001 	.word	0x20400001

080057a8 <_fflush_r>:
 80057a8:	b538      	push	{r3, r4, r5, lr}
 80057aa:	690b      	ldr	r3, [r1, #16]
 80057ac:	4605      	mov	r5, r0
 80057ae:	460c      	mov	r4, r1
 80057b0:	b913      	cbnz	r3, 80057b8 <_fflush_r+0x10>
 80057b2:	2500      	movs	r5, #0
 80057b4:	4628      	mov	r0, r5
 80057b6:	bd38      	pop	{r3, r4, r5, pc}
 80057b8:	b118      	cbz	r0, 80057c2 <_fflush_r+0x1a>
 80057ba:	6983      	ldr	r3, [r0, #24]
 80057bc:	b90b      	cbnz	r3, 80057c2 <_fflush_r+0x1a>
 80057be:	f7ff f8f3 	bl	80049a8 <__sinit>
 80057c2:	4b14      	ldr	r3, [pc, #80]	; (8005814 <_fflush_r+0x6c>)
 80057c4:	429c      	cmp	r4, r3
 80057c6:	d11b      	bne.n	8005800 <_fflush_r+0x58>
 80057c8:	686c      	ldr	r4, [r5, #4]
 80057ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0ef      	beq.n	80057b2 <_fflush_r+0xa>
 80057d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80057d4:	07d0      	lsls	r0, r2, #31
 80057d6:	d404      	bmi.n	80057e2 <_fflush_r+0x3a>
 80057d8:	0599      	lsls	r1, r3, #22
 80057da:	d402      	bmi.n	80057e2 <_fflush_r+0x3a>
 80057dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057de:	f7ff f981 	bl	8004ae4 <__retarget_lock_acquire_recursive>
 80057e2:	4628      	mov	r0, r5
 80057e4:	4621      	mov	r1, r4
 80057e6:	f7ff ff59 	bl	800569c <__sflush_r>
 80057ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057ec:	07da      	lsls	r2, r3, #31
 80057ee:	4605      	mov	r5, r0
 80057f0:	d4e0      	bmi.n	80057b4 <_fflush_r+0xc>
 80057f2:	89a3      	ldrh	r3, [r4, #12]
 80057f4:	059b      	lsls	r3, r3, #22
 80057f6:	d4dd      	bmi.n	80057b4 <_fflush_r+0xc>
 80057f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057fa:	f7ff f974 	bl	8004ae6 <__retarget_lock_release_recursive>
 80057fe:	e7d9      	b.n	80057b4 <_fflush_r+0xc>
 8005800:	4b05      	ldr	r3, [pc, #20]	; (8005818 <_fflush_r+0x70>)
 8005802:	429c      	cmp	r4, r3
 8005804:	d101      	bne.n	800580a <_fflush_r+0x62>
 8005806:	68ac      	ldr	r4, [r5, #8]
 8005808:	e7df      	b.n	80057ca <_fflush_r+0x22>
 800580a:	4b04      	ldr	r3, [pc, #16]	; (800581c <_fflush_r+0x74>)
 800580c:	429c      	cmp	r4, r3
 800580e:	bf08      	it	eq
 8005810:	68ec      	ldreq	r4, [r5, #12]
 8005812:	e7da      	b.n	80057ca <_fflush_r+0x22>
 8005814:	08005b60 	.word	0x08005b60
 8005818:	08005b80 	.word	0x08005b80
 800581c:	08005b40 	.word	0x08005b40

08005820 <_lseek_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4d07      	ldr	r5, [pc, #28]	; (8005840 <_lseek_r+0x20>)
 8005824:	4604      	mov	r4, r0
 8005826:	4608      	mov	r0, r1
 8005828:	4611      	mov	r1, r2
 800582a:	2200      	movs	r2, #0
 800582c:	602a      	str	r2, [r5, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	f7fb fc2a 	bl	8001088 <_lseek>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d102      	bne.n	800583e <_lseek_r+0x1e>
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	b103      	cbz	r3, 800583e <_lseek_r+0x1e>
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	bd38      	pop	{r3, r4, r5, pc}
 8005840:	2000043c 	.word	0x2000043c

08005844 <__swhatbuf_r>:
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	460e      	mov	r6, r1
 8005848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800584c:	2900      	cmp	r1, #0
 800584e:	b096      	sub	sp, #88	; 0x58
 8005850:	4614      	mov	r4, r2
 8005852:	461d      	mov	r5, r3
 8005854:	da07      	bge.n	8005866 <__swhatbuf_r+0x22>
 8005856:	2300      	movs	r3, #0
 8005858:	602b      	str	r3, [r5, #0]
 800585a:	89b3      	ldrh	r3, [r6, #12]
 800585c:	061a      	lsls	r2, r3, #24
 800585e:	d410      	bmi.n	8005882 <__swhatbuf_r+0x3e>
 8005860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005864:	e00e      	b.n	8005884 <__swhatbuf_r+0x40>
 8005866:	466a      	mov	r2, sp
 8005868:	f000 f90c 	bl	8005a84 <_fstat_r>
 800586c:	2800      	cmp	r0, #0
 800586e:	dbf2      	blt.n	8005856 <__swhatbuf_r+0x12>
 8005870:	9a01      	ldr	r2, [sp, #4]
 8005872:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005876:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800587a:	425a      	negs	r2, r3
 800587c:	415a      	adcs	r2, r3
 800587e:	602a      	str	r2, [r5, #0]
 8005880:	e7ee      	b.n	8005860 <__swhatbuf_r+0x1c>
 8005882:	2340      	movs	r3, #64	; 0x40
 8005884:	2000      	movs	r0, #0
 8005886:	6023      	str	r3, [r4, #0]
 8005888:	b016      	add	sp, #88	; 0x58
 800588a:	bd70      	pop	{r4, r5, r6, pc}

0800588c <__smakebuf_r>:
 800588c:	898b      	ldrh	r3, [r1, #12]
 800588e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005890:	079d      	lsls	r5, r3, #30
 8005892:	4606      	mov	r6, r0
 8005894:	460c      	mov	r4, r1
 8005896:	d507      	bpl.n	80058a8 <__smakebuf_r+0x1c>
 8005898:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800589c:	6023      	str	r3, [r4, #0]
 800589e:	6123      	str	r3, [r4, #16]
 80058a0:	2301      	movs	r3, #1
 80058a2:	6163      	str	r3, [r4, #20]
 80058a4:	b002      	add	sp, #8
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
 80058a8:	ab01      	add	r3, sp, #4
 80058aa:	466a      	mov	r2, sp
 80058ac:	f7ff ffca 	bl	8005844 <__swhatbuf_r>
 80058b0:	9900      	ldr	r1, [sp, #0]
 80058b2:	4605      	mov	r5, r0
 80058b4:	4630      	mov	r0, r6
 80058b6:	f7ff f917 	bl	8004ae8 <_malloc_r>
 80058ba:	b948      	cbnz	r0, 80058d0 <__smakebuf_r+0x44>
 80058bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058c0:	059a      	lsls	r2, r3, #22
 80058c2:	d4ef      	bmi.n	80058a4 <__smakebuf_r+0x18>
 80058c4:	f023 0303 	bic.w	r3, r3, #3
 80058c8:	f043 0302 	orr.w	r3, r3, #2
 80058cc:	81a3      	strh	r3, [r4, #12]
 80058ce:	e7e3      	b.n	8005898 <__smakebuf_r+0xc>
 80058d0:	4b0d      	ldr	r3, [pc, #52]	; (8005908 <__smakebuf_r+0x7c>)
 80058d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	6020      	str	r0, [r4, #0]
 80058d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058dc:	81a3      	strh	r3, [r4, #12]
 80058de:	9b00      	ldr	r3, [sp, #0]
 80058e0:	6163      	str	r3, [r4, #20]
 80058e2:	9b01      	ldr	r3, [sp, #4]
 80058e4:	6120      	str	r0, [r4, #16]
 80058e6:	b15b      	cbz	r3, 8005900 <__smakebuf_r+0x74>
 80058e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058ec:	4630      	mov	r0, r6
 80058ee:	f000 f8db 	bl	8005aa8 <_isatty_r>
 80058f2:	b128      	cbz	r0, 8005900 <__smakebuf_r+0x74>
 80058f4:	89a3      	ldrh	r3, [r4, #12]
 80058f6:	f023 0303 	bic.w	r3, r3, #3
 80058fa:	f043 0301 	orr.w	r3, r3, #1
 80058fe:	81a3      	strh	r3, [r4, #12]
 8005900:	89a0      	ldrh	r0, [r4, #12]
 8005902:	4305      	orrs	r5, r0
 8005904:	81a5      	strh	r5, [r4, #12]
 8005906:	e7cd      	b.n	80058a4 <__smakebuf_r+0x18>
 8005908:	08004941 	.word	0x08004941

0800590c <memcpy>:
 800590c:	440a      	add	r2, r1
 800590e:	4291      	cmp	r1, r2
 8005910:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005914:	d100      	bne.n	8005918 <memcpy+0xc>
 8005916:	4770      	bx	lr
 8005918:	b510      	push	{r4, lr}
 800591a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800591e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005922:	4291      	cmp	r1, r2
 8005924:	d1f9      	bne.n	800591a <memcpy+0xe>
 8005926:	bd10      	pop	{r4, pc}

08005928 <memmove>:
 8005928:	4288      	cmp	r0, r1
 800592a:	b510      	push	{r4, lr}
 800592c:	eb01 0402 	add.w	r4, r1, r2
 8005930:	d902      	bls.n	8005938 <memmove+0x10>
 8005932:	4284      	cmp	r4, r0
 8005934:	4623      	mov	r3, r4
 8005936:	d807      	bhi.n	8005948 <memmove+0x20>
 8005938:	1e43      	subs	r3, r0, #1
 800593a:	42a1      	cmp	r1, r4
 800593c:	d008      	beq.n	8005950 <memmove+0x28>
 800593e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005942:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005946:	e7f8      	b.n	800593a <memmove+0x12>
 8005948:	4402      	add	r2, r0
 800594a:	4601      	mov	r1, r0
 800594c:	428a      	cmp	r2, r1
 800594e:	d100      	bne.n	8005952 <memmove+0x2a>
 8005950:	bd10      	pop	{r4, pc}
 8005952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005956:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800595a:	e7f7      	b.n	800594c <memmove+0x24>

0800595c <__malloc_lock>:
 800595c:	4801      	ldr	r0, [pc, #4]	; (8005964 <__malloc_lock+0x8>)
 800595e:	f7ff b8c1 	b.w	8004ae4 <__retarget_lock_acquire_recursive>
 8005962:	bf00      	nop
 8005964:	20000434 	.word	0x20000434

08005968 <__malloc_unlock>:
 8005968:	4801      	ldr	r0, [pc, #4]	; (8005970 <__malloc_unlock+0x8>)
 800596a:	f7ff b8bc 	b.w	8004ae6 <__retarget_lock_release_recursive>
 800596e:	bf00      	nop
 8005970:	20000434 	.word	0x20000434

08005974 <_free_r>:
 8005974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005976:	2900      	cmp	r1, #0
 8005978:	d048      	beq.n	8005a0c <_free_r+0x98>
 800597a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800597e:	9001      	str	r0, [sp, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	f1a1 0404 	sub.w	r4, r1, #4
 8005986:	bfb8      	it	lt
 8005988:	18e4      	addlt	r4, r4, r3
 800598a:	f7ff ffe7 	bl	800595c <__malloc_lock>
 800598e:	4a20      	ldr	r2, [pc, #128]	; (8005a10 <_free_r+0x9c>)
 8005990:	9801      	ldr	r0, [sp, #4]
 8005992:	6813      	ldr	r3, [r2, #0]
 8005994:	4615      	mov	r5, r2
 8005996:	b933      	cbnz	r3, 80059a6 <_free_r+0x32>
 8005998:	6063      	str	r3, [r4, #4]
 800599a:	6014      	str	r4, [r2, #0]
 800599c:	b003      	add	sp, #12
 800599e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059a2:	f7ff bfe1 	b.w	8005968 <__malloc_unlock>
 80059a6:	42a3      	cmp	r3, r4
 80059a8:	d90b      	bls.n	80059c2 <_free_r+0x4e>
 80059aa:	6821      	ldr	r1, [r4, #0]
 80059ac:	1862      	adds	r2, r4, r1
 80059ae:	4293      	cmp	r3, r2
 80059b0:	bf04      	itt	eq
 80059b2:	681a      	ldreq	r2, [r3, #0]
 80059b4:	685b      	ldreq	r3, [r3, #4]
 80059b6:	6063      	str	r3, [r4, #4]
 80059b8:	bf04      	itt	eq
 80059ba:	1852      	addeq	r2, r2, r1
 80059bc:	6022      	streq	r2, [r4, #0]
 80059be:	602c      	str	r4, [r5, #0]
 80059c0:	e7ec      	b.n	800599c <_free_r+0x28>
 80059c2:	461a      	mov	r2, r3
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	b10b      	cbz	r3, 80059cc <_free_r+0x58>
 80059c8:	42a3      	cmp	r3, r4
 80059ca:	d9fa      	bls.n	80059c2 <_free_r+0x4e>
 80059cc:	6811      	ldr	r1, [r2, #0]
 80059ce:	1855      	adds	r5, r2, r1
 80059d0:	42a5      	cmp	r5, r4
 80059d2:	d10b      	bne.n	80059ec <_free_r+0x78>
 80059d4:	6824      	ldr	r4, [r4, #0]
 80059d6:	4421      	add	r1, r4
 80059d8:	1854      	adds	r4, r2, r1
 80059da:	42a3      	cmp	r3, r4
 80059dc:	6011      	str	r1, [r2, #0]
 80059de:	d1dd      	bne.n	800599c <_free_r+0x28>
 80059e0:	681c      	ldr	r4, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	6053      	str	r3, [r2, #4]
 80059e6:	4421      	add	r1, r4
 80059e8:	6011      	str	r1, [r2, #0]
 80059ea:	e7d7      	b.n	800599c <_free_r+0x28>
 80059ec:	d902      	bls.n	80059f4 <_free_r+0x80>
 80059ee:	230c      	movs	r3, #12
 80059f0:	6003      	str	r3, [r0, #0]
 80059f2:	e7d3      	b.n	800599c <_free_r+0x28>
 80059f4:	6825      	ldr	r5, [r4, #0]
 80059f6:	1961      	adds	r1, r4, r5
 80059f8:	428b      	cmp	r3, r1
 80059fa:	bf04      	itt	eq
 80059fc:	6819      	ldreq	r1, [r3, #0]
 80059fe:	685b      	ldreq	r3, [r3, #4]
 8005a00:	6063      	str	r3, [r4, #4]
 8005a02:	bf04      	itt	eq
 8005a04:	1949      	addeq	r1, r1, r5
 8005a06:	6021      	streq	r1, [r4, #0]
 8005a08:	6054      	str	r4, [r2, #4]
 8005a0a:	e7c7      	b.n	800599c <_free_r+0x28>
 8005a0c:	b003      	add	sp, #12
 8005a0e:	bd30      	pop	{r4, r5, pc}
 8005a10:	2000009c 	.word	0x2000009c

08005a14 <_realloc_r>:
 8005a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a16:	4607      	mov	r7, r0
 8005a18:	4614      	mov	r4, r2
 8005a1a:	460e      	mov	r6, r1
 8005a1c:	b921      	cbnz	r1, 8005a28 <_realloc_r+0x14>
 8005a1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a22:	4611      	mov	r1, r2
 8005a24:	f7ff b860 	b.w	8004ae8 <_malloc_r>
 8005a28:	b922      	cbnz	r2, 8005a34 <_realloc_r+0x20>
 8005a2a:	f7ff ffa3 	bl	8005974 <_free_r>
 8005a2e:	4625      	mov	r5, r4
 8005a30:	4628      	mov	r0, r5
 8005a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a34:	f000 f848 	bl	8005ac8 <_malloc_usable_size_r>
 8005a38:	42a0      	cmp	r0, r4
 8005a3a:	d20f      	bcs.n	8005a5c <_realloc_r+0x48>
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	4638      	mov	r0, r7
 8005a40:	f7ff f852 	bl	8004ae8 <_malloc_r>
 8005a44:	4605      	mov	r5, r0
 8005a46:	2800      	cmp	r0, #0
 8005a48:	d0f2      	beq.n	8005a30 <_realloc_r+0x1c>
 8005a4a:	4631      	mov	r1, r6
 8005a4c:	4622      	mov	r2, r4
 8005a4e:	f7ff ff5d 	bl	800590c <memcpy>
 8005a52:	4631      	mov	r1, r6
 8005a54:	4638      	mov	r0, r7
 8005a56:	f7ff ff8d 	bl	8005974 <_free_r>
 8005a5a:	e7e9      	b.n	8005a30 <_realloc_r+0x1c>
 8005a5c:	4635      	mov	r5, r6
 8005a5e:	e7e7      	b.n	8005a30 <_realloc_r+0x1c>

08005a60 <_read_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	4d07      	ldr	r5, [pc, #28]	; (8005a80 <_read_r+0x20>)
 8005a64:	4604      	mov	r4, r0
 8005a66:	4608      	mov	r0, r1
 8005a68:	4611      	mov	r1, r2
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	602a      	str	r2, [r5, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f7fb faaa 	bl	8000fc8 <_read>
 8005a74:	1c43      	adds	r3, r0, #1
 8005a76:	d102      	bne.n	8005a7e <_read_r+0x1e>
 8005a78:	682b      	ldr	r3, [r5, #0]
 8005a7a:	b103      	cbz	r3, 8005a7e <_read_r+0x1e>
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	bd38      	pop	{r3, r4, r5, pc}
 8005a80:	2000043c 	.word	0x2000043c

08005a84 <_fstat_r>:
 8005a84:	b538      	push	{r3, r4, r5, lr}
 8005a86:	4d07      	ldr	r5, [pc, #28]	; (8005aa4 <_fstat_r+0x20>)
 8005a88:	2300      	movs	r3, #0
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	4611      	mov	r1, r2
 8005a90:	602b      	str	r3, [r5, #0]
 8005a92:	f7fb fade 	bl	8001052 <_fstat>
 8005a96:	1c43      	adds	r3, r0, #1
 8005a98:	d102      	bne.n	8005aa0 <_fstat_r+0x1c>
 8005a9a:	682b      	ldr	r3, [r5, #0]
 8005a9c:	b103      	cbz	r3, 8005aa0 <_fstat_r+0x1c>
 8005a9e:	6023      	str	r3, [r4, #0]
 8005aa0:	bd38      	pop	{r3, r4, r5, pc}
 8005aa2:	bf00      	nop
 8005aa4:	2000043c 	.word	0x2000043c

08005aa8 <_isatty_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4d06      	ldr	r5, [pc, #24]	; (8005ac4 <_isatty_r+0x1c>)
 8005aac:	2300      	movs	r3, #0
 8005aae:	4604      	mov	r4, r0
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	602b      	str	r3, [r5, #0]
 8005ab4:	f7fb fadd 	bl	8001072 <_isatty>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_isatty_r+0x1a>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_isatty_r+0x1a>
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	2000043c 	.word	0x2000043c

08005ac8 <_malloc_usable_size_r>:
 8005ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005acc:	1f18      	subs	r0, r3, #4
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	bfbc      	itt	lt
 8005ad2:	580b      	ldrlt	r3, [r1, r0]
 8005ad4:	18c0      	addlt	r0, r0, r3
 8005ad6:	4770      	bx	lr

08005ad8 <_init>:
 8005ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ada:	bf00      	nop
 8005adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ade:	bc08      	pop	{r3}
 8005ae0:	469e      	mov	lr, r3
 8005ae2:	4770      	bx	lr

08005ae4 <_fini>:
 8005ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae6:	bf00      	nop
 8005ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aea:	bc08      	pop	{r3}
 8005aec:	469e      	mov	lr, r3
 8005aee:	4770      	bx	lr
