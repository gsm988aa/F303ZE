
F303ZE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006520  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  080066c0  080066c0  000166c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006988  08006988  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006988  08006988  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006988  08006988  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006988  08006988  00016988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800698c  0800698c  0001698c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aac  20000070  08006a00  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b1c  08006a00  00020b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010246  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000295e  00000000  00000000  000302e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00032c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  000338f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b74  00000000  00000000  00034470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129af  00000000  00000000  00056fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd202  00000000  00000000  00069993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00136b95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039ec  00000000  00000000  00136be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080066a8 	.word	0x080066a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080066a8 	.word	0x080066a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b090      	sub	sp, #64	; 0x40
 8000284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000286:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000292:	f107 031c 	add.w	r3, r7, #28
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]
 80002a2:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]
 80002b2:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002b4:	4b7f      	ldr	r3, [pc, #508]	; (80004b4 <MX_ADC1_Init+0x234>)
 80002b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002bc:	4b7d      	ldr	r3, [pc, #500]	; (80004b4 <MX_ADC1_Init+0x234>)
 80002be:	2200      	movs	r2, #0
 80002c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002c2:	4b7c      	ldr	r3, [pc, #496]	; (80004b4 <MX_ADC1_Init+0x234>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002c8:	4b7a      	ldr	r3, [pc, #488]	; (80004b4 <MX_ADC1_Init+0x234>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002ce:	4b79      	ldr	r3, [pc, #484]	; (80004b4 <MX_ADC1_Init+0x234>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002d4:	4b77      	ldr	r3, [pc, #476]	; (80004b4 <MX_ADC1_Init+0x234>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002dc:	4b75      	ldr	r3, [pc, #468]	; (80004b4 <MX_ADC1_Init+0x234>)
 80002de:	2200      	movs	r2, #0
 80002e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002e2:	4b74      	ldr	r3, [pc, #464]	; (80004b4 <MX_ADC1_Init+0x234>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002e8:	4b72      	ldr	r3, [pc, #456]	; (80004b4 <MX_ADC1_Init+0x234>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 80002ee:	4b71      	ldr	r3, [pc, #452]	; (80004b4 <MX_ADC1_Init+0x234>)
 80002f0:	220b      	movs	r2, #11
 80002f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80002f4:	4b6f      	ldr	r3, [pc, #444]	; (80004b4 <MX_ADC1_Init+0x234>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002fc:	4b6d      	ldr	r3, [pc, #436]	; (80004b4 <MX_ADC1_Init+0x234>)
 80002fe:	2204      	movs	r2, #4
 8000300:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000302:	4b6c      	ldr	r3, [pc, #432]	; (80004b4 <MX_ADC1_Init+0x234>)
 8000304:	2200      	movs	r2, #0
 8000306:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000308:	4b6a      	ldr	r3, [pc, #424]	; (80004b4 <MX_ADC1_Init+0x234>)
 800030a:	2200      	movs	r2, #0
 800030c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800030e:	4869      	ldr	r0, [pc, #420]	; (80004b4 <MX_ADC1_Init+0x234>)
 8000310:	f001 fc5a 	bl	8001bc8 <HAL_ADC_Init>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800031a:	f001 f90a 	bl	8001532 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800031e:	2300      	movs	r3, #0
 8000320:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000322:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000326:	4619      	mov	r1, r3
 8000328:	4862      	ldr	r0, [pc, #392]	; (80004b4 <MX_ADC1_Init+0x234>)
 800032a:	f002 fb9b 	bl	8002a64 <HAL_ADCEx_MultiModeConfigChannel>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000334:	f001 f8fd 	bl	8001532 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000338:	2301      	movs	r3, #1
 800033a:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_ALL_REG;
 800033c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000340:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.HighThreshold = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.LowThreshold = 0;
 8000346:	2300      	movs	r3, #0
 8000348:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.ITMode = DISABLE;
 800034a:	2300      	movs	r3, #0
 800034c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000350:	f107 031c 	add.w	r3, r7, #28
 8000354:	4619      	mov	r1, r3
 8000356:	4857      	ldr	r0, [pc, #348]	; (80004b4 <MX_ADC1_Init+0x234>)
 8000358:	f002 fa38 	bl	80027cc <HAL_ADC_AnalogWDGConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000362:	f001 f8e6 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000366:	2301      	movs	r3, #1
 8000368:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800036a:	2301      	movs	r3, #1
 800036c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800036e:	2300      	movs	r3, #0
 8000370:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000376:	2300      	movs	r3, #0
 8000378:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4619      	mov	r1, r3
 8000382:	484c      	ldr	r0, [pc, #304]	; (80004b4 <MX_ADC1_Init+0x234>)
 8000384:	f001 ff36 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 800038e:	f001 f8d0 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000392:	2302      	movs	r3, #2
 8000394:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000396:	2302      	movs	r3, #2
 8000398:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	4619      	mov	r1, r3
 800039e:	4845      	ldr	r0, [pc, #276]	; (80004b4 <MX_ADC1_Init+0x234>)
 80003a0:	f001 ff28 	bl	80021f4 <HAL_ADC_ConfigChannel>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 80003aa:	f001 f8c2 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80003ae:	2303      	movs	r3, #3
 80003b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	4619      	mov	r1, r3
 80003ba:	483e      	ldr	r0, [pc, #248]	; (80004b4 <MX_ADC1_Init+0x234>)
 80003bc:	f001 ff1a 	bl	80021f4 <HAL_ADC_ConfigChannel>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 80003c6:	f001 f8b4 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80003ca:	2304      	movs	r3, #4
 80003cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80003ce:	2304      	movs	r3, #4
 80003d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	4619      	mov	r1, r3
 80003d6:	4837      	ldr	r0, [pc, #220]	; (80004b4 <MX_ADC1_Init+0x234>)
 80003d8:	f001 ff0c 	bl	80021f4 <HAL_ADC_ConfigChannel>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 80003e2:	f001 f8a6 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003e6:	2305      	movs	r3, #5
 80003e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80003ea:	2305      	movs	r3, #5
 80003ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	4619      	mov	r1, r3
 80003f2:	4830      	ldr	r0, [pc, #192]	; (80004b4 <MX_ADC1_Init+0x234>)
 80003f4:	f001 fefe 	bl	80021f4 <HAL_ADC_ConfigChannel>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_ADC1_Init+0x182>
  {
    Error_Handler();
 80003fe:	f001 f898 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000402:	2306      	movs	r3, #6
 8000404:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000406:	2306      	movs	r3, #6
 8000408:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	4619      	mov	r1, r3
 800040e:	4829      	ldr	r0, [pc, #164]	; (80004b4 <MX_ADC1_Init+0x234>)
 8000410:	f001 fef0 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_ADC1_Init+0x19e>
  {
    Error_Handler();
 800041a:	f001 f88a 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800041e:	2307      	movs	r3, #7
 8000420:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000422:	2307      	movs	r3, #7
 8000424:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	4619      	mov	r1, r3
 800042a:	4822      	ldr	r0, [pc, #136]	; (80004b4 <MX_ADC1_Init+0x234>)
 800042c:	f001 fee2 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_ADC1_Init+0x1ba>
  {
    Error_Handler();
 8000436:	f001 f87c 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800043a:	2308      	movs	r3, #8
 800043c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800043e:	2308      	movs	r3, #8
 8000440:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	4619      	mov	r1, r3
 8000446:	481b      	ldr	r0, [pc, #108]	; (80004b4 <MX_ADC1_Init+0x234>)
 8000448:	f001 fed4 	bl	80021f4 <HAL_ADC_ConfigChannel>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 8000452:	f001 f86e 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000456:	2309      	movs	r3, #9
 8000458:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800045a:	2309      	movs	r3, #9
 800045c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	4619      	mov	r1, r3
 8000462:	4814      	ldr	r0, [pc, #80]	; (80004b4 <MX_ADC1_Init+0x234>)
 8000464:	f001 fec6 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_ADC1_Init+0x1f2>
  {
    Error_Handler();
 800046e:	f001 f860 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000472:	230a      	movs	r3, #10
 8000474:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000476:	230a      	movs	r3, #10
 8000478:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	4619      	mov	r1, r3
 800047e:	480d      	ldr	r0, [pc, #52]	; (80004b4 <MX_ADC1_Init+0x234>)
 8000480:	f001 feb8 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 800048a:	f001 f852 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800048e:	230e      	movs	r3, #14
 8000490:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000492:	230b      	movs	r3, #11
 8000494:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	4619      	mov	r1, r3
 800049a:	4806      	ldr	r0, [pc, #24]	; (80004b4 <MX_ADC1_Init+0x234>)
 800049c:	f001 feaa 	bl	80021f4 <HAL_ADC_ConfigChannel>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_ADC1_Init+0x22a>
  {
    Error_Handler();
 80004a6:	f001 f844 	bl	8001532 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	3740      	adds	r7, #64	; 0x40
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000178 	.word	0x20000178

080004b8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004be:	463b      	mov	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
 80004cc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80004ce:	4b52      	ldr	r3, [pc, #328]	; (8000618 <MX_ADC2_Init+0x160>)
 80004d0:	4a52      	ldr	r2, [pc, #328]	; (800061c <MX_ADC2_Init+0x164>)
 80004d2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004d4:	4b50      	ldr	r3, [pc, #320]	; (8000618 <MX_ADC2_Init+0x160>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80004da:	4b4f      	ldr	r3, [pc, #316]	; (8000618 <MX_ADC2_Init+0x160>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004e0:	4b4d      	ldr	r3, [pc, #308]	; (8000618 <MX_ADC2_Init+0x160>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004e6:	4b4c      	ldr	r3, [pc, #304]	; (8000618 <MX_ADC2_Init+0x160>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 80004ec:	4b4a      	ldr	r3, [pc, #296]	; (8000618 <MX_ADC2_Init+0x160>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 80004f4:	4b48      	ldr	r3, [pc, #288]	; (8000618 <MX_ADC2_Init+0x160>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004fa:	4b47      	ldr	r3, [pc, #284]	; (8000618 <MX_ADC2_Init+0x160>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000500:	4b45      	ldr	r3, [pc, #276]	; (8000618 <MX_ADC2_Init+0x160>)
 8000502:	2201      	movs	r2, #1
 8000504:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000506:	4b44      	ldr	r3, [pc, #272]	; (8000618 <MX_ADC2_Init+0x160>)
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 7;
 800050c:	4b42      	ldr	r3, [pc, #264]	; (8000618 <MX_ADC2_Init+0x160>)
 800050e:	2207      	movs	r2, #7
 8000510:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000512:	4b41      	ldr	r3, [pc, #260]	; (8000618 <MX_ADC2_Init+0x160>)
 8000514:	2200      	movs	r2, #0
 8000516:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800051a:	4b3f      	ldr	r3, [pc, #252]	; (8000618 <MX_ADC2_Init+0x160>)
 800051c:	2204      	movs	r2, #4
 800051e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000520:	4b3d      	ldr	r3, [pc, #244]	; (8000618 <MX_ADC2_Init+0x160>)
 8000522:	2200      	movs	r2, #0
 8000524:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000526:	4b3c      	ldr	r3, [pc, #240]	; (8000618 <MX_ADC2_Init+0x160>)
 8000528:	2200      	movs	r2, #0
 800052a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800052c:	483a      	ldr	r0, [pc, #232]	; (8000618 <MX_ADC2_Init+0x160>)
 800052e:	f001 fb4b 	bl	8001bc8 <HAL_ADC_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000538:	f000 fffb 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800053c:	230c      	movs	r3, #12
 800053e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000540:	2301      	movs	r3, #1
 8000542:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800054c:	2300      	movs	r3, #0
 800054e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000554:	463b      	mov	r3, r7
 8000556:	4619      	mov	r1, r3
 8000558:	482f      	ldr	r0, [pc, #188]	; (8000618 <MX_ADC2_Init+0x160>)
 800055a:	f001 fe4b 	bl	80021f4 <HAL_ADC_ConfigChannel>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8000564:	f000 ffe5 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000568:	2302      	movs	r3, #2
 800056a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800056c:	2302      	movs	r3, #2
 800056e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000570:	463b      	mov	r3, r7
 8000572:	4619      	mov	r1, r3
 8000574:	4828      	ldr	r0, [pc, #160]	; (8000618 <MX_ADC2_Init+0x160>)
 8000576:	f001 fe3d 	bl	80021f4 <HAL_ADC_ConfigChannel>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8000580:	f000 ffd7 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000584:	2303      	movs	r3, #3
 8000586:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000588:	2303      	movs	r3, #3
 800058a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800058c:	463b      	mov	r3, r7
 800058e:	4619      	mov	r1, r3
 8000590:	4821      	ldr	r0, [pc, #132]	; (8000618 <MX_ADC2_Init+0x160>)
 8000592:	f001 fe2f 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 800059c:	f000 ffc9 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005a8:	463b      	mov	r3, r7
 80005aa:	4619      	mov	r1, r3
 80005ac:	481a      	ldr	r0, [pc, #104]	; (8000618 <MX_ADC2_Init+0x160>)
 80005ae:	f001 fe21 	bl	80021f4 <HAL_ADC_ConfigChannel>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_ADC2_Init+0x104>
  {
    Error_Handler();
 80005b8:	f000 ffbb 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005bc:	2305      	movs	r3, #5
 80005be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80005c0:	2305      	movs	r3, #5
 80005c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005c4:	463b      	mov	r3, r7
 80005c6:	4619      	mov	r1, r3
 80005c8:	4813      	ldr	r0, [pc, #76]	; (8000618 <MX_ADC2_Init+0x160>)
 80005ca:	f001 fe13 	bl	80021f4 <HAL_ADC_ConfigChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_ADC2_Init+0x120>
  {
    Error_Handler();
 80005d4:	f000 ffad 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005d8:	230b      	movs	r3, #11
 80005da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80005dc:	2306      	movs	r3, #6
 80005de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005e0:	463b      	mov	r3, r7
 80005e2:	4619      	mov	r1, r3
 80005e4:	480c      	ldr	r0, [pc, #48]	; (8000618 <MX_ADC2_Init+0x160>)
 80005e6:	f001 fe05 	bl	80021f4 <HAL_ADC_ConfigChannel>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_ADC2_Init+0x13c>
  {
    Error_Handler();
 80005f0:	f000 ff9f 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005f4:	230c      	movs	r3, #12
 80005f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80005f8:	2307      	movs	r3, #7
 80005fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005fc:	463b      	mov	r3, r7
 80005fe:	4619      	mov	r1, r3
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_ADC2_Init+0x160>)
 8000602:	f001 fdf7 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC2_Init+0x158>
  {
    Error_Handler();
 800060c:	f000 ff91 	bl	8001532 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200000e4 	.word	0x200000e4
 800061c:	50000100 	.word	0x50000100

08000620 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
 8000640:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000642:	4b91      	ldr	r3, [pc, #580]	; (8000888 <MX_ADC3_Init+0x268>)
 8000644:	4a91      	ldr	r2, [pc, #580]	; (800088c <MX_ADC3_Init+0x26c>)
 8000646:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000648:	4b8f      	ldr	r3, [pc, #572]	; (8000888 <MX_ADC3_Init+0x268>)
 800064a:	2200      	movs	r2, #0
 800064c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800064e:	4b8e      	ldr	r3, [pc, #568]	; (8000888 <MX_ADC3_Init+0x268>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000654:	4b8c      	ldr	r3, [pc, #560]	; (8000888 <MX_ADC3_Init+0x268>)
 8000656:	2201      	movs	r2, #1
 8000658:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800065a:	4b8b      	ldr	r3, [pc, #556]	; (8000888 <MX_ADC3_Init+0x268>)
 800065c:	2200      	movs	r2, #0
 800065e:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = ENABLE;
 8000660:	4b89      	ldr	r3, [pc, #548]	; (8000888 <MX_ADC3_Init+0x268>)
 8000662:	2201      	movs	r2, #1
 8000664:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.NbrOfDiscConversion = 1;
 8000668:	4b87      	ldr	r3, [pc, #540]	; (8000888 <MX_ADC3_Init+0x268>)
 800066a:	2201      	movs	r2, #1
 800066c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066e:	4b86      	ldr	r3, [pc, #536]	; (8000888 <MX_ADC3_Init+0x268>)
 8000670:	2200      	movs	r2, #0
 8000672:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000674:	4b84      	ldr	r3, [pc, #528]	; (8000888 <MX_ADC3_Init+0x268>)
 8000676:	2201      	movs	r2, #1
 8000678:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067a:	4b83      	ldr	r3, [pc, #524]	; (8000888 <MX_ADC3_Init+0x268>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 15;
 8000680:	4b81      	ldr	r3, [pc, #516]	; (8000888 <MX_ADC3_Init+0x268>)
 8000682:	220f      	movs	r2, #15
 8000684:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000686:	4b80      	ldr	r3, [pc, #512]	; (8000888 <MX_ADC3_Init+0x268>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068e:	4b7e      	ldr	r3, [pc, #504]	; (8000888 <MX_ADC3_Init+0x268>)
 8000690:	2204      	movs	r2, #4
 8000692:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000694:	4b7c      	ldr	r3, [pc, #496]	; (8000888 <MX_ADC3_Init+0x268>)
 8000696:	2200      	movs	r2, #0
 8000698:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800069a:	4b7b      	ldr	r3, [pc, #492]	; (8000888 <MX_ADC3_Init+0x268>)
 800069c:	2200      	movs	r2, #0
 800069e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006a0:	4879      	ldr	r0, [pc, #484]	; (8000888 <MX_ADC3_Init+0x268>)
 80006a2:	f001 fa91 	bl	8001bc8 <HAL_ADC_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80006ac:	f000 ff41 	bl	8001532 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	4873      	ldr	r0, [pc, #460]	; (8000888 <MX_ADC3_Init+0x268>)
 80006bc:	f002 f9d2 	bl	8002a64 <HAL_ADCEx_MultiModeConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC3_Init+0xaa>
  {
    Error_Handler();
 80006c6:	f000 ff34 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4868      	ldr	r0, [pc, #416]	; (8000888 <MX_ADC3_Init+0x268>)
 80006e8:	f001 fd84 	bl	80021f4 <HAL_ADC_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 80006f2:	f000 ff1e 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	4619      	mov	r1, r3
 8000702:	4861      	ldr	r0, [pc, #388]	; (8000888 <MX_ADC3_Init+0x268>)
 8000704:	f001 fd76 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC3_Init+0xf2>
  {
    Error_Handler();
 800070e:	f000 ff10 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000712:	2303      	movs	r3, #3
 8000714:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000716:	2303      	movs	r3, #3
 8000718:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4619      	mov	r1, r3
 800071e:	485a      	ldr	r0, [pc, #360]	; (8000888 <MX_ADC3_Init+0x268>)
 8000720:	f001 fd68 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 800072a:	f000 ff02 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800072e:	2305      	movs	r3, #5
 8000730:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000732:	2304      	movs	r3, #4
 8000734:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4619      	mov	r1, r3
 800073a:	4853      	ldr	r0, [pc, #332]	; (8000888 <MX_ADC3_Init+0x268>)
 800073c:	f001 fd5a 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC3_Init+0x12a>
  {
    Error_Handler();
 8000746:	f000 fef4 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800074a:	2306      	movs	r3, #6
 800074c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800074e:	2305      	movs	r3, #5
 8000750:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4619      	mov	r1, r3
 8000756:	484c      	ldr	r0, [pc, #304]	; (8000888 <MX_ADC3_Init+0x268>)
 8000758:	f001 fd4c 	bl	80021f4 <HAL_ADC_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC3_Init+0x146>
  {
    Error_Handler();
 8000762:	f000 fee6 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000766:	2307      	movs	r3, #7
 8000768:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800076a:	2306      	movs	r3, #6
 800076c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4619      	mov	r1, r3
 8000772:	4845      	ldr	r0, [pc, #276]	; (8000888 <MX_ADC3_Init+0x268>)
 8000774:	f001 fd3e 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC3_Init+0x162>
  {
    Error_Handler();
 800077e:	f000 fed8 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000782:	2308      	movs	r3, #8
 8000784:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000786:	2307      	movs	r3, #7
 8000788:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4619      	mov	r1, r3
 800078e:	483e      	ldr	r0, [pc, #248]	; (8000888 <MX_ADC3_Init+0x268>)
 8000790:	f001 fd30 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC3_Init+0x17e>
  {
    Error_Handler();
 800079a:	f000 feca 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800079e:	2309      	movs	r3, #9
 80007a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80007a2:	2308      	movs	r3, #8
 80007a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4619      	mov	r1, r3
 80007aa:	4837      	ldr	r0, [pc, #220]	; (8000888 <MX_ADC3_Init+0x268>)
 80007ac:	f001 fd22 	bl	80021f4 <HAL_ADC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC3_Init+0x19a>
  {
    Error_Handler();
 80007b6:	f000 febc 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007ba:	230a      	movs	r3, #10
 80007bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80007be:	2309      	movs	r3, #9
 80007c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	4619      	mov	r1, r3
 80007c6:	4830      	ldr	r0, [pc, #192]	; (8000888 <MX_ADC3_Init+0x268>)
 80007c8:	f001 fd14 	bl	80021f4 <HAL_ADC_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC3_Init+0x1b6>
  {
    Error_Handler();
 80007d2:	f000 feae 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80007d6:	230b      	movs	r3, #11
 80007d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007da:	230a      	movs	r3, #10
 80007dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	4829      	ldr	r0, [pc, #164]	; (8000888 <MX_ADC3_Init+0x268>)
 80007e4:	f001 fd06 	bl	80021f4 <HAL_ADC_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC3_Init+0x1d2>
  {
    Error_Handler();
 80007ee:	f000 fea0 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007f2:	230c      	movs	r3, #12
 80007f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007f6:	230b      	movs	r3, #11
 80007f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	4619      	mov	r1, r3
 80007fe:	4822      	ldr	r0, [pc, #136]	; (8000888 <MX_ADC3_Init+0x268>)
 8000800:	f001 fcf8 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_ADC3_Init+0x1ee>
  {
    Error_Handler();
 800080a:	f000 fe92 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800080e:	230d      	movs	r3, #13
 8000810:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000812:	230c      	movs	r3, #12
 8000814:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4619      	mov	r1, r3
 800081a:	481b      	ldr	r0, [pc, #108]	; (8000888 <MX_ADC3_Init+0x268>)
 800081c:	f001 fcea 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ADC3_Init+0x20a>
  {
    Error_Handler();
 8000826:	f000 fe84 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800082a:	230e      	movs	r3, #14
 800082c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 800082e:	230d      	movs	r3, #13
 8000830:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4619      	mov	r1, r3
 8000836:	4814      	ldr	r0, [pc, #80]	; (8000888 <MX_ADC3_Init+0x268>)
 8000838:	f001 fcdc 	bl	80021f4 <HAL_ADC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC3_Init+0x226>
  {
    Error_Handler();
 8000842:	f000 fe76 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000846:	230f      	movs	r3, #15
 8000848:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 800084a:	230e      	movs	r3, #14
 800084c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	480d      	ldr	r0, [pc, #52]	; (8000888 <MX_ADC3_Init+0x268>)
 8000854:	f001 fcce 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_ADC3_Init+0x242>
  {
    Error_Handler();
 800085e:	f000 fe68 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000862:	2310      	movs	r3, #16
 8000864:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000866:	230f      	movs	r3, #15
 8000868:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <MX_ADC3_Init+0x268>)
 8000870:	f001 fcc0 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC3_Init+0x25e>
  {
    Error_Handler();
 800087a:	f000 fe5a 	bl	8001532 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3728      	adds	r7, #40	; 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200001c8 	.word	0x200001c8
 800088c:	50000400 	.word	0x50000400

08000890 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000896:	463b      	mov	r3, r7
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
 80008a4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC4_Init 1 */

  /* USER CODE END ADC4_Init 1 */
  /** Common config
  */
  hadc4.Instance = ADC4;
 80008a6:	4b52      	ldr	r3, [pc, #328]	; (80009f0 <MX_ADC4_Init+0x160>)
 80008a8:	4a52      	ldr	r2, [pc, #328]	; (80009f4 <MX_ADC4_Init+0x164>)
 80008aa:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008ac:	4b50      	ldr	r3, [pc, #320]	; (80009f0 <MX_ADC4_Init+0x160>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008b2:	4b4f      	ldr	r3, [pc, #316]	; (80009f0 <MX_ADC4_Init+0x160>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008b8:	4b4d      	ldr	r3, [pc, #308]	; (80009f0 <MX_ADC4_Init+0x160>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80008be:	4b4c      	ldr	r3, [pc, #304]	; (80009f0 <MX_ADC4_Init+0x160>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = ENABLE;
 80008c4:	4b4a      	ldr	r3, [pc, #296]	; (80009f0 <MX_ADC4_Init+0x160>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.NbrOfDiscConversion = 1;
 80008cc:	4b48      	ldr	r3, [pc, #288]	; (80009f0 <MX_ADC4_Init+0x160>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008d2:	4b47      	ldr	r3, [pc, #284]	; (80009f0 <MX_ADC4_Init+0x160>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d8:	4b45      	ldr	r3, [pc, #276]	; (80009f0 <MX_ADC4_Init+0x160>)
 80008da:	2201      	movs	r2, #1
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008de:	4b44      	ldr	r3, [pc, #272]	; (80009f0 <MX_ADC4_Init+0x160>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 7;
 80008e4:	4b42      	ldr	r3, [pc, #264]	; (80009f0 <MX_ADC4_Init+0x160>)
 80008e6:	2207      	movs	r2, #7
 80008e8:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80008ea:	4b41      	ldr	r3, [pc, #260]	; (80009f0 <MX_ADC4_Init+0x160>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f2:	4b3f      	ldr	r3, [pc, #252]	; (80009f0 <MX_ADC4_Init+0x160>)
 80008f4:	2204      	movs	r2, #4
 80008f6:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008f8:	4b3d      	ldr	r3, [pc, #244]	; (80009f0 <MX_ADC4_Init+0x160>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008fe:	4b3c      	ldr	r3, [pc, #240]	; (80009f0 <MX_ADC4_Init+0x160>)
 8000900:	2200      	movs	r2, #0
 8000902:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000904:	483a      	ldr	r0, [pc, #232]	; (80009f0 <MX_ADC4_Init+0x160>)
 8000906:	f001 f95f 	bl	8001bc8 <HAL_ADC_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_ADC4_Init+0x84>
  {
    Error_Handler();
 8000910:	f000 fe0f 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000914:	2301      	movs	r3, #1
 8000916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000918:	2301      	movs	r3, #1
 800091a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	4619      	mov	r1, r3
 8000930:	482f      	ldr	r0, [pc, #188]	; (80009f0 <MX_ADC4_Init+0x160>)
 8000932:	f001 fc5f 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ADC4_Init+0xb0>
  {
    Error_Handler();
 800093c:	f000 fdf9 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000940:	2302      	movs	r3, #2
 8000942:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000944:	2302      	movs	r3, #2
 8000946:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	4619      	mov	r1, r3
 800094c:	4828      	ldr	r0, [pc, #160]	; (80009f0 <MX_ADC4_Init+0x160>)
 800094e:	f001 fc51 	bl	80021f4 <HAL_ADC_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC4_Init+0xcc>
  {
    Error_Handler();
 8000958:	f000 fdeb 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800095c:	2303      	movs	r3, #3
 800095e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000960:	2303      	movs	r3, #3
 8000962:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000964:	463b      	mov	r3, r7
 8000966:	4619      	mov	r1, r3
 8000968:	4821      	ldr	r0, [pc, #132]	; (80009f0 <MX_ADC4_Init+0x160>)
 800096a:	f001 fc43 	bl	80021f4 <HAL_ADC_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_ADC4_Init+0xe8>
  {
    Error_Handler();
 8000974:	f000 fddd 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000978:	2304      	movs	r3, #4
 800097a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800097c:	2304      	movs	r3, #4
 800097e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	4619      	mov	r1, r3
 8000984:	481a      	ldr	r0, [pc, #104]	; (80009f0 <MX_ADC4_Init+0x160>)
 8000986:	f001 fc35 	bl	80021f4 <HAL_ADC_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC4_Init+0x104>
  {
    Error_Handler();
 8000990:	f000 fdcf 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000994:	2305      	movs	r3, #5
 8000996:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000998:	2305      	movs	r3, #5
 800099a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	4619      	mov	r1, r3
 80009a0:	4813      	ldr	r0, [pc, #76]	; (80009f0 <MX_ADC4_Init+0x160>)
 80009a2:	f001 fc27 	bl	80021f4 <HAL_ADC_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_ADC4_Init+0x120>
  {
    Error_Handler();
 80009ac:	f000 fdc1 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80009b0:	230c      	movs	r3, #12
 80009b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80009b4:	2306      	movs	r3, #6
 80009b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	4619      	mov	r1, r3
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <MX_ADC4_Init+0x160>)
 80009be:	f001 fc19 	bl	80021f4 <HAL_ADC_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_ADC4_Init+0x13c>
  {
    Error_Handler();
 80009c8:	f000 fdb3 	bl	8001532 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80009cc:	230d      	movs	r3, #13
 80009ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80009d0:	2307      	movs	r3, #7
 80009d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_ADC4_Init+0x160>)
 80009da:	f001 fc0b 	bl	80021f4 <HAL_ADC_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_ADC4_Init+0x158>
  {
    Error_Handler();
 80009e4:	f000 fda5 	bl	8001532 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000025c 	.word	0x2000025c
 80009f4:	50000500 	.word	0x50000500

080009f8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC34_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b098      	sub	sp, #96	; 0x60
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a18:	f040 80a0 	bne.w	8000b5c <HAL_ADC_MspInit+0x164>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a1c:	4b96      	ldr	r3, [pc, #600]	; (8000c78 <HAL_ADC_MspInit+0x280>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	4a95      	ldr	r2, [pc, #596]	; (8000c78 <HAL_ADC_MspInit+0x280>)
 8000a24:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a26:	4b94      	ldr	r3, [pc, #592]	; (8000c78 <HAL_ADC_MspInit+0x280>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d10b      	bne.n	8000a46 <HAL_ADC_MspInit+0x4e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a2e:	4b93      	ldr	r3, [pc, #588]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	4a92      	ldr	r2, [pc, #584]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6153      	str	r3, [r2, #20]
 8000a3a:	4b90      	ldr	r3, [pc, #576]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a46:	4b8d      	ldr	r3, [pc, #564]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	4a8c      	ldr	r2, [pc, #560]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000a4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a50:	6153      	str	r3, [r2, #20]
 8000a52:	4b8a      	ldr	r3, [pc, #552]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8000a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	4b87      	ldr	r3, [pc, #540]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	4a86      	ldr	r2, [pc, #536]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000a64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a68:	6153      	str	r3, [r2, #20]
 8000a6a:	4b84      	ldr	r3, [pc, #528]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a72:	643b      	str	r3, [r7, #64]	; 0x40
 8000a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b81      	ldr	r3, [pc, #516]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	4a80      	ldr	r2, [pc, #512]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	6153      	str	r3, [r2, #20]
 8000a82:	4b7e      	ldr	r3, [pc, #504]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	4b7b      	ldr	r3, [pc, #492]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	4a7a      	ldr	r2, [pc, #488]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a98:	6153      	str	r3, [r2, #20]
 8000a9a:	4b78      	ldr	r3, [pc, #480]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB11     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000aa6:	2314      	movs	r3, #20
 8000aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ab2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4871      	ldr	r0, [pc, #452]	; (8000c80 <HAL_ADC_MspInit+0x288>)
 8000aba:	f002 fcad 	bl	8003418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000abe:	230f      	movs	r3, #15
 8000ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ace:	4619      	mov	r1, r3
 8000ad0:	486c      	ldr	r0, [pc, #432]	; (8000c84 <HAL_ADC_MspInit+0x28c>)
 8000ad2:	f002 fca1 	bl	8003418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ada:	2303      	movs	r3, #3
 8000adc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f002 fc94 	bl	8003418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000af0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000af4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af6:	2303      	movs	r3, #3
 8000af8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b02:	4619      	mov	r1, r3
 8000b04:	4860      	ldr	r0, [pc, #384]	; (8000c88 <HAL_ADC_MspInit+0x290>)
 8000b06:	f002 fc87 	bl	8003418 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b0a:	4b60      	ldr	r3, [pc, #384]	; (8000c8c <HAL_ADC_MspInit+0x294>)
 8000b0c:	4a60      	ldr	r2, [pc, #384]	; (8000c90 <HAL_ADC_MspInit+0x298>)
 8000b0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b10:	4b5e      	ldr	r3, [pc, #376]	; (8000c8c <HAL_ADC_MspInit+0x294>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b16:	4b5d      	ldr	r3, [pc, #372]	; (8000c8c <HAL_ADC_MspInit+0x294>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b1c:	4b5b      	ldr	r3, [pc, #364]	; (8000c8c <HAL_ADC_MspInit+0x294>)
 8000b1e:	2280      	movs	r2, #128	; 0x80
 8000b20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b22:	4b5a      	ldr	r3, [pc, #360]	; (8000c8c <HAL_ADC_MspInit+0x294>)
 8000b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b2a:	4b58      	ldr	r3, [pc, #352]	; (8000c8c <HAL_ADC_MspInit+0x294>)
 8000b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b32:	4b56      	ldr	r3, [pc, #344]	; (8000c8c <HAL_ADC_MspInit+0x294>)
 8000b34:	2220      	movs	r2, #32
 8000b36:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b38:	4b54      	ldr	r3, [pc, #336]	; (8000c8c <HAL_ADC_MspInit+0x294>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b3e:	4853      	ldr	r0, [pc, #332]	; (8000c8c <HAL_ADC_MspInit+0x294>)
 8000b40:	f002 fab7 	bl	80030b2 <HAL_DMA_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_ADC_MspInit+0x156>
    {
      Error_Handler();
 8000b4a:	f000 fcf2 	bl	8001532 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a4e      	ldr	r2, [pc, #312]	; (8000c8c <HAL_ADC_MspInit+0x294>)
 8000b52:	639a      	str	r2, [r3, #56]	; 0x38
 8000b54:	4a4d      	ldr	r2, [pc, #308]	; (8000c8c <HAL_ADC_MspInit+0x294>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000b5a:	e1be      	b.n	8000eda <HAL_ADC_MspInit+0x4e2>
  else if(adcHandle->Instance==ADC2)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a4c      	ldr	r2, [pc, #304]	; (8000c94 <HAL_ADC_MspInit+0x29c>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	f040 809c 	bne.w	8000ca0 <HAL_ADC_MspInit+0x2a8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b68:	4b43      	ldr	r3, [pc, #268]	; (8000c78 <HAL_ADC_MspInit+0x280>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	4a42      	ldr	r2, [pc, #264]	; (8000c78 <HAL_ADC_MspInit+0x280>)
 8000b70:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b72:	4b41      	ldr	r3, [pc, #260]	; (8000c78 <HAL_ADC_MspInit+0x280>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d10b      	bne.n	8000b92 <HAL_ADC_MspInit+0x19a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b7a:	4b40      	ldr	r3, [pc, #256]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	4a3f      	ldr	r2, [pc, #252]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6153      	str	r3, [r2, #20]
 8000b86:	4b3d      	ldr	r3, [pc, #244]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8000b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b3a      	ldr	r3, [pc, #232]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	4a39      	ldr	r2, [pc, #228]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	6153      	str	r3, [r2, #20]
 8000b9e:	4b37      	ldr	r3, [pc, #220]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
 8000ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000baa:	4b34      	ldr	r3, [pc, #208]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	4a33      	ldr	r2, [pc, #204]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000bb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bb4:	6153      	str	r3, [r2, #20]
 8000bb6:	4b31      	ldr	r3, [pc, #196]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a2d      	ldr	r2, [pc, #180]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bcc:	6153      	str	r3, [r2, #20]
 8000bce:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <HAL_ADC_MspInit+0x284>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bda:	23f0      	movs	r3, #240	; 0xf0
 8000bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bde:	2303      	movs	r3, #3
 8000be0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bea:	4619      	mov	r1, r3
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f002 fc12 	bl	8003418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bf4:	2330      	movs	r3, #48	; 0x30
 8000bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c04:	4619      	mov	r1, r3
 8000c06:	481f      	ldr	r0, [pc, #124]	; (8000c84 <HAL_ADC_MspInit+0x28c>)
 8000c08:	f002 fc06 	bl	8003418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c10:	2303      	movs	r3, #3
 8000c12:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	481a      	ldr	r0, [pc, #104]	; (8000c88 <HAL_ADC_MspInit+0x290>)
 8000c20:	f002 fbfa 	bl	8003418 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <HAL_ADC_MspInit+0x2a0>)
 8000c26:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <HAL_ADC_MspInit+0x2a4>)
 8000c28:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <HAL_ADC_MspInit+0x2a0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_ADC_MspInit+0x2a0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_ADC_MspInit+0x2a0>)
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_ADC_MspInit+0x2a0>)
 8000c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c42:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <HAL_ADC_MspInit+0x2a0>)
 8000c46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c4a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_ADC_MspInit+0x2a0>)
 8000c4e:	2220      	movs	r2, #32
 8000c50:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_ADC_MspInit+0x2a0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000c58:	480f      	ldr	r0, [pc, #60]	; (8000c98 <HAL_ADC_MspInit+0x2a0>)
 8000c5a:	f002 fa2a 	bl	80030b2 <HAL_DMA_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_ADC_MspInit+0x270>
      Error_Handler();
 8000c64:	f000 fc65 	bl	8001532 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <HAL_ADC_MspInit+0x2a0>)
 8000c6c:	639a      	str	r2, [r3, #56]	; 0x38
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_ADC_MspInit+0x2a0>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000c74:	e131      	b.n	8000eda <HAL_ADC_MspInit+0x4e2>
 8000c76:	bf00      	nop
 8000c78:	2000008c 	.word	0x2000008c
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	48001400 	.word	0x48001400
 8000c84:	48000800 	.word	0x48000800
 8000c88:	48000400 	.word	0x48000400
 8000c8c:	20000218 	.word	0x20000218
 8000c90:	40020008 	.word	0x40020008
 8000c94:	50000100 	.word	0x50000100
 8000c98:	200002ac 	.word	0x200002ac
 8000c9c:	40020408 	.word	0x40020408
  else if(adcHandle->Instance==ADC3)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a8f      	ldr	r2, [pc, #572]	; (8000ee4 <HAL_ADC_MspInit+0x4ec>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	f040 8089 	bne.w	8000dbe <HAL_ADC_MspInit+0x3c6>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8000cac:	4b8e      	ldr	r3, [pc, #568]	; (8000ee8 <HAL_ADC_MspInit+0x4f0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	4a8d      	ldr	r2, [pc, #564]	; (8000ee8 <HAL_ADC_MspInit+0x4f0>)
 8000cb4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000cb6:	4b8c      	ldr	r3, [pc, #560]	; (8000ee8 <HAL_ADC_MspInit+0x4f0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d10b      	bne.n	8000cd6 <HAL_ADC_MspInit+0x2de>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000cbe:	4b8b      	ldr	r3, [pc, #556]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	4a8a      	ldr	r2, [pc, #552]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000cc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000cc8:	6153      	str	r3, [r2, #20]
 8000cca:	4b88      	ldr	r3, [pc, #544]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b85      	ldr	r3, [pc, #532]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	4a84      	ldr	r2, [pc, #528]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce0:	6153      	str	r3, [r2, #20]
 8000ce2:	4b82      	ldr	r3, [pc, #520]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cea:	623b      	str	r3, [r7, #32]
 8000cec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cee:	4b7f      	ldr	r3, [pc, #508]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	4a7e      	ldr	r2, [pc, #504]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000cf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cf8:	6153      	str	r3, [r2, #20]
 8000cfa:	4b7c      	ldr	r3, [pc, #496]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d02:	61fb      	str	r3, [r7, #28]
 8000d04:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d06:	4b79      	ldr	r3, [pc, #484]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	4a78      	ldr	r2, [pc, #480]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000d0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d10:	6153      	str	r3, [r2, #20]
 8000d12:	4b76      	ldr	r3, [pc, #472]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d1a:	61bb      	str	r3, [r7, #24]
 8000d1c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8000d1e:	f242 0303 	movw	r3, #8195	; 0x2003
 8000d22:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d24:	2303      	movs	r3, #3
 8000d26:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d30:	4619      	mov	r1, r3
 8000d32:	486f      	ldr	r0, [pc, #444]	; (8000ef0 <HAL_ADC_MspInit+0x4f8>)
 8000d34:	f002 fb70 	bl	8003418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d38:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8000d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4869      	ldr	r0, [pc, #420]	; (8000ef4 <HAL_ADC_MspInit+0x4fc>)
 8000d4e:	f002 fb63 	bl	8003418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000d52:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8000d56:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d64:	4619      	mov	r1, r3
 8000d66:	4864      	ldr	r0, [pc, #400]	; (8000ef8 <HAL_ADC_MspInit+0x500>)
 8000d68:	f002 fb56 	bl	8003418 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8000d6c:	4b63      	ldr	r3, [pc, #396]	; (8000efc <HAL_ADC_MspInit+0x504>)
 8000d6e:	4a64      	ldr	r2, [pc, #400]	; (8000f00 <HAL_ADC_MspInit+0x508>)
 8000d70:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d72:	4b62      	ldr	r3, [pc, #392]	; (8000efc <HAL_ADC_MspInit+0x504>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d78:	4b60      	ldr	r3, [pc, #384]	; (8000efc <HAL_ADC_MspInit+0x504>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000d7e:	4b5f      	ldr	r3, [pc, #380]	; (8000efc <HAL_ADC_MspInit+0x504>)
 8000d80:	2280      	movs	r2, #128	; 0x80
 8000d82:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d84:	4b5d      	ldr	r3, [pc, #372]	; (8000efc <HAL_ADC_MspInit+0x504>)
 8000d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d8a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d8c:	4b5b      	ldr	r3, [pc, #364]	; (8000efc <HAL_ADC_MspInit+0x504>)
 8000d8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d92:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000d94:	4b59      	ldr	r3, [pc, #356]	; (8000efc <HAL_ADC_MspInit+0x504>)
 8000d96:	2220      	movs	r2, #32
 8000d98:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000d9a:	4b58      	ldr	r3, [pc, #352]	; (8000efc <HAL_ADC_MspInit+0x504>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000da0:	4856      	ldr	r0, [pc, #344]	; (8000efc <HAL_ADC_MspInit+0x504>)
 8000da2:	f002 f986 	bl	80030b2 <HAL_DMA_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_ADC_MspInit+0x3b8>
      Error_Handler();
 8000dac:	f000 fbc1 	bl	8001532 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a52      	ldr	r2, [pc, #328]	; (8000efc <HAL_ADC_MspInit+0x504>)
 8000db4:	639a      	str	r2, [r3, #56]	; 0x38
 8000db6:	4a51      	ldr	r2, [pc, #324]	; (8000efc <HAL_ADC_MspInit+0x504>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000dbc:	e08d      	b.n	8000eda <HAL_ADC_MspInit+0x4e2>
  else if(adcHandle->Instance==ADC4)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a50      	ldr	r2, [pc, #320]	; (8000f04 <HAL_ADC_MspInit+0x50c>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	f040 8088 	bne.w	8000eda <HAL_ADC_MspInit+0x4e2>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8000dca:	4b47      	ldr	r3, [pc, #284]	; (8000ee8 <HAL_ADC_MspInit+0x4f0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4a45      	ldr	r2, [pc, #276]	; (8000ee8 <HAL_ADC_MspInit+0x4f0>)
 8000dd2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000dd4:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <HAL_ADC_MspInit+0x4f0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d10b      	bne.n	8000df4 <HAL_ADC_MspInit+0x3fc>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000ddc:	4b43      	ldr	r3, [pc, #268]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	4a42      	ldr	r2, [pc, #264]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000de2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000de6:	6153      	str	r3, [r2, #20]
 8000de8:	4b40      	ldr	r3, [pc, #256]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df4:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	4a3c      	ldr	r2, [pc, #240]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000dfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dfe:	6153      	str	r3, [r2, #20]
 8000e00:	4b3a      	ldr	r3, [pc, #232]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0c:	4b37      	ldr	r3, [pc, #220]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	4a36      	ldr	r2, [pc, #216]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000e12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e16:	6153      	str	r3, [r2, #20]
 8000e18:	4b34      	ldr	r3, [pc, #208]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e24:	4b31      	ldr	r3, [pc, #196]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	4a30      	ldr	r2, [pc, #192]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000e2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e2e:	6153      	str	r3, [r2, #20]
 8000e30:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <HAL_ADC_MspInit+0x4f4>)
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e3c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e40:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e42:	2303      	movs	r3, #3
 8000e44:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4828      	ldr	r0, [pc, #160]	; (8000ef4 <HAL_ADC_MspInit+0x4fc>)
 8000e52:	f002 fae1 	bl	8003418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8000e56:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4821      	ldr	r0, [pc, #132]	; (8000ef0 <HAL_ADC_MspInit+0x4f8>)
 8000e6c:	f002 fad4 	bl	8003418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e74:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e76:	2303      	movs	r3, #3
 8000e78:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e82:	4619      	mov	r1, r3
 8000e84:	481c      	ldr	r0, [pc, #112]	; (8000ef8 <HAL_ADC_MspInit+0x500>)
 8000e86:	f002 fac7 	bl	8003418 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <HAL_ADC_MspInit+0x510>)
 8000e8c:	4a1f      	ldr	r2, [pc, #124]	; (8000f0c <HAL_ADC_MspInit+0x514>)
 8000e8e:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <HAL_ADC_MspInit+0x510>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <HAL_ADC_MspInit+0x510>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <HAL_ADC_MspInit+0x510>)
 8000e9e:	2280      	movs	r2, #128	; 0x80
 8000ea0:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <HAL_ADC_MspInit+0x510>)
 8000ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ea8:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_ADC_MspInit+0x510>)
 8000eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eb0:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_ADC_MspInit+0x510>)
 8000eb4:	2220      	movs	r2, #32
 8000eb6:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <HAL_ADC_MspInit+0x510>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000ebe:	4812      	ldr	r0, [pc, #72]	; (8000f08 <HAL_ADC_MspInit+0x510>)
 8000ec0:	f002 f8f7 	bl	80030b2 <HAL_DMA_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_ADC_MspInit+0x4d6>
      Error_Handler();
 8000eca:	f000 fb32 	bl	8001532 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <HAL_ADC_MspInit+0x510>)
 8000ed2:	639a      	str	r2, [r3, #56]	; 0x38
 8000ed4:	4a0c      	ldr	r2, [pc, #48]	; (8000f08 <HAL_ADC_MspInit+0x510>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000eda:	bf00      	nop
 8000edc:	3760      	adds	r7, #96	; 0x60
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	50000400 	.word	0x50000400
 8000ee8:	20000090 	.word	0x20000090
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	48000400 	.word	0x48000400
 8000ef4:	48001000 	.word	0x48001000
 8000ef8:	48000c00 	.word	0x48000c00
 8000efc:	20000134 	.word	0x20000134
 8000f00:	40020458 	.word	0x40020458
 8000f04:	50000500 	.word	0x50000500
 8000f08:	200000a0 	.word	0x200000a0
 8000f0c:	4002041c 	.word	0x4002041c

08000f10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f16:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <MX_DMA_Init+0x90>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	4a21      	ldr	r2, [pc, #132]	; (8000fa0 <MX_DMA_Init+0x90>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6153      	str	r3, [r2, #20]
 8000f22:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <MX_DMA_Init+0x90>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <MX_DMA_Init+0x90>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <MX_DMA_Init+0x90>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6153      	str	r3, [r2, #20]
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <MX_DMA_Init+0x90>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	200b      	movs	r0, #11
 8000f4c:	f002 f87b 	bl	8003046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f50:	200b      	movs	r0, #11
 8000f52:	f002 f894 	bl	800307e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	200d      	movs	r0, #13
 8000f5c:	f002 f873 	bl	8003046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f60:	200d      	movs	r0, #13
 8000f62:	f002 f88c 	bl	800307e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2038      	movs	r0, #56	; 0x38
 8000f6c:	f002 f86b 	bl	8003046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000f70:	2038      	movs	r0, #56	; 0x38
 8000f72:	f002 f884 	bl	800307e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2039      	movs	r0, #57	; 0x39
 8000f7c:	f002 f863 	bl	8003046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000f80:	2039      	movs	r0, #57	; 0x39
 8000f82:	f002 f87c 	bl	800307e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	203c      	movs	r0, #60	; 0x3c
 8000f8c:	f002 f85b 	bl	8003046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000f90:	203c      	movs	r0, #60	; 0x3c
 8000f92:	f002 f874 	bl	800307e <HAL_NVIC_EnableIRQ>

}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000faa:	4b27      	ldr	r3, [pc, #156]	; (8001048 <MX_GPIO_Init+0xa4>)
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	4a26      	ldr	r2, [pc, #152]	; (8001048 <MX_GPIO_Init+0xa4>)
 8000fb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fb4:	6153      	str	r3, [r2, #20]
 8000fb6:	4b24      	ldr	r3, [pc, #144]	; (8001048 <MX_GPIO_Init+0xa4>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <MX_GPIO_Init+0xa4>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	4a20      	ldr	r2, [pc, #128]	; (8001048 <MX_GPIO_Init+0xa4>)
 8000fc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fcc:	6153      	str	r3, [r2, #20]
 8000fce:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <MX_GPIO_Init+0xa4>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_GPIO_Init+0xa4>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	4a1a      	ldr	r2, [pc, #104]	; (8001048 <MX_GPIO_Init+0xa4>)
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	6153      	str	r3, [r2, #20]
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_GPIO_Init+0xa4>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MX_GPIO_Init+0xa4>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	4a14      	ldr	r2, [pc, #80]	; (8001048 <MX_GPIO_Init+0xa4>)
 8000ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ffc:	6153      	str	r3, [r2, #20]
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <MX_GPIO_Init+0xa4>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_GPIO_Init+0xa4>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <MX_GPIO_Init+0xa4>)
 8001010:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001014:	6153      	str	r3, [r2, #20]
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_GPIO_Init+0xa4>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_GPIO_Init+0xa4>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <MX_GPIO_Init+0xa4>)
 8001028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800102c:	6153      	str	r3, [r2, #20]
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_GPIO_Init+0xa4>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]

}
 800103a:	bf00      	nop
 800103c:	371c      	adds	r7, #28
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000

0800104c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2 , (uint8_t *)&ch, 1, 0xFFFF);
 8001054:	1d39      	adds	r1, r7, #4
 8001056:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800105a:	2201      	movs	r2, #1
 800105c:	4803      	ldr	r0, [pc, #12]	; (800106c <__io_putchar+0x20>)
 800105e:	f003 ffc8 	bl	8004ff2 <HAL_UART_Transmit>
	return ch;
 8001062:	687b      	ldr	r3, [r7, #4]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000a84 	.word	0x20000a84

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001074:	f000 fd00 	bl	8001a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001078:	f000 f9f8 	bl	800146c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107c:	f7ff ff92 	bl	8000fa4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001080:	f7ff ff46 	bl	8000f10 <MX_DMA_Init>
  MX_SPI1_Init();
 8001084:	f000 fa5a 	bl	800153c <MX_SPI1_Init>
  MX_ADC1_Init();
 8001088:	f7ff f8fa 	bl	8000280 <MX_ADC1_Init>
  MX_ADC2_Init();
 800108c:	f7ff fa14 	bl	80004b8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001090:	f7ff fac6 	bl	8000620 <MX_ADC3_Init>
  MX_ADC4_Init();
 8001094:	f7ff fbfc 	bl	8000890 <MX_ADC4_Init>
  MX_USART2_UART_Init();
 8001098:	f000 fc32 	bl	8001900 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_Value, 110);
 800109c:	226e      	movs	r2, #110	; 0x6e
 800109e:	4914      	ldr	r1, [pc, #80]	; (80010f0 <main+0x80>)
 80010a0:	4814      	ldr	r0, [pc, #80]	; (80010f4 <main+0x84>)
 80010a2:	f000 ff8b 	bl	8001fbc <HAL_ADC_Start_DMA>
		for(i = 0,ad1 =0,ad2=0,ad3=0,ad4=0,ad5 =0,ad6=0,ad7=0,ad8=0,ad9 =0,ad10=0,ad11=0; i < 110;)
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <main+0x88>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	801a      	strh	r2, [r3, #0]
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <main+0x8c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <main+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <main+0x94>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <main+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <main+0x9c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <main+0xa0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	4b10      	ldr	r3, [pc, #64]	; (8001114 <main+0xa4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <main+0xa8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <main+0xac>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <main+0xb0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <main+0xb4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	e0c0      	b.n	8001272 <main+0x202>
 80010f0:	20000694 	.word	0x20000694
 80010f4:	20000178 	.word	0x20000178
 80010f8:	20000850 	.word	0x20000850
 80010fc:	2000084c 	.word	0x2000084c
 8001100:	20000854 	.word	0x20000854
 8001104:	20000888 	.word	0x20000888
 8001108:	2000068c 	.word	0x2000068c
 800110c:	20000890 	.word	0x20000890
 8001110:	200008c0 	.word	0x200008c0
 8001114:	2000088c 	.word	0x2000088c
 8001118:	20000884 	.word	0x20000884
 800111c:	200002f0 	.word	0x200002f0
 8001120:	20000880 	.word	0x20000880
 8001124:	20000690 	.word	0x20000690
		{
			ad1 += ADC_Value[i++];
 8001128:	4b9c      	ldr	r3, [pc, #624]	; (800139c <main+0x32c>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	b291      	uxth	r1, r2
 8001130:	4a9a      	ldr	r2, [pc, #616]	; (800139c <main+0x32c>)
 8001132:	8011      	strh	r1, [r2, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b9a      	ldr	r3, [pc, #616]	; (80013a0 <main+0x330>)
 8001138:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800113c:	4b99      	ldr	r3, [pc, #612]	; (80013a4 <main+0x334>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4413      	add	r3, r2
 8001142:	4a98      	ldr	r2, [pc, #608]	; (80013a4 <main+0x334>)
 8001144:	6013      	str	r3, [r2, #0]
			ad2 += ADC_Value[i++];
 8001146:	4b95      	ldr	r3, [pc, #596]	; (800139c <main+0x32c>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	b291      	uxth	r1, r2
 800114e:	4a93      	ldr	r2, [pc, #588]	; (800139c <main+0x32c>)
 8001150:	8011      	strh	r1, [r2, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	4b92      	ldr	r3, [pc, #584]	; (80013a0 <main+0x330>)
 8001156:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800115a:	4b93      	ldr	r3, [pc, #588]	; (80013a8 <main+0x338>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a91      	ldr	r2, [pc, #580]	; (80013a8 <main+0x338>)
 8001162:	6013      	str	r3, [r2, #0]
			ad3 += ADC_Value[i++];
 8001164:	4b8d      	ldr	r3, [pc, #564]	; (800139c <main+0x32c>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	1c5a      	adds	r2, r3, #1
 800116a:	b291      	uxth	r1, r2
 800116c:	4a8b      	ldr	r2, [pc, #556]	; (800139c <main+0x32c>)
 800116e:	8011      	strh	r1, [r2, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b8b      	ldr	r3, [pc, #556]	; (80013a0 <main+0x330>)
 8001174:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001178:	4b8c      	ldr	r3, [pc, #560]	; (80013ac <main+0x33c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4413      	add	r3, r2
 800117e:	4a8b      	ldr	r2, [pc, #556]	; (80013ac <main+0x33c>)
 8001180:	6013      	str	r3, [r2, #0]
      ad4 += ADC_Value[i++];
 8001182:	4b86      	ldr	r3, [pc, #536]	; (800139c <main+0x32c>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	b291      	uxth	r1, r2
 800118a:	4a84      	ldr	r2, [pc, #528]	; (800139c <main+0x32c>)
 800118c:	8011      	strh	r1, [r2, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	4b83      	ldr	r3, [pc, #524]	; (80013a0 <main+0x330>)
 8001192:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001196:	4b86      	ldr	r3, [pc, #536]	; (80013b0 <main+0x340>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a84      	ldr	r2, [pc, #528]	; (80013b0 <main+0x340>)
 800119e:	6013      	str	r3, [r2, #0]
      ad5 += ADC_Value[i++];
 80011a0:	4b7e      	ldr	r3, [pc, #504]	; (800139c <main+0x32c>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	b291      	uxth	r1, r2
 80011a8:	4a7c      	ldr	r2, [pc, #496]	; (800139c <main+0x32c>)
 80011aa:	8011      	strh	r1, [r2, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b7c      	ldr	r3, [pc, #496]	; (80013a0 <main+0x330>)
 80011b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011b4:	4b7f      	ldr	r3, [pc, #508]	; (80013b4 <main+0x344>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a7e      	ldr	r2, [pc, #504]	; (80013b4 <main+0x344>)
 80011bc:	6013      	str	r3, [r2, #0]
      ad6 += ADC_Value[i++];
 80011be:	4b77      	ldr	r3, [pc, #476]	; (800139c <main+0x32c>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	b291      	uxth	r1, r2
 80011c6:	4a75      	ldr	r2, [pc, #468]	; (800139c <main+0x32c>)
 80011c8:	8011      	strh	r1, [r2, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b74      	ldr	r3, [pc, #464]	; (80013a0 <main+0x330>)
 80011ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011d2:	4b79      	ldr	r3, [pc, #484]	; (80013b8 <main+0x348>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a77      	ldr	r2, [pc, #476]	; (80013b8 <main+0x348>)
 80011da:	6013      	str	r3, [r2, #0]
      ad7 += ADC_Value[i++];
 80011dc:	4b6f      	ldr	r3, [pc, #444]	; (800139c <main+0x32c>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	b291      	uxth	r1, r2
 80011e4:	4a6d      	ldr	r2, [pc, #436]	; (800139c <main+0x32c>)
 80011e6:	8011      	strh	r1, [r2, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b6d      	ldr	r3, [pc, #436]	; (80013a0 <main+0x330>)
 80011ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011f0:	4b72      	ldr	r3, [pc, #456]	; (80013bc <main+0x34c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a71      	ldr	r2, [pc, #452]	; (80013bc <main+0x34c>)
 80011f8:	6013      	str	r3, [r2, #0]
      ad8 += ADC_Value[i++];
 80011fa:	4b68      	ldr	r3, [pc, #416]	; (800139c <main+0x32c>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	b291      	uxth	r1, r2
 8001202:	4a66      	ldr	r2, [pc, #408]	; (800139c <main+0x32c>)
 8001204:	8011      	strh	r1, [r2, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	4b65      	ldr	r3, [pc, #404]	; (80013a0 <main+0x330>)
 800120a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800120e:	4b6c      	ldr	r3, [pc, #432]	; (80013c0 <main+0x350>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a6a      	ldr	r2, [pc, #424]	; (80013c0 <main+0x350>)
 8001216:	6013      	str	r3, [r2, #0]
      ad9 += ADC_Value[i++];
 8001218:	4b60      	ldr	r3, [pc, #384]	; (800139c <main+0x32c>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	b291      	uxth	r1, r2
 8001220:	4a5e      	ldr	r2, [pc, #376]	; (800139c <main+0x32c>)
 8001222:	8011      	strh	r1, [r2, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b5e      	ldr	r3, [pc, #376]	; (80013a0 <main+0x330>)
 8001228:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800122c:	4b65      	ldr	r3, [pc, #404]	; (80013c4 <main+0x354>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4413      	add	r3, r2
 8001232:	4a64      	ldr	r2, [pc, #400]	; (80013c4 <main+0x354>)
 8001234:	6013      	str	r3, [r2, #0]
      ad10 += ADC_Value[i++];
 8001236:	4b59      	ldr	r3, [pc, #356]	; (800139c <main+0x32c>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	b291      	uxth	r1, r2
 800123e:	4a57      	ldr	r2, [pc, #348]	; (800139c <main+0x32c>)
 8001240:	8011      	strh	r1, [r2, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	4b56      	ldr	r3, [pc, #344]	; (80013a0 <main+0x330>)
 8001246:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800124a:	4b5f      	ldr	r3, [pc, #380]	; (80013c8 <main+0x358>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	4a5d      	ldr	r2, [pc, #372]	; (80013c8 <main+0x358>)
 8001252:	6013      	str	r3, [r2, #0]
      ad11 += ADC_Value[i++];
 8001254:	4b51      	ldr	r3, [pc, #324]	; (800139c <main+0x32c>)
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	b291      	uxth	r1, r2
 800125c:	4a4f      	ldr	r2, [pc, #316]	; (800139c <main+0x32c>)
 800125e:	8011      	strh	r1, [r2, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b4f      	ldr	r3, [pc, #316]	; (80013a0 <main+0x330>)
 8001264:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001268:	4b58      	ldr	r3, [pc, #352]	; (80013cc <main+0x35c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4413      	add	r3, r2
 800126e:	4a57      	ldr	r2, [pc, #348]	; (80013cc <main+0x35c>)
 8001270:	6013      	str	r3, [r2, #0]
		for(i = 0,ad1 =0,ad2=0,ad3=0,ad4=0,ad5 =0,ad6=0,ad7=0,ad8=0,ad9 =0,ad10=0,ad11=0; i < 110;)
 8001272:	4b4a      	ldr	r3, [pc, #296]	; (800139c <main+0x32c>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	2b6d      	cmp	r3, #109	; 0x6d
 8001278:	f67f af56 	bls.w	8001128 <main+0xb8>
    }
    
     ad1 /= 10;
 800127c:	4b49      	ldr	r3, [pc, #292]	; (80013a4 <main+0x334>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a53      	ldr	r2, [pc, #332]	; (80013d0 <main+0x360>)
 8001282:	fba2 2303 	umull	r2, r3, r2, r3
 8001286:	08db      	lsrs	r3, r3, #3
 8001288:	4a46      	ldr	r2, [pc, #280]	; (80013a4 <main+0x334>)
 800128a:	6013      	str	r3, [r2, #0]
     ad2 /= 10;
 800128c:	4b46      	ldr	r3, [pc, #280]	; (80013a8 <main+0x338>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a4f      	ldr	r2, [pc, #316]	; (80013d0 <main+0x360>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	08db      	lsrs	r3, r3, #3
 8001298:	4a43      	ldr	r2, [pc, #268]	; (80013a8 <main+0x338>)
 800129a:	6013      	str	r3, [r2, #0]
     ad3 /= 10;
 800129c:	4b43      	ldr	r3, [pc, #268]	; (80013ac <main+0x33c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a4b      	ldr	r2, [pc, #300]	; (80013d0 <main+0x360>)
 80012a2:	fba2 2303 	umull	r2, r3, r2, r3
 80012a6:	08db      	lsrs	r3, r3, #3
 80012a8:	4a40      	ldr	r2, [pc, #256]	; (80013ac <main+0x33c>)
 80012aa:	6013      	str	r3, [r2, #0]
     ad4 /= 10;
 80012ac:	4b40      	ldr	r3, [pc, #256]	; (80013b0 <main+0x340>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a47      	ldr	r2, [pc, #284]	; (80013d0 <main+0x360>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	08db      	lsrs	r3, r3, #3
 80012b8:	4a3d      	ldr	r2, [pc, #244]	; (80013b0 <main+0x340>)
 80012ba:	6013      	str	r3, [r2, #0]
     ad5 /= 10;
 80012bc:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <main+0x344>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a43      	ldr	r2, [pc, #268]	; (80013d0 <main+0x360>)
 80012c2:	fba2 2303 	umull	r2, r3, r2, r3
 80012c6:	08db      	lsrs	r3, r3, #3
 80012c8:	4a3a      	ldr	r2, [pc, #232]	; (80013b4 <main+0x344>)
 80012ca:	6013      	str	r3, [r2, #0]
     ad6 /= 10;
 80012cc:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <main+0x348>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a3f      	ldr	r2, [pc, #252]	; (80013d0 <main+0x360>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	4a37      	ldr	r2, [pc, #220]	; (80013b8 <main+0x348>)
 80012da:	6013      	str	r3, [r2, #0]
     ad7 /= 10;
 80012dc:	4b37      	ldr	r3, [pc, #220]	; (80013bc <main+0x34c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a3b      	ldr	r2, [pc, #236]	; (80013d0 <main+0x360>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	08db      	lsrs	r3, r3, #3
 80012e8:	4a34      	ldr	r2, [pc, #208]	; (80013bc <main+0x34c>)
 80012ea:	6013      	str	r3, [r2, #0]
     ad8 /= 10;
 80012ec:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <main+0x350>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a37      	ldr	r2, [pc, #220]	; (80013d0 <main+0x360>)
 80012f2:	fba2 2303 	umull	r2, r3, r2, r3
 80012f6:	08db      	lsrs	r3, r3, #3
 80012f8:	4a31      	ldr	r2, [pc, #196]	; (80013c0 <main+0x350>)
 80012fa:	6013      	str	r3, [r2, #0]
     ad9 /= 10;
 80012fc:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <main+0x354>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a33      	ldr	r2, [pc, #204]	; (80013d0 <main+0x360>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	08db      	lsrs	r3, r3, #3
 8001308:	4a2e      	ldr	r2, [pc, #184]	; (80013c4 <main+0x354>)
 800130a:	6013      	str	r3, [r2, #0]
     ad10 /= 10;
 800130c:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <main+0x358>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a2f      	ldr	r2, [pc, #188]	; (80013d0 <main+0x360>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	08db      	lsrs	r3, r3, #3
 8001318:	4a2b      	ldr	r2, [pc, #172]	; (80013c8 <main+0x358>)
 800131a:	6013      	str	r3, [r2, #0]
     ad11 /= 10;
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <main+0x35c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a2b      	ldr	r2, [pc, #172]	; (80013d0 <main+0x360>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	08db      	lsrs	r3, r3, #3
 8001328:	4a28      	ldr	r2, [pc, #160]	; (80013cc <main+0x35c>)
 800132a:	6013      	str	r3, [r2, #0]
//      printf(" info:ADC1_chanel7_value=%ld \r\n", ADC_Value[7]);
//      printf(" info:ADC1_chanel8_value=%ld \r\n", ADC_Value[8]);
//      printf(" info:ADC1_chanel9_value=%ld \r\n", ADC_Value[9]);
//      printf(" info:ADC1_chanel10_value=%ld \r\n", ADC_Value[10]);
//      printf(" info:ADC1_chanel11_value=%ld \r\n", ADC_Value[11]);
    printf(" info:ADC1_chanel1_value=%ld \r\n", ad1);
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <main+0x334>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	4828      	ldr	r0, [pc, #160]	; (80013d4 <main+0x364>)
 8001334:	f004 fa62 	bl	80057fc <iprintf>
    printf(" info:ADC1_chanel2_value=%ld \r\n", ad2);
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <main+0x338>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	4826      	ldr	r0, [pc, #152]	; (80013d8 <main+0x368>)
 8001340:	f004 fa5c 	bl	80057fc <iprintf>
    printf(" info:ADC1_chanel3_value=%ld \r\n", ad3);
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <main+0x33c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	4824      	ldr	r0, [pc, #144]	; (80013dc <main+0x36c>)
 800134c:	f004 fa56 	bl	80057fc <iprintf>
    printf(" info:ADC1_chanel4_value=%ld \r\n", ad4);
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <main+0x340>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	4822      	ldr	r0, [pc, #136]	; (80013e0 <main+0x370>)
 8001358:	f004 fa50 	bl	80057fc <iprintf>
    printf(" info:ADC1_chanel5_value=%ld \r\n", ad5);
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <main+0x344>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	4820      	ldr	r0, [pc, #128]	; (80013e4 <main+0x374>)
 8001364:	f004 fa4a 	bl	80057fc <iprintf>
    printf(" info:ADC1_chanel6_value=%ld \r\n", ad6);
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <main+0x348>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	481e      	ldr	r0, [pc, #120]	; (80013e8 <main+0x378>)
 8001370:	f004 fa44 	bl	80057fc <iprintf>
    printf(" info:ADC1_chanel7_value=%ld \r\n", ad7);
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <main+0x34c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	481c      	ldr	r0, [pc, #112]	; (80013ec <main+0x37c>)
 800137c:	f004 fa3e 	bl	80057fc <iprintf>
    printf(" info:ADC1_chanel8_value=%ld \r\n", ad8);
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <main+0x350>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	481a      	ldr	r0, [pc, #104]	; (80013f0 <main+0x380>)
 8001388:	f004 fa38 	bl	80057fc <iprintf>
    printf(" info:ADC1_chanel9_value=%ld \r\n", ad9);
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <main+0x354>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	4818      	ldr	r0, [pc, #96]	; (80013f4 <main+0x384>)
 8001394:	f004 fa32 	bl	80057fc <iprintf>
 8001398:	e02e      	b.n	80013f8 <main+0x388>
 800139a:	bf00      	nop
 800139c:	20000850 	.word	0x20000850
 80013a0:	20000694 	.word	0x20000694
 80013a4:	2000084c 	.word	0x2000084c
 80013a8:	20000854 	.word	0x20000854
 80013ac:	20000888 	.word	0x20000888
 80013b0:	2000068c 	.word	0x2000068c
 80013b4:	20000890 	.word	0x20000890
 80013b8:	200008c0 	.word	0x200008c0
 80013bc:	2000088c 	.word	0x2000088c
 80013c0:	20000884 	.word	0x20000884
 80013c4:	200002f0 	.word	0x200002f0
 80013c8:	20000880 	.word	0x20000880
 80013cc:	20000690 	.word	0x20000690
 80013d0:	cccccccd 	.word	0xcccccccd
 80013d4:	080066c0 	.word	0x080066c0
 80013d8:	080066e0 	.word	0x080066e0
 80013dc:	08006700 	.word	0x08006700
 80013e0:	08006720 	.word	0x08006720
 80013e4:	08006740 	.word	0x08006740
 80013e8:	08006760 	.word	0x08006760
 80013ec:	08006780 	.word	0x08006780
 80013f0:	080067a0 	.word	0x080067a0
 80013f4:	080067c0 	.word	0x080067c0
    printf(" info:ADC1_chanel10_value=%ld \r\n", ad10);
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <main+0x3d8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	4813      	ldr	r0, [pc, #76]	; (800144c <main+0x3dc>)
 8001400:	f004 f9fc 	bl	80057fc <iprintf>
    printf(" info:ADC1_chanel11_value=%ld \r\n", ad11);
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <main+0x3e0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	4812      	ldr	r0, [pc, #72]	; (8001454 <main+0x3e4>)
 800140c:	f004 f9f6 	bl	80057fc <iprintf>
    printf(" info:ADC1V_chanel9_value=%ld \r\n", ADC_Value[9]);
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <main+0x3e8>)
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	4619      	mov	r1, r3
 8001416:	4811      	ldr	r0, [pc, #68]	; (800145c <main+0x3ec>)
 8001418:	f004 f9f0 	bl	80057fc <iprintf>
    printf(" info:ADC1V_chanel10_value=%ld \r\n", ADC_Value[10]);
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <main+0x3e8>)
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	4619      	mov	r1, r3
 8001422:	480f      	ldr	r0, [pc, #60]	; (8001460 <main+0x3f0>)
 8001424:	f004 f9ea 	bl	80057fc <iprintf>
    printf(" info:ADC1V_chanel11_value=%ld \r\n", ADC_Value[11]);
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <main+0x3e8>)
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	4619      	mov	r1, r3
 800142e:	480d      	ldr	r0, [pc, #52]	; (8001464 <main+0x3f4>)
 8001430:	f004 f9e4 	bl	80057fc <iprintf>
    printf(" info:ADC1V_chanel0_value=%ld \r\n", ADC_Value[0]);
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <main+0x3e8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	480b      	ldr	r0, [pc, #44]	; (8001468 <main+0x3f8>)
 800143c:	f004 f9de 	bl	80057fc <iprintf>
		HAL_Delay(50);
 8001440:	2032      	movs	r0, #50	; 0x32
 8001442:	f000 fb7f 	bl	8001b44 <HAL_Delay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_Value, 110);
 8001446:	e629      	b.n	800109c <main+0x2c>
 8001448:	20000880 	.word	0x20000880
 800144c:	080067e0 	.word	0x080067e0
 8001450:	20000690 	.word	0x20000690
 8001454:	08006804 	.word	0x08006804
 8001458:	20000694 	.word	0x20000694
 800145c:	08006828 	.word	0x08006828
 8001460:	0800684c 	.word	0x0800684c
 8001464:	08006870 	.word	0x08006870
 8001468:	08006894 	.word	0x08006894

0800146c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b0a6      	sub	sp, #152	; 0x98
 8001470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001472:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001476:	2228      	movs	r2, #40	; 0x28
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f004 f9b6 	bl	80057ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001480:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2258      	movs	r2, #88	; 0x58
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f004 f9a8 	bl	80057ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800149c:	2302      	movs	r3, #2
 800149e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a0:	2301      	movs	r3, #1
 80014a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a4:	2310      	movs	r3, #16
 80014a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014aa:	2302      	movs	r3, #2
 80014ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 f92f 	bl	800372c <HAL_RCC_OscConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80014d4:	f000 f82d 	bl	8001532 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d8:	230f      	movs	r3, #15
 80014da:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014dc:	2300      	movs	r3, #0
 80014de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 f830 	bl	8004558 <HAL_RCC_ClockConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014fe:	f000 f818 	bl	8001532 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8001502:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8001506:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800150c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8001512:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	4618      	mov	r0, r3
 800151c:	f003 fa52 	bl	80049c4 <HAL_RCCEx_PeriphCLKConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001526:	f000 f804 	bl	8001532 <Error_Handler>
  }
}
 800152a:	bf00      	nop
 800152c:	3798      	adds	r7, #152	; 0x98
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001536:	b672      	cpsid	i
}
 8001538:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800153a:	e7fe      	b.n	800153a <Error_Handler+0x8>

0800153c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <MX_SPI1_Init+0x74>)
 8001542:	4a1c      	ldr	r2, [pc, #112]	; (80015b4 <MX_SPI1_Init+0x78>)
 8001544:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <MX_SPI1_Init+0x74>)
 8001548:	f44f 7282 	mov.w	r2, #260	; 0x104
 800154c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <MX_SPI1_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001554:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <MX_SPI1_Init+0x74>)
 8001556:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800155a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <MX_SPI1_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <MX_SPI1_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_SPI1_Init+0x74>)
 800156a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <MX_SPI1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_SPI1_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_SPI1_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <MX_SPI1_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_SPI1_Init+0x74>)
 800158a:	2207      	movs	r2, #7
 800158c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <MX_SPI1_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MX_SPI1_Init+0x74>)
 8001596:	2208      	movs	r2, #8
 8001598:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_SPI1_Init+0x74>)
 800159c:	f003 fc30 	bl	8004e00 <HAL_SPI_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015a6:	f7ff ffc4 	bl	8001532 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200009dc 	.word	0x200009dc
 80015b4:	40013000 	.word	0x40013000

080015b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a2a      	ldr	r2, [pc, #168]	; (8001680 <HAL_SPI_MspInit+0xc8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d14d      	bne.n	8001676 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015da:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <HAL_SPI_MspInit+0xcc>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	4a29      	ldr	r2, [pc, #164]	; (8001684 <HAL_SPI_MspInit+0xcc>)
 80015e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015e4:	6193      	str	r3, [r2, #24]
 80015e6:	4b27      	ldr	r3, [pc, #156]	; (8001684 <HAL_SPI_MspInit+0xcc>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	4b24      	ldr	r3, [pc, #144]	; (8001684 <HAL_SPI_MspInit+0xcc>)
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	4a23      	ldr	r2, [pc, #140]	; (8001684 <HAL_SPI_MspInit+0xcc>)
 80015f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015fc:	6153      	str	r3, [r2, #20]
 80015fe:	4b21      	ldr	r3, [pc, #132]	; (8001684 <HAL_SPI_MspInit+0xcc>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800160a:	2338      	movs	r3, #56	; 0x38
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800161a:	2305      	movs	r3, #5
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4818      	ldr	r0, [pc, #96]	; (8001688 <HAL_SPI_MspInit+0xd0>)
 8001626:	f001 fef7 	bl	8003418 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_SPI_MspInit+0xd4>)
 800162c:	4a18      	ldr	r2, [pc, #96]	; (8001690 <HAL_SPI_MspInit+0xd8>)
 800162e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_SPI_MspInit+0xd4>)
 8001632:	2210      	movs	r2, #16
 8001634:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_SPI_MspInit+0xd4>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <HAL_SPI_MspInit+0xd4>)
 800163e:	2280      	movs	r2, #128	; 0x80
 8001640:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_SPI_MspInit+0xd4>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001648:	4b10      	ldr	r3, [pc, #64]	; (800168c <HAL_SPI_MspInit+0xd4>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <HAL_SPI_MspInit+0xd4>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001654:	4b0d      	ldr	r3, [pc, #52]	; (800168c <HAL_SPI_MspInit+0xd4>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800165a:	480c      	ldr	r0, [pc, #48]	; (800168c <HAL_SPI_MspInit+0xd4>)
 800165c:	f001 fd29 	bl	80030b2 <HAL_DMA_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_SPI_MspInit+0xb2>
    {
      Error_Handler();
 8001666:	f7ff ff64 	bl	8001532 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a07      	ldr	r2, [pc, #28]	; (800168c <HAL_SPI_MspInit+0xd4>)
 800166e:	655a      	str	r2, [r3, #84]	; 0x54
 8001670:	4a06      	ldr	r2, [pc, #24]	; (800168c <HAL_SPI_MspInit+0xd4>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001676:	bf00      	nop
 8001678:	3728      	adds	r7, #40	; 0x28
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40013000 	.word	0x40013000
 8001684:	40021000 	.word	0x40021000
 8001688:	48000400 	.word	0x48000400
 800168c:	20000a40 	.word	0x20000a40
 8001690:	40020030 	.word	0x40020030

08001694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_MspInit+0x44>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <HAL_MspInit+0x44>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6193      	str	r3, [r2, #24]
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_MspInit+0x44>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_MspInit+0x44>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <HAL_MspInit+0x44>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	61d3      	str	r3, [r2, #28]
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_MspInit+0x44>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <NMI_Handler+0x4>

080016e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <HardFault_Handler+0x4>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <MemManage_Handler+0x4>

080016ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001728:	f000 f9ec 	bl	8001b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <DMA1_Channel1_IRQHandler+0x10>)
 8001736:	f001 fd62 	bl	80031fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000218 	.word	0x20000218

08001744 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <DMA1_Channel3_IRQHandler+0x10>)
 800174a:	f001 fd58 	bl	80031fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000a40 	.word	0x20000a40

08001758 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <DMA2_Channel1_IRQHandler+0x10>)
 800175e:	f001 fd4e 	bl	80031fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200002ac 	.word	0x200002ac

0800176c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <DMA2_Channel2_IRQHandler+0x10>)
 8001772:	f001 fd44 	bl	80031fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200000a0 	.word	0x200000a0

08001780 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <DMA2_Channel5_IRQHandler+0x10>)
 8001786:	f001 fd3a 	bl	80031fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000134 	.word	0x20000134

08001794 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	e00a      	b.n	80017bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017a6:	f3af 8000 	nop.w
 80017aa:	4601      	mov	r1, r0
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	60ba      	str	r2, [r7, #8]
 80017b2:	b2ca      	uxtb	r2, r1
 80017b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3301      	adds	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dbf0      	blt.n	80017a6 <_read+0x12>
	}

return len;
 80017c4:	687b      	ldr	r3, [r7, #4]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	e009      	b.n	80017f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	60ba      	str	r2, [r7, #8]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fc2f 	bl	800104c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	3301      	adds	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	dbf1      	blt.n	80017e0 <_write+0x12>
	}
	return len;
 80017fc:	687b      	ldr	r3, [r7, #4]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <_close>:

int _close(int file)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
	return -1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800182e:	605a      	str	r2, [r3, #4]
	return 0;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <_isatty>:

int _isatty(int file)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
	return 1;
 8001846:	2301      	movs	r3, #1
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
	return 0;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001878:	4a14      	ldr	r2, [pc, #80]	; (80018cc <_sbrk+0x5c>)
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <_sbrk+0x60>)
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <_sbrk+0x64>)
 800188e:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <_sbrk+0x68>)
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	429a      	cmp	r2, r3
 800189e:	d207      	bcs.n	80018b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a0:	f003 ff7a 	bl	8005798 <__errno>
 80018a4:	4603      	mov	r3, r0
 80018a6:	220c      	movs	r2, #12
 80018a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ae:	e009      	b.n	80018c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <_sbrk+0x64>)
 80018c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20010000 	.word	0x20010000
 80018d0:	00000400 	.word	0x00000400
 80018d4:	20000094 	.word	0x20000094
 80018d8:	20000b20 	.word	0x20000b20

080018dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <SystemInit+0x20>)
 80018e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <SystemInit+0x20>)
 80018e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <MX_USART2_UART_Init+0x58>)
 8001906:	4a15      	ldr	r2, [pc, #84]	; (800195c <MX_USART2_UART_Init+0x5c>)
 8001908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800190a:	4b13      	ldr	r3, [pc, #76]	; (8001958 <MX_USART2_UART_Init+0x58>)
 800190c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <MX_USART2_UART_Init+0x58>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <MX_USART2_UART_Init+0x58>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <MX_USART2_UART_Init+0x58>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <MX_USART2_UART_Init+0x58>)
 8001926:	220c      	movs	r2, #12
 8001928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <MX_USART2_UART_Init+0x58>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <MX_USART2_UART_Init+0x58>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <MX_USART2_UART_Init+0x58>)
 8001938:	2200      	movs	r2, #0
 800193a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <MX_USART2_UART_Init+0x58>)
 800193e:	2200      	movs	r2, #0
 8001940:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <MX_USART2_UART_Init+0x58>)
 8001944:	f003 fb07 	bl	8004f56 <HAL_UART_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800194e:	f7ff fdf0 	bl	8001532 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000a84 	.word	0x20000a84
 800195c:	40004400 	.word	0x40004400

08001960 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a26      	ldr	r2, [pc, #152]	; (8001a18 <HAL_UART_MspInit+0xb8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d145      	bne.n	8001a0e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <HAL_UART_MspInit+0xbc>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a25      	ldr	r2, [pc, #148]	; (8001a1c <HAL_UART_MspInit+0xbc>)
 8001988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800198c:	61d3      	str	r3, [r2, #28]
 800198e:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <HAL_UART_MspInit+0xbc>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <HAL_UART_MspInit+0xbc>)
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	4a1f      	ldr	r2, [pc, #124]	; (8001a1c <HAL_UART_MspInit+0xbc>)
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	6153      	str	r3, [r2, #20]
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_UART_MspInit+0xbc>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <HAL_UART_MspInit+0xbc>)
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	4a19      	ldr	r2, [pc, #100]	; (8001a1c <HAL_UART_MspInit+0xbc>)
 80019b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019bc:	6153      	str	r3, [r2, #20]
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <HAL_UART_MspInit+0xbc>)
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019dc:	2307      	movs	r3, #7
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ea:	f001 fd15 	bl	8003418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019ee:	2320      	movs	r3, #32
 80019f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019fe:	2307      	movs	r3, #7
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	4805      	ldr	r0, [pc, #20]	; (8001a20 <HAL_UART_MspInit+0xc0>)
 8001a0a:	f001 fd05 	bl	8003418 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a0e:	bf00      	nop
 8001a10:	3728      	adds	r7, #40	; 0x28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40004400 	.word	0x40004400
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	48000c00 	.word	0x48000c00

08001a24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a5c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a28:	480d      	ldr	r0, [pc, #52]	; (8001a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a2a:	490e      	ldr	r1, [pc, #56]	; (8001a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a2c:	4a0e      	ldr	r2, [pc, #56]	; (8001a68 <LoopForever+0xe>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a30:	e002      	b.n	8001a38 <LoopCopyDataInit>

08001a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a36:	3304      	adds	r3, #4

08001a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a3c:	d3f9      	bcc.n	8001a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a40:	4c0b      	ldr	r4, [pc, #44]	; (8001a70 <LoopForever+0x16>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a44:	e001      	b.n	8001a4a <LoopFillZerobss>

08001a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a48:	3204      	adds	r2, #4

08001a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a4c:	d3fb      	bcc.n	8001a46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a4e:	f7ff ff45 	bl	80018dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a52:	f003 fea7 	bl	80057a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a56:	f7ff fb0b 	bl	8001070 <main>

08001a5a <LoopForever>:

LoopForever:
    b LoopForever
 8001a5a:	e7fe      	b.n	8001a5a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a68:	08006990 	.word	0x08006990
  ldr r2, =_sbss
 8001a6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a70:	20000b1c 	.word	0x20000b1c

08001a74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a74:	e7fe      	b.n	8001a74 <ADC1_2_IRQHandler>
	...

08001a78 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <HAL_Init+0x28>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <HAL_Init+0x28>)
 8001a82:	f043 0310 	orr.w	r3, r3, #16
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a88:	2003      	movs	r0, #3
 8001a8a:	f001 fad1 	bl	8003030 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f000 f808 	bl	8001aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a94:	f7ff fdfe 	bl	8001694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40022000 	.word	0x40022000

08001aa4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_InitTick+0x54>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_InitTick+0x58>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 fae9 	bl	800309a <HAL_SYSTICK_Config>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00e      	b.n	8001af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b0f      	cmp	r3, #15
 8001ad6:	d80a      	bhi.n	8001aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ae0:	f001 fab1 	bl	8003046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae4:	4a06      	ldr	r2, [pc, #24]	; (8001b00 <HAL_InitTick+0x5c>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e000      	b.n	8001af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000000 	.word	0x20000000
 8001afc:	20000008 	.word	0x20000008
 8001b00:	20000004 	.word	0x20000004

08001b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x20>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x24>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_IncTick+0x24>)
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000008 	.word	0x20000008
 8001b28:	20000b08 	.word	0x20000b08

08001b2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_GetTick+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000b08 	.word	0x20000b08

08001b44 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff ffee 	bl	8001b2c <HAL_GetTick>
 8001b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b5c:	d005      	beq.n	8001b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_Delay+0x44>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b6a:	bf00      	nop
 8001b6c:	f7ff ffde 	bl	8001b2c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d8f7      	bhi.n	8001b6c <HAL_Delay+0x28>
  {
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000008 	.word	0x20000008

08001b8c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b09a      	sub	sp, #104	; 0x68
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e1e3      	b.n	8001fb0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d176      	bne.n	8001ce8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d152      	bne.n	8001ca8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7fe feeb 	bl	80009f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d13b      	bne.n	8001ca8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f001 f8cd 	bl	8002dd0 <ADC_Disable>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d12f      	bne.n	8001ca8 <HAL_ADC_Init+0xe0>
 8001c48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d12b      	bne.n	8001ca8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c58:	f023 0302 	bic.w	r3, r3, #2
 8001c5c:	f043 0202 	orr.w	r2, r3, #2
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c72:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c82:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c84:	4b92      	ldr	r3, [pc, #584]	; (8001ed0 <HAL_ADC_Init+0x308>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a92      	ldr	r2, [pc, #584]	; (8001ed4 <HAL_ADC_Init+0x30c>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	0c9a      	lsrs	r2, r3, #18
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c9a:	e002      	b.n	8001ca2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f9      	bne.n	8001c9c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cc4:	d110      	bne.n	8001ce8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f023 0312 	bic.w	r3, r3, #18
 8001cce:	f043 0210 	orr.w	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f043 0201 	orr.w	r2, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f040 8150 	bne.w	8001f96 <HAL_ADC_Init+0x3ce>
 8001cf6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f040 814b 	bne.w	8001f96 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f040 8143 	bne.w	8001f96 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d18:	f043 0202 	orr.w	r2, r3, #2
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d28:	d004      	beq.n	8001d34 <HAL_ADC_Init+0x16c>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a6a      	ldr	r2, [pc, #424]	; (8001ed8 <HAL_ADC_Init+0x310>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d101      	bne.n	8001d38 <HAL_ADC_Init+0x170>
 8001d34:	4b69      	ldr	r3, [pc, #420]	; (8001edc <HAL_ADC_Init+0x314>)
 8001d36:	e000      	b.n	8001d3a <HAL_ADC_Init+0x172>
 8001d38:	4b69      	ldr	r3, [pc, #420]	; (8001ee0 <HAL_ADC_Init+0x318>)
 8001d3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d44:	d102      	bne.n	8001d4c <HAL_ADC_Init+0x184>
 8001d46:	4b64      	ldr	r3, [pc, #400]	; (8001ed8 <HAL_ADC_Init+0x310>)
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	e01a      	b.n	8001d82 <HAL_ADC_Init+0x1ba>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a61      	ldr	r2, [pc, #388]	; (8001ed8 <HAL_ADC_Init+0x310>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d103      	bne.n	8001d5e <HAL_ADC_Init+0x196>
 8001d56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	e011      	b.n	8001d82 <HAL_ADC_Init+0x1ba>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a60      	ldr	r2, [pc, #384]	; (8001ee4 <HAL_ADC_Init+0x31c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d102      	bne.n	8001d6e <HAL_ADC_Init+0x1a6>
 8001d68:	4b5f      	ldr	r3, [pc, #380]	; (8001ee8 <HAL_ADC_Init+0x320>)
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	e009      	b.n	8001d82 <HAL_ADC_Init+0x1ba>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a5d      	ldr	r2, [pc, #372]	; (8001ee8 <HAL_ADC_Init+0x320>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d102      	bne.n	8001d7e <HAL_ADC_Init+0x1b6>
 8001d78:	4b5a      	ldr	r3, [pc, #360]	; (8001ee4 <HAL_ADC_Init+0x31c>)
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	e001      	b.n	8001d82 <HAL_ADC_Init+0x1ba>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d108      	bne.n	8001da2 <HAL_ADC_Init+0x1da>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_ADC_Init+0x1da>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_ADC_Init+0x1dc>
 8001da2:	2300      	movs	r3, #0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d11c      	bne.n	8001de2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001da8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d010      	beq.n	8001dd0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d107      	bne.n	8001dca <HAL_ADC_Init+0x202>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_ADC_Init+0x202>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_ADC_Init+0x204>
 8001dca:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d108      	bne.n	8001de2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	7e5b      	ldrb	r3, [r3, #25]
 8001de6:	035b      	lsls	r3, r3, #13
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dec:	2a01      	cmp	r2, #1
 8001dee:	d002      	beq.n	8001df6 <HAL_ADC_Init+0x22e>
 8001df0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001df4:	e000      	b.n	8001df8 <HAL_ADC_Init+0x230>
 8001df6:	2200      	movs	r2, #0
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d11b      	bne.n	8001e4e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7e5b      	ldrb	r3, [r3, #25]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d109      	bne.n	8001e32 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	3b01      	subs	r3, #1
 8001e24:	045a      	lsls	r2, r3, #17
 8001e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2e:	663b      	str	r3, [r7, #96]	; 0x60
 8001e30:	e00d      	b.n	8001e4e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001e3a:	f043 0220 	orr.w	r2, r3, #32
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d054      	beq.n	8001f00 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a22      	ldr	r2, [pc, #136]	; (8001ee4 <HAL_ADC_Init+0x31c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d004      	beq.n	8001e6a <HAL_ADC_Init+0x2a2>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a20      	ldr	r2, [pc, #128]	; (8001ee8 <HAL_ADC_Init+0x320>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d140      	bne.n	8001eec <HAL_ADC_Init+0x324>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001e72:	d02a      	beq.n	8001eca <HAL_ADC_Init+0x302>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e7c:	d022      	beq.n	8001ec4 <HAL_ADC_Init+0x2fc>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001e86:	d01a      	beq.n	8001ebe <HAL_ADC_Init+0x2f6>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001e90:	d012      	beq.n	8001eb8 <HAL_ADC_Init+0x2f0>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001e9a:	d00a      	beq.n	8001eb2 <HAL_ADC_Init+0x2ea>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea0:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001ea4:	d002      	beq.n	8001eac <HAL_ADC_Init+0x2e4>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	e023      	b.n	8001ef4 <HAL_ADC_Init+0x32c>
 8001eac:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001eb0:	e020      	b.n	8001ef4 <HAL_ADC_Init+0x32c>
 8001eb2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001eb6:	e01d      	b.n	8001ef4 <HAL_ADC_Init+0x32c>
 8001eb8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001ebc:	e01a      	b.n	8001ef4 <HAL_ADC_Init+0x32c>
 8001ebe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec2:	e017      	b.n	8001ef4 <HAL_ADC_Init+0x32c>
 8001ec4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001ec8:	e014      	b.n	8001ef4 <HAL_ADC_Init+0x32c>
 8001eca:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001ece:	e011      	b.n	8001ef4 <HAL_ADC_Init+0x32c>
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	431bde83 	.word	0x431bde83
 8001ed8:	50000100 	.word	0x50000100
 8001edc:	50000300 	.word	0x50000300
 8001ee0:	50000700 	.word	0x50000700
 8001ee4:	50000400 	.word	0x50000400
 8001ee8:	50000500 	.word	0x50000500
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001efc:	4313      	orrs	r3, r2
 8001efe:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d114      	bne.n	8001f38 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f1c:	f023 0302 	bic.w	r3, r3, #2
 8001f20:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7e1b      	ldrb	r3, [r3, #24]
 8001f26:	039a      	lsls	r2, r3, #14
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4313      	orrs	r3, r2
 8001f32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f34:	4313      	orrs	r3, r2
 8001f36:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <HAL_ADC_Init+0x3f0>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d10c      	bne.n	8001f6e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f023 010f 	bic.w	r1, r3, #15
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	1e5a      	subs	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f6c:	e007      	b.n	8001f7e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 020f 	bic.w	r2, r2, #15
 8001f7c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f023 0303 	bic.w	r3, r3, #3
 8001f8c:	f043 0201 	orr.w	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	641a      	str	r2, [r3, #64]	; 0x40
 8001f94:	e00a      	b.n	8001fac <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f023 0312 	bic.w	r3, r3, #18
 8001f9e:	f043 0210 	orr.w	r2, r3, #16
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001fac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3768      	adds	r7, #104	; 0x68
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	fff0c007 	.word	0xfff0c007

08001fbc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 80f7 	bne.w	80021ca <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_Start_DMA+0x2e>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e0f2      	b.n	80021d0 <HAL_ADC_Start_DMA+0x214>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ffa:	d004      	beq.n	8002006 <HAL_ADC_Start_DMA+0x4a>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a75      	ldr	r2, [pc, #468]	; (80021d8 <HAL_ADC_Start_DMA+0x21c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d109      	bne.n	800201a <HAL_ADC_Start_DMA+0x5e>
 8002006:	4b75      	ldr	r3, [pc, #468]	; (80021dc <HAL_ADC_Start_DMA+0x220>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 031f 	and.w	r3, r3, #31
 800200e:	2b00      	cmp	r3, #0
 8002010:	bf0c      	ite	eq
 8002012:	2301      	moveq	r3, #1
 8002014:	2300      	movne	r3, #0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	e008      	b.n	800202c <HAL_ADC_Start_DMA+0x70>
 800201a:	4b71      	ldr	r3, [pc, #452]	; (80021e0 <HAL_ADC_Start_DMA+0x224>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 031f 	and.w	r3, r3, #31
 8002022:	2b00      	cmp	r3, #0
 8002024:	bf0c      	ite	eq
 8002026:	2301      	moveq	r3, #1
 8002028:	2300      	movne	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80c5 	beq.w	80021bc <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 fe6e 	bl	8002d14 <ADC_Enable>
 8002038:	4603      	mov	r3, r0
 800203a:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800203c:	7dfb      	ldrb	r3, [r7, #23]
 800203e:	2b00      	cmp	r3, #0
 8002040:	f040 80b7 	bne.w	80021b2 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800204c:	f023 0301 	bic.w	r3, r3, #1
 8002050:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002060:	d004      	beq.n	800206c <HAL_ADC_Start_DMA+0xb0>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a5c      	ldr	r2, [pc, #368]	; (80021d8 <HAL_ADC_Start_DMA+0x21c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d106      	bne.n	800207a <HAL_ADC_Start_DMA+0xbe>
 800206c:	4b5b      	ldr	r3, [pc, #364]	; (80021dc <HAL_ADC_Start_DMA+0x220>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	2b00      	cmp	r3, #0
 8002076:	d010      	beq.n	800209a <HAL_ADC_Start_DMA+0xde>
 8002078:	e005      	b.n	8002086 <HAL_ADC_Start_DMA+0xca>
 800207a:	4b59      	ldr	r3, [pc, #356]	; (80021e0 <HAL_ADC_Start_DMA+0x224>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	2b00      	cmp	r3, #0
 8002084:	d009      	beq.n	800209a <HAL_ADC_Start_DMA+0xde>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800208e:	d004      	beq.n	800209a <HAL_ADC_Start_DMA+0xde>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a53      	ldr	r2, [pc, #332]	; (80021e4 <HAL_ADC_Start_DMA+0x228>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d115      	bne.n	80020c6 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d036      	beq.n	8002122 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80020c4:	e02d      	b.n	8002122 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020da:	d004      	beq.n	80020e6 <HAL_ADC_Start_DMA+0x12a>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a3d      	ldr	r2, [pc, #244]	; (80021d8 <HAL_ADC_Start_DMA+0x21c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d10a      	bne.n	80020fc <HAL_ADC_Start_DMA+0x140>
 80020e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf14      	ite	ne
 80020f4:	2301      	movne	r3, #1
 80020f6:	2300      	moveq	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	e008      	b.n	800210e <HAL_ADC_Start_DMA+0x152>
 80020fc:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <HAL_ADC_Start_DMA+0x228>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf14      	ite	ne
 8002108:	2301      	movne	r3, #1
 800210a:	2300      	moveq	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d007      	beq.n	8002122 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800211a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800212a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800212e:	d106      	bne.n	800213e <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002134:	f023 0206 	bic.w	r2, r3, #6
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	645a      	str	r2, [r3, #68]	; 0x44
 800213c:	e002      	b.n	8002144 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002150:	4a25      	ldr	r2, [pc, #148]	; (80021e8 <HAL_ADC_Start_DMA+0x22c>)
 8002152:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002158:	4a24      	ldr	r2, [pc, #144]	; (80021ec <HAL_ADC_Start_DMA+0x230>)
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002160:	4a23      	ldr	r2, [pc, #140]	; (80021f0 <HAL_ADC_Start_DMA+0x234>)
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	221c      	movs	r2, #28
 800216a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0210 	orr.w	r2, r2, #16
 800217a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3340      	adds	r3, #64	; 0x40
 8002196:	4619      	mov	r1, r3
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f000 ffd0 	bl	8003140 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0204 	orr.w	r2, r2, #4
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	e00d      	b.n	80021ce <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021ba:	e008      	b.n	80021ce <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021c8:	e001      	b.n	80021ce <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021ca:	2302      	movs	r3, #2
 80021cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	50000100 	.word	0x50000100
 80021dc:	50000300 	.word	0x50000300
 80021e0:	50000700 	.word	0x50000700
 80021e4:	50000400 	.word	0x50000400
 80021e8:	08002c49 	.word	0x08002c49
 80021ec:	08002cc3 	.word	0x08002cc3
 80021f0:	08002cdf 	.word	0x08002cdf

080021f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b09b      	sub	sp, #108	; 0x6c
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x22>
 8002212:	2302      	movs	r3, #2
 8002214:	e2cb      	b.n	80027ae <HAL_ADC_ConfigChannel+0x5ba>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	f040 82af 	bne.w	800278c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b04      	cmp	r3, #4
 8002234:	d81c      	bhi.n	8002270 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4413      	add	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	461a      	mov	r2, r3
 800224a:	231f      	movs	r3, #31
 800224c:	4093      	lsls	r3, r2
 800224e:	43db      	mvns	r3, r3
 8002250:	4019      	ands	r1, r3
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	fa00 f203 	lsl.w	r2, r0, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	631a      	str	r2, [r3, #48]	; 0x30
 800226e:	e063      	b.n	8002338 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b09      	cmp	r3, #9
 8002276:	d81e      	bhi.n	80022b6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	3b1e      	subs	r3, #30
 800228c:	221f      	movs	r2, #31
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	4019      	ands	r1, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	3b1e      	subs	r3, #30
 80022a8:	fa00 f203 	lsl.w	r2, r0, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	635a      	str	r2, [r3, #52]	; 0x34
 80022b4:	e040      	b.n	8002338 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b0e      	cmp	r3, #14
 80022bc:	d81e      	bhi.n	80022fc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4413      	add	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	3b3c      	subs	r3, #60	; 0x3c
 80022d2:	221f      	movs	r2, #31
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	4019      	ands	r1, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	3b3c      	subs	r3, #60	; 0x3c
 80022ee:	fa00 f203 	lsl.w	r2, r0, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	639a      	str	r2, [r3, #56]	; 0x38
 80022fa:	e01d      	b.n	8002338 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4413      	add	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	3b5a      	subs	r3, #90	; 0x5a
 8002310:	221f      	movs	r2, #31
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	4019      	ands	r1, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	3b5a      	subs	r3, #90	; 0x5a
 800232c:	fa00 f203 	lsl.w	r2, r0, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b00      	cmp	r3, #0
 8002344:	f040 80e5 	bne.w	8002512 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b09      	cmp	r3, #9
 800234e:	d91c      	bls.n	800238a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6999      	ldr	r1, [r3, #24]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4613      	mov	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4413      	add	r3, r2
 8002360:	3b1e      	subs	r3, #30
 8002362:	2207      	movs	r2, #7
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	4019      	ands	r1, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	6898      	ldr	r0, [r3, #8]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	3b1e      	subs	r3, #30
 800237c:	fa00 f203 	lsl.w	r2, r0, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	619a      	str	r2, [r3, #24]
 8002388:	e019      	b.n	80023be <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6959      	ldr	r1, [r3, #20]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4613      	mov	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4413      	add	r3, r2
 800239a:	2207      	movs	r2, #7
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	4019      	ands	r1, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	6898      	ldr	r0, [r3, #8]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	fa00 f203 	lsl.w	r2, r0, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	08db      	lsrs	r3, r3, #3
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	3b01      	subs	r3, #1
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d84f      	bhi.n	8002480 <HAL_ADC_ConfigChannel+0x28c>
 80023e0:	a201      	add	r2, pc, #4	; (adr r2, 80023e8 <HAL_ADC_ConfigChannel+0x1f4>)
 80023e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e6:	bf00      	nop
 80023e8:	080023f9 	.word	0x080023f9
 80023ec:	0800241b 	.word	0x0800241b
 80023f0:	0800243d 	.word	0x0800243d
 80023f4:	0800245f 	.word	0x0800245f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023fe:	4b9f      	ldr	r3, [pc, #636]	; (800267c <HAL_ADC_ConfigChannel+0x488>)
 8002400:	4013      	ands	r3, r2
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	0691      	lsls	r1, r2, #26
 8002408:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800240a:	430a      	orrs	r2, r1
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002416:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002418:	e07e      	b.n	8002518 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002420:	4b96      	ldr	r3, [pc, #600]	; (800267c <HAL_ADC_ConfigChannel+0x488>)
 8002422:	4013      	ands	r3, r2
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	0691      	lsls	r1, r2, #26
 800242a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800242c:	430a      	orrs	r2, r1
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002438:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800243a:	e06d      	b.n	8002518 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002442:	4b8e      	ldr	r3, [pc, #568]	; (800267c <HAL_ADC_ConfigChannel+0x488>)
 8002444:	4013      	ands	r3, r2
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	0691      	lsls	r1, r2, #26
 800244c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800244e:	430a      	orrs	r2, r1
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800245a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800245c:	e05c      	b.n	8002518 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002464:	4b85      	ldr	r3, [pc, #532]	; (800267c <HAL_ADC_ConfigChannel+0x488>)
 8002466:	4013      	ands	r3, r2
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	0691      	lsls	r1, r2, #26
 800246e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002470:	430a      	orrs	r2, r1
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800247c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800247e:	e04b      	b.n	8002518 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002486:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	069b      	lsls	r3, r3, #26
 8002490:	429a      	cmp	r2, r3
 8002492:	d107      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024a2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	069b      	lsls	r3, r3, #26
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d107      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024c6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	069b      	lsls	r3, r3, #26
 80024d8:	429a      	cmp	r2, r3
 80024da:	d107      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024ea:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	069b      	lsls	r3, r3, #26
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d10a      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800250e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002510:	e001      	b.n	8002516 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002512:	bf00      	nop
 8002514:	e000      	b.n	8002518 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002516:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b01      	cmp	r3, #1
 8002524:	d108      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x344>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x344>
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <HAL_ADC_ConfigChannel+0x346>
 8002538:	2300      	movs	r3, #0
 800253a:	2b00      	cmp	r3, #0
 800253c:	f040 8131 	bne.w	80027a2 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d00f      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2201      	movs	r2, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	400a      	ands	r2, r1
 8002562:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002566:	e049      	b.n	80025fc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2201      	movs	r2, #1
 8002576:	409a      	lsls	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b09      	cmp	r3, #9
 8002588:	d91c      	bls.n	80025c4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6999      	ldr	r1, [r3, #24]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4613      	mov	r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	3b1b      	subs	r3, #27
 800259c:	2207      	movs	r2, #7
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	4019      	ands	r1, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6898      	ldr	r0, [r3, #8]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4613      	mov	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	3b1b      	subs	r3, #27
 80025b6:	fa00 f203 	lsl.w	r2, r0, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	619a      	str	r2, [r3, #24]
 80025c2:	e01b      	b.n	80025fc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6959      	ldr	r1, [r3, #20]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	4613      	mov	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4413      	add	r3, r2
 80025d6:	2207      	movs	r2, #7
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	4019      	ands	r1, r3
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6898      	ldr	r0, [r3, #8]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	fa00 f203 	lsl.w	r2, r0, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002604:	d004      	beq.n	8002610 <HAL_ADC_ConfigChannel+0x41c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a1d      	ldr	r2, [pc, #116]	; (8002680 <HAL_ADC_ConfigChannel+0x48c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d101      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x420>
 8002610:	4b1c      	ldr	r3, [pc, #112]	; (8002684 <HAL_ADC_ConfigChannel+0x490>)
 8002612:	e000      	b.n	8002616 <HAL_ADC_ConfigChannel+0x422>
 8002614:	4b1c      	ldr	r3, [pc, #112]	; (8002688 <HAL_ADC_ConfigChannel+0x494>)
 8002616:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b10      	cmp	r3, #16
 800261e:	d105      	bne.n	800262c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002628:	2b00      	cmp	r3, #0
 800262a:	d015      	beq.n	8002658 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002630:	2b11      	cmp	r3, #17
 8002632:	d105      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00b      	beq.n	8002658 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002644:	2b12      	cmp	r3, #18
 8002646:	f040 80ac 	bne.w	80027a2 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800264a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 80a5 	bne.w	80027a2 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002660:	d102      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x474>
 8002662:	4b07      	ldr	r3, [pc, #28]	; (8002680 <HAL_ADC_ConfigChannel+0x48c>)
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	e023      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x4bc>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a04      	ldr	r2, [pc, #16]	; (8002680 <HAL_ADC_ConfigChannel+0x48c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d10c      	bne.n	800268c <HAL_ADC_ConfigChannel+0x498>
 8002672:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	e01a      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x4bc>
 800267a:	bf00      	nop
 800267c:	83fff000 	.word	0x83fff000
 8002680:	50000100 	.word	0x50000100
 8002684:	50000300 	.word	0x50000300
 8002688:	50000700 	.word	0x50000700
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a4a      	ldr	r2, [pc, #296]	; (80027bc <HAL_ADC_ConfigChannel+0x5c8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d102      	bne.n	800269c <HAL_ADC_ConfigChannel+0x4a8>
 8002696:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	e009      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x4bc>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a47      	ldr	r2, [pc, #284]	; (80027c0 <HAL_ADC_ConfigChannel+0x5cc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d102      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x4b8>
 80026a6:	4b45      	ldr	r3, [pc, #276]	; (80027bc <HAL_ADC_ConfigChannel+0x5c8>)
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	e001      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x4bc>
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d108      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x4dc>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x4dc>
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x4de>
 80026d0:	2300      	movs	r3, #0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d150      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80026d6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d010      	beq.n	80026fe <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d107      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x504>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x504>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <HAL_ADC_ConfigChannel+0x506>
 80026f8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d13c      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b10      	cmp	r3, #16
 8002704:	d11d      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x54e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800270e:	d118      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800271a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800271c:	4b29      	ldr	r3, [pc, #164]	; (80027c4 <HAL_ADC_ConfigChannel+0x5d0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a29      	ldr	r2, [pc, #164]	; (80027c8 <HAL_ADC_ConfigChannel+0x5d4>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	0c9a      	lsrs	r2, r3, #18
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002732:	e002      	b.n	800273a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	3b01      	subs	r3, #1
 8002738:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f9      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002740:	e02e      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b11      	cmp	r3, #17
 8002748:	d10b      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x56e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002752:	d106      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800275c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800275e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002760:	e01e      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b12      	cmp	r3, #18
 8002768:	d11a      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800276a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002774:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002776:	e013      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f043 0220 	orr.w	r2, r3, #32
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800278a:	e00a      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f043 0220 	orr.w	r2, r3, #32
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800279e:	e000      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027a0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	376c      	adds	r7, #108	; 0x6c
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	50000400 	.word	0x50000400
 80027c0:	50000500 	.word	0x50000500
 80027c4:	20000000 	.word	0x20000000
 80027c8:	431bde83 	.word	0x431bde83

080027cc <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc ADC handle
  * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b089      	sub	sp, #36	; 0x24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	77fb      	strb	r3, [r7, #31]

  /* Verify if threshold is within the selected ADC resolution */
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));

  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027e2:	d003      	beq.n	80027ec <HAL_ADC_AnalogWDGConfig+0x20>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80027e8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_AnalogWDGConfig+0x2e>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e12c      	b.n	8002a54 <HAL_ADC_AnalogWDGConfig+0x288>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular and injected groups:                      */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 030c 	and.w	r3, r3, #12
 800280c:	2b00      	cmp	r3, #0
 800280e:	f040 8114 	bne.w	8002a3a <HAL_ADC_AnalogWDGConfig+0x26e>
  {
  
    /* Analog watchdogs configuration */
    if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d14f      	bne.n	80028ba <HAL_ADC_AnalogWDGConfig+0xee>
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: regular and/or injected      */
      /*    groups, one or overall group of channels.                         */
      /*  - Set the Analog watchdog channel (is not used if watchdog          */
      /*    mode "all channels": ADC_CFGR_AWD1SGL=0U).                         */
      MODIFY_REG(hadc->Instance->CFGR                             ,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f023 43fb 	bic.w	r3, r3, #2105540608	; 0x7d800000
 8002824:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	6851      	ldr	r1, [r2, #4]
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	6892      	ldr	r2, [r2, #8]
 8002830:	0692      	lsls	r2, r2, #26
 8002832:	4311      	orrs	r1, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	430b      	orrs	r3, r1
 800283a:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR_AWD1CH_SHIFT(AnalogWDGConfig->Channel)   );

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11U, the LSB (right bits)   */
      /* are set to 0                                                         */ 
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	08db      	lsrs	r3, r3, #3
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	613b      	str	r3, [r7, #16]
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	695a      	ldr	r2, [r3, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	08db      	lsrs	r3, r3, #3
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	60fb      	str	r3, [r7, #12]
      
      /* Set the high and low thresholds */
      MODIFY_REG(hadc->Instance->TR1                                ,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	f003 21f0 	and.w	r1, r3, #4026593280	; 0xf000f000
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	041a      	lsls	r2, r3, #16
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	621a      	str	r2, [r3, #32]
                 tmpAWDLowThresholdShifted                           );
      
      /* Clear the ADC Analog watchdog flag (in case of left enabled by       */
      /* previous ADC operations) to be ready to use for HAL_ADC_IRQHandler() */
      /* or HAL_ADC_PollForEvent().                                           */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_IT_AWD1);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2280      	movs	r2, #128	; 0x80
 800288c:	601a      	str	r2, [r3, #0]
      
      /* Configure ADC Analog watchdog interrupt */
      if(AnalogWDGConfig->ITMode == ENABLE)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	7b1b      	ldrb	r3, [r3, #12]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d108      	bne.n	80028a8 <HAL_ADC_AnalogWDGConfig+0xdc>
      {
        /* Enable the ADC Analog watchdog interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD1);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	e0d0      	b.n	8002a4a <HAL_ADC_AnalogWDGConfig+0x27e>
      }
      else
      {
        /* Disable the ADC Analog watchdog interrupt */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD1);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	e0c7      	b.n	8002a4a <HAL_ADC_AnalogWDGConfig+0x27e>
    /* Case of ADC_ANALOGWATCHDOG_2 and ADC_ANALOGWATCHDOG_3 */
    else
    {
    /* Shift the threshold in function of the selected ADC resolution */
    /* have to be left-aligned on bit 7U, the LSB (right bits) are set to 0    */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0318 	and.w	r3, r3, #24
 80028c4:	2b18      	cmp	r3, #24
 80028c6:	d00d      	beq.n	80028e4 <HAL_ADC_AnalogWDGConfig+0x118>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	08db      	lsrs	r3, r3, #3
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	f1c3 0302 	rsb	r3, r3, #2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	fa22 f303 	lsr.w	r3, r2, r3
 80028e2:	e002      	b.n	80028ea <HAL_ADC_AnalogWDGConfig+0x11e>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	613b      	str	r3, [r7, #16]
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0318 	and.w	r3, r3, #24
 80028f6:	2b18      	cmp	r3, #24
 80028f8:	d00d      	beq.n	8002916 <HAL_ADC_AnalogWDGConfig+0x14a>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	08db      	lsrs	r3, r3, #3
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	f1c3 0302 	rsb	r3, r3, #2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
 8002914:	e002      	b.n	800291c <HAL_ADC_AnalogWDGConfig+0x150>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	60fb      	str	r3, [r7, #12]

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d137      	bne.n	8002996 <HAL_ADC_AnalogWDGConfig+0x1ca>
      {
        /* Set the Analog watchdog channel or group of channels. This also    */
        /* enables the watchdog.                                              */
        /* Note: Conditional register reset, because several channels can be  */
        /*       set by successive calls of this function.                    */
        if (AnalogWDGConfig->WatchdogMode != ADC_ANALOGWATCHDOG_NONE) 
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d01a      	beq.n	8002964 <HAL_ADC_AnalogWDGConfig+0x198>
        {
          /* Set the high and low thresholds */
          MODIFY_REG(hadc->Instance->TR2                                ,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	f003 21ff 	and.w	r1, r3, #4278255360	; 0xff00ff00
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	041a      	lsls	r2, r3, #16
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	625a      	str	r2, [r3, #36]	; 0x24
                     ADC_TR2_HT2 |
                     ADC_TR2_LT2                                        ,
                     ADC_TRX_HIGHTHRESHOLD(tmpAWDHighThresholdShifted) |
                     tmpAWDLowThresholdShifted                           );
          
          SET_BIT(hadc->Instance->AWD2CR, ADC_CFGR_AWD23CR(AnalogWDGConfig->Channel));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2201      	movs	r2, #1
 8002956:	409a      	lsls	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8002962:	e011      	b.n	8002988 <HAL_ADC_AnalogWDGConfig+0x1bc>
        }
        else
        {
          CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8002972:	625a      	str	r2, [r3, #36]	; 0x24
          CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b37      	ldr	r3, [pc, #220]	; (8002a60 <HAL_ADC_AnalogWDGConfig+0x294>)
 8002982:	400b      	ands	r3, r1
 8002984:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        }
                
        /* Set temporary variable to flag and IT of AWD2 or AWD3 for further  */
        /* settings.                                                          */
        tmpADCFlagAWD2orAWD3 = ADC_FLAG_AWD2;
 8002988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800298c:	61bb      	str	r3, [r7, #24]
        tmpADCITAWD2orAWD3 = ADC_IT_AWD2;
 800298e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	e036      	b.n	8002a04 <HAL_ADC_AnalogWDGConfig+0x238>
      {
        /* Set the Analog watchdog channel or group of channels. This also    */
        /* enables the watchdog.                                              */
        /* Note: Conditionnal register reset, because several channels can be */
        /*       set by successive calls of this function.                    */
        if (AnalogWDGConfig->WatchdogMode != ADC_ANALOGWATCHDOG_NONE) 
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d01a      	beq.n	80029d4 <HAL_ADC_AnalogWDGConfig+0x208>
        {
          /* Set the high and low thresholds */
          MODIFY_REG(hadc->Instance->TR3                                ,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	f003 21ff 	and.w	r1, r3, #4278255360	; 0xff00ff00
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	041a      	lsls	r2, r3, #16
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28
                     ADC_TR3_HT3 |
                     ADC_TR3_LT3                                        ,
                     ADC_TRX_HIGHTHRESHOLD(tmpAWDHighThresholdShifted) |
                     tmpAWDLowThresholdShifted                           );
          
          SET_BIT(hadc->Instance->AWD3CR, ADC_CFGR_AWD23CR(AnalogWDGConfig->Channel));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2201      	movs	r2, #1
 80029c6:	409a      	lsls	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80029d2:	e011      	b.n	80029f8 <HAL_ADC_AnalogWDGConfig+0x22c>
        }
        else
        {
          CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28
          CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <HAL_ADC_AnalogWDGConfig+0x294>)
 80029f2:	400b      	ands	r3, r1
 80029f4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
        }
        
        /* Set temporary variable to flag and IT of AWD2 or AWD3 for further  */
        /* settings.                                                          */
        tmpADCFlagAWD2orAWD3 = ADC_FLAG_AWD3;
 80029f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029fc:	61bb      	str	r3, [r7, #24]
        tmpADCITAWD2orAWD3 = ADC_IT_AWD3;
 80029fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a02:	617b      	str	r3, [r7, #20]
      }

      /* Clear the ADC Analog watchdog flag (in case of left enabled by       */
      /* previous ADC operations) to be ready to use for HAL_ADC_IRQHandler() */
      /* or HAL_ADC_PollForEvent().                                           */
      __HAL_ADC_CLEAR_FLAG(hadc, tmpADCFlagAWD2orAWD3);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Configure ADC Analog watchdog interrupt */
      if(AnalogWDGConfig->ITMode == ENABLE)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	7b1b      	ldrb	r3, [r3, #12]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d108      	bne.n	8002a26 <HAL_ADC_AnalogWDGConfig+0x25a>
      {
        __HAL_ADC_ENABLE_IT(hadc, tmpADCITAWD2orAWD3);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6859      	ldr	r1, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	605a      	str	r2, [r3, #4]
 8002a24:	e011      	b.n	8002a4a <HAL_ADC_AnalogWDGConfig+0x27e>
      }
      else
      {
        __HAL_ADC_DISABLE_IT(hadc, tmpADCITAWD2orAWD3);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6859      	ldr	r1, [r3, #4]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	400a      	ands	r2, r1
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	e007      	b.n	8002a4a <HAL_ADC_AnalogWDGConfig+0x27e>
  /* If a conversion is on going on regular or injected groups, no update     */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f043 0220 	orr.w	r2, r3, #32
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	77fb      	strb	r3, [r7, #31]
  }
  
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a52:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3724      	adds	r7, #36	; 0x24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	fff80001 	.word	0xfff80001

08002a64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b099      	sub	sp, #100	; 0x64
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a7c:	d102      	bne.n	8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002a7e:	4b6d      	ldr	r3, [pc, #436]	; (8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	e01a      	b.n	8002aba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a6a      	ldr	r2, [pc, #424]	; (8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d103      	bne.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002a8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	e011      	b.n	8002aba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a67      	ldr	r2, [pc, #412]	; (8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d102      	bne.n	8002aa6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002aa0:	4b66      	ldr	r3, [pc, #408]	; (8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	e009      	b.n	8002aba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a64      	ldr	r2, [pc, #400]	; (8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d102      	bne.n	8002ab6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002ab0:	4b61      	ldr	r3, [pc, #388]	; (8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	e001      	b.n	8002aba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0b0      	b.n	8002c26 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e0a9      	b.n	8002c26 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f040 808d 	bne.w	8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 8086 	bne.w	8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b00:	d004      	beq.n	8002b0c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a4b      	ldr	r2, [pc, #300]	; (8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d101      	bne.n	8002b10 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002b0c:	4b4c      	ldr	r3, [pc, #304]	; (8002c40 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002b0e:	e000      	b.n	8002b12 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002b10:	4b4c      	ldr	r3, [pc, #304]	; (8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002b12:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d040      	beq.n	8002b9e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002b1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	6859      	ldr	r1, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b2e:	035b      	lsls	r3, r3, #13
 8002b30:	430b      	orrs	r3, r1
 8002b32:	431a      	orrs	r2, r3
 8002b34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b36:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d108      	bne.n	8002b58 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d15c      	bne.n	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d107      	bne.n	8002b7a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002b7a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d14b      	bne.n	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002b80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b88:	f023 030f 	bic.w	r3, r3, #15
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	6811      	ldr	r1, [r2, #0]
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	6892      	ldr	r2, [r2, #8]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	431a      	orrs	r2, r3
 8002b98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b9a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b9c:	e03c      	b.n	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ba8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d108      	bne.n	8002bca <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d123      	bne.n	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d107      	bne.n	8002bec <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002bec:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d112      	bne.n	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bfa:	f023 030f 	bic.w	r3, r3, #15
 8002bfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c00:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c02:	e009      	b.n	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	f043 0220 	orr.w	r2, r3, #32
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002c16:	e000      	b.n	8002c1a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c18:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002c26:	4618      	mov	r0, r3
 8002c28:	3764      	adds	r7, #100	; 0x64
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	50000100 	.word	0x50000100
 8002c38:	50000400 	.word	0x50000400
 8002c3c:	50000500 	.word	0x50000500
 8002c40:	50000300 	.word	0x50000300
 8002c44:	50000700 	.word	0x50000700

08002c48 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d126      	bne.n	8002cb0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d115      	bne.n	8002ca8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d111      	bne.n	8002ca8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d105      	bne.n	8002ca8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7fe ff6f 	bl	8001b8c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002cae:	e004      	b.n	8002cba <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	4798      	blx	r3
}
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f7fe ff65 	bl	8001ba0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfc:	f043 0204 	orr.w	r2, r3, #4
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f7fe ff55 	bl	8001bb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d0a:	bf00      	nop
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d108      	bne.n	8002d40 <ADC_Enable+0x2c>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <ADC_Enable+0x2c>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <ADC_Enable+0x2e>
 8002d40:	2300      	movs	r3, #0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d13c      	bne.n	8002dc0 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <ADC_Enable+0xb8>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00d      	beq.n	8002d70 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	f043 0210 	orr.w	r2, r3, #16
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d64:	f043 0201 	orr.w	r2, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e028      	b.n	8002dc2 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002d80:	f7fe fed4 	bl	8001b2c <HAL_GetTick>
 8002d84:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d86:	e014      	b.n	8002db2 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d88:	f7fe fed0 	bl	8001b2c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d90d      	bls.n	8002db2 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f043 0210 	orr.w	r2, r3, #16
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f043 0201 	orr.w	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e007      	b.n	8002dc2 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d1e3      	bne.n	8002d88 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	8000003f 	.word	0x8000003f

08002dd0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d108      	bne.n	8002dfc <ADC_Disable+0x2c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <ADC_Disable+0x2c>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e000      	b.n	8002dfe <ADC_Disable+0x2e>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d040      	beq.n	8002e84 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 030d 	and.w	r3, r3, #13
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d10f      	bne.n	8002e30 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0202 	orr.w	r2, r2, #2
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2203      	movs	r2, #3
 8002e26:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002e28:	f7fe fe80 	bl	8001b2c <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e2e:	e022      	b.n	8002e76 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	f043 0210 	orr.w	r2, r3, #16
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e40:	f043 0201 	orr.w	r2, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e01c      	b.n	8002e86 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e4c:	f7fe fe6e 	bl	8001b2c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d90d      	bls.n	8002e76 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f043 0210 	orr.w	r2, r3, #16
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	f043 0201 	orr.w	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e007      	b.n	8002e86 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d0e3      	beq.n	8002e4c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eac:	4013      	ands	r3, r2
 8002eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ec2:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	60d3      	str	r3, [r2, #12]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002edc:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	f003 0307 	and.w	r3, r3, #7
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	db0b      	blt.n	8002f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	f003 021f 	and.w	r2, r3, #31
 8002f0c:	4907      	ldr	r1, [pc, #28]	; (8002f2c <__NVIC_EnableIRQ+0x38>)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	2001      	movs	r0, #1
 8002f16:	fa00 f202 	lsl.w	r2, r0, r2
 8002f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	e000e100 	.word	0xe000e100

08002f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	6039      	str	r1, [r7, #0]
 8002f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	db0a      	blt.n	8002f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	490c      	ldr	r1, [pc, #48]	; (8002f7c <__NVIC_SetPriority+0x4c>)
 8002f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4e:	0112      	lsls	r2, r2, #4
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	440b      	add	r3, r1
 8002f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f58:	e00a      	b.n	8002f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	4908      	ldr	r1, [pc, #32]	; (8002f80 <__NVIC_SetPriority+0x50>)
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	3b04      	subs	r3, #4
 8002f68:	0112      	lsls	r2, r2, #4
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	761a      	strb	r2, [r3, #24]
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000e100 	.word	0xe000e100
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b089      	sub	sp, #36	; 0x24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f1c3 0307 	rsb	r3, r3, #7
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	bf28      	it	cs
 8002fa2:	2304      	movcs	r3, #4
 8002fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	2b06      	cmp	r3, #6
 8002fac:	d902      	bls.n	8002fb4 <NVIC_EncodePriority+0x30>
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3b03      	subs	r3, #3
 8002fb2:	e000      	b.n	8002fb6 <NVIC_EncodePriority+0x32>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43da      	mvns	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd6:	43d9      	mvns	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fdc:	4313      	orrs	r3, r2
         );
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3724      	adds	r7, #36	; 0x24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ffc:	d301      	bcc.n	8003002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ffe:	2301      	movs	r3, #1
 8003000:	e00f      	b.n	8003022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003002:	4a0a      	ldr	r2, [pc, #40]	; (800302c <SysTick_Config+0x40>)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3b01      	subs	r3, #1
 8003008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800300a:	210f      	movs	r1, #15
 800300c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003010:	f7ff ff8e 	bl	8002f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <SysTick_Config+0x40>)
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800301a:	4b04      	ldr	r3, [pc, #16]	; (800302c <SysTick_Config+0x40>)
 800301c:	2207      	movs	r2, #7
 800301e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	e000e010 	.word	0xe000e010

08003030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff ff29 	bl	8002e90 <__NVIC_SetPriorityGrouping>
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b086      	sub	sp, #24
 800304a:	af00      	add	r7, sp, #0
 800304c:	4603      	mov	r3, r0
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003058:	f7ff ff3e 	bl	8002ed8 <__NVIC_GetPriorityGrouping>
 800305c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	6978      	ldr	r0, [r7, #20]
 8003064:	f7ff ff8e 	bl	8002f84 <NVIC_EncodePriority>
 8003068:	4602      	mov	r2, r0
 800306a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff5d 	bl	8002f30 <__NVIC_SetPriority>
}
 8003076:	bf00      	nop
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff31 	bl	8002ef4 <__NVIC_EnableIRQ>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff ffa2 	bl	8002fec <SysTick_Config>
 80030a8:	4603      	mov	r3, r0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e037      	b.n	8003138 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80030de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80030e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80030ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003104:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f940 	bl	80033a0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}  
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_DMA_Start_IT+0x20>
 800315c:	2302      	movs	r3, #2
 800315e:	e04a      	b.n	80031f6 <HAL_DMA_Start_IT+0xb6>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800316e:	2b01      	cmp	r3, #1
 8003170:	d13a      	bne.n	80031e8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2202      	movs	r2, #2
 8003176:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f8d4 	bl	8003344 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d008      	beq.n	80031b6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 020e 	orr.w	r2, r2, #14
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e00f      	b.n	80031d6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 020a 	orr.w	r2, r2, #10
 80031c4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0204 	bic.w	r2, r2, #4
 80031d4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0201 	orr.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	e005      	b.n	80031f4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
 80031f2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80031f4:	7dfb      	ldrb	r3, [r7, #23]
} 
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	2204      	movs	r2, #4
 800321c:	409a      	lsls	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4013      	ands	r3, r2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d024      	beq.n	8003270 <HAL_DMA_IRQHandler+0x72>
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01f      	beq.n	8003270 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	d107      	bne.n	800324e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0204 	bic.w	r2, r2, #4
 800324c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003256:	2104      	movs	r1, #4
 8003258:	fa01 f202 	lsl.w	r2, r1, r2
 800325c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	2b00      	cmp	r3, #0
 8003264:	d06a      	beq.n	800333c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800326e:	e065      	b.n	800333c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	2202      	movs	r2, #2
 8003276:	409a      	lsls	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4013      	ands	r3, r2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d02c      	beq.n	80032da <HAL_DMA_IRQHandler+0xdc>
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d027      	beq.n	80032da <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10b      	bne.n	80032b0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 020a 	bic.w	r2, r2, #10
 80032a6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b8:	2102      	movs	r1, #2
 80032ba:	fa01 f202 	lsl.w	r2, r1, r2
 80032be:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d035      	beq.n	800333c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80032d8:	e030      	b.n	800333c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	2208      	movs	r2, #8
 80032e0:	409a      	lsls	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d028      	beq.n	800333c <HAL_DMA_IRQHandler+0x13e>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d023      	beq.n	800333c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 020e 	bic.w	r2, r2, #14
 8003302:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330c:	2101      	movs	r1, #1
 800330e:	fa01 f202 	lsl.w	r2, r1, r2
 8003312:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	2b00      	cmp	r3, #0
 8003330:	d004      	beq.n	800333c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
    }
  }
}  
 800333a:	e7ff      	b.n	800333c <HAL_DMA_IRQHandler+0x13e>
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335a:	2101      	movs	r1, #1
 800335c:	fa01 f202 	lsl.w	r2, r1, r2
 8003360:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b10      	cmp	r3, #16
 8003370:	d108      	bne.n	8003384 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003382:	e007      	b.n	8003394 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	60da      	str	r2, [r3, #12]
}
 8003394:	bf00      	nop
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b14      	ldr	r3, [pc, #80]	; (8003400 <DMA_CalcBaseAndBitshift+0x60>)
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d80f      	bhi.n	80033d4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	4b12      	ldr	r3, [pc, #72]	; (8003404 <DMA_CalcBaseAndBitshift+0x64>)
 80033bc:	4413      	add	r3, r2
 80033be:	4a12      	ldr	r2, [pc, #72]	; (8003408 <DMA_CalcBaseAndBitshift+0x68>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	091b      	lsrs	r3, r3, #4
 80033c6:	009a      	lsls	r2, r3, #2
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a0f      	ldr	r2, [pc, #60]	; (800340c <DMA_CalcBaseAndBitshift+0x6c>)
 80033d0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80033d2:	e00e      	b.n	80033f2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <DMA_CalcBaseAndBitshift+0x70>)
 80033dc:	4413      	add	r3, r2
 80033de:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <DMA_CalcBaseAndBitshift+0x68>)
 80033e0:	fba2 2303 	umull	r2, r3, r2, r3
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	009a      	lsls	r2, r3, #2
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a09      	ldr	r2, [pc, #36]	; (8003414 <DMA_CalcBaseAndBitshift+0x74>)
 80033f0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40020407 	.word	0x40020407
 8003404:	bffdfff8 	.word	0xbffdfff8
 8003408:	cccccccd 	.word	0xcccccccd
 800340c:	40020000 	.word	0x40020000
 8003410:	bffdfbf8 	.word	0xbffdfbf8
 8003414:	40020400 	.word	0x40020400

08003418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003426:	e160      	b.n	80036ea <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	2101      	movs	r1, #1
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	fa01 f303 	lsl.w	r3, r1, r3
 8003434:	4013      	ands	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 8152 	beq.w	80036e4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d00b      	beq.n	8003460 <HAL_GPIO_Init+0x48>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d007      	beq.n	8003460 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003454:	2b11      	cmp	r3, #17
 8003456:	d003      	beq.n	8003460 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b12      	cmp	r3, #18
 800345e:	d130      	bne.n	80034c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	2203      	movs	r2, #3
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4013      	ands	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003496:	2201      	movs	r2, #1
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4013      	ands	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	091b      	lsrs	r3, r3, #4
 80034ac:	f003 0201 	and.w	r2, r3, #1
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	2203      	movs	r2, #3
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43db      	mvns	r3, r3
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4013      	ands	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d003      	beq.n	8003502 <HAL_GPIO_Init+0xea>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b12      	cmp	r3, #18
 8003500:	d123      	bne.n	800354a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	08da      	lsrs	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3208      	adds	r2, #8
 800350a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800350e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	220f      	movs	r2, #15
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	08da      	lsrs	r2, r3, #3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3208      	adds	r2, #8
 8003544:	6939      	ldr	r1, [r7, #16]
 8003546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	2203      	movs	r2, #3
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4013      	ands	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 0203 	and.w	r2, r3, #3
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80ac 	beq.w	80036e4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358c:	4b5e      	ldr	r3, [pc, #376]	; (8003708 <HAL_GPIO_Init+0x2f0>)
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	4a5d      	ldr	r2, [pc, #372]	; (8003708 <HAL_GPIO_Init+0x2f0>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6193      	str	r3, [r2, #24]
 8003598:	4b5b      	ldr	r3, [pc, #364]	; (8003708 <HAL_GPIO_Init+0x2f0>)
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035a4:	4a59      	ldr	r2, [pc, #356]	; (800370c <HAL_GPIO_Init+0x2f4>)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	089b      	lsrs	r3, r3, #2
 80035aa:	3302      	adds	r3, #2
 80035ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	220f      	movs	r2, #15
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035ce:	d025      	beq.n	800361c <HAL_GPIO_Init+0x204>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a4f      	ldr	r2, [pc, #316]	; (8003710 <HAL_GPIO_Init+0x2f8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d01f      	beq.n	8003618 <HAL_GPIO_Init+0x200>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a4e      	ldr	r2, [pc, #312]	; (8003714 <HAL_GPIO_Init+0x2fc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d019      	beq.n	8003614 <HAL_GPIO_Init+0x1fc>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a4d      	ldr	r2, [pc, #308]	; (8003718 <HAL_GPIO_Init+0x300>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d013      	beq.n	8003610 <HAL_GPIO_Init+0x1f8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a4c      	ldr	r2, [pc, #304]	; (800371c <HAL_GPIO_Init+0x304>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00d      	beq.n	800360c <HAL_GPIO_Init+0x1f4>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a4b      	ldr	r2, [pc, #300]	; (8003720 <HAL_GPIO_Init+0x308>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d007      	beq.n	8003608 <HAL_GPIO_Init+0x1f0>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a4a      	ldr	r2, [pc, #296]	; (8003724 <HAL_GPIO_Init+0x30c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d101      	bne.n	8003604 <HAL_GPIO_Init+0x1ec>
 8003600:	2306      	movs	r3, #6
 8003602:	e00c      	b.n	800361e <HAL_GPIO_Init+0x206>
 8003604:	2307      	movs	r3, #7
 8003606:	e00a      	b.n	800361e <HAL_GPIO_Init+0x206>
 8003608:	2305      	movs	r3, #5
 800360a:	e008      	b.n	800361e <HAL_GPIO_Init+0x206>
 800360c:	2304      	movs	r3, #4
 800360e:	e006      	b.n	800361e <HAL_GPIO_Init+0x206>
 8003610:	2303      	movs	r3, #3
 8003612:	e004      	b.n	800361e <HAL_GPIO_Init+0x206>
 8003614:	2302      	movs	r3, #2
 8003616:	e002      	b.n	800361e <HAL_GPIO_Init+0x206>
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <HAL_GPIO_Init+0x206>
 800361c:	2300      	movs	r3, #0
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	f002 0203 	and.w	r2, r2, #3
 8003624:	0092      	lsls	r2, r2, #2
 8003626:	4093      	lsls	r3, r2
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800362e:	4937      	ldr	r1, [pc, #220]	; (800370c <HAL_GPIO_Init+0x2f4>)
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	089b      	lsrs	r3, r3, #2
 8003634:	3302      	adds	r3, #2
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800363c:	4b3a      	ldr	r3, [pc, #232]	; (8003728 <HAL_GPIO_Init+0x310>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	43db      	mvns	r3, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4013      	ands	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003660:	4a31      	ldr	r2, [pc, #196]	; (8003728 <HAL_GPIO_Init+0x310>)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003666:	4b30      	ldr	r3, [pc, #192]	; (8003728 <HAL_GPIO_Init+0x310>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	43db      	mvns	r3, r3
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800368a:	4a27      	ldr	r2, [pc, #156]	; (8003728 <HAL_GPIO_Init+0x310>)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003690:	4b25      	ldr	r3, [pc, #148]	; (8003728 <HAL_GPIO_Init+0x310>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	43db      	mvns	r3, r3
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4013      	ands	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80036b4:	4a1c      	ldr	r2, [pc, #112]	; (8003728 <HAL_GPIO_Init+0x310>)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036ba:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <HAL_GPIO_Init+0x310>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	43db      	mvns	r3, r3
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4013      	ands	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80036de:	4a12      	ldr	r2, [pc, #72]	; (8003728 <HAL_GPIO_Init+0x310>)
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	3301      	adds	r3, #1
 80036e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	fa22 f303 	lsr.w	r3, r2, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f47f ae97 	bne.w	8003428 <HAL_GPIO_Init+0x10>
  }
}
 80036fa:	bf00      	nop
 80036fc:	bf00      	nop
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	40021000 	.word	0x40021000
 800370c:	40010000 	.word	0x40010000
 8003710:	48000400 	.word	0x48000400
 8003714:	48000800 	.word	0x48000800
 8003718:	48000c00 	.word	0x48000c00
 800371c:	48001000 	.word	0x48001000
 8003720:	48001400 	.word	0x48001400
 8003724:	48001800 	.word	0x48001800
 8003728:	40010400 	.word	0x40010400

0800372c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003732:	af00      	add	r7, sp, #0
 8003734:	1d3b      	adds	r3, r7, #4
 8003736:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	f000 bf01 	b.w	8004548 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003746:	1d3b      	adds	r3, r7, #4
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8160 	beq.w	8003a16 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003756:	4bae      	ldr	r3, [pc, #696]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b04      	cmp	r3, #4
 8003760:	d00c      	beq.n	800377c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003762:	4bab      	ldr	r3, [pc, #684]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	2b08      	cmp	r3, #8
 800376c:	d159      	bne.n	8003822 <HAL_RCC_OscConfig+0xf6>
 800376e:	4ba8      	ldr	r3, [pc, #672]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377a:	d152      	bne.n	8003822 <HAL_RCC_OscConfig+0xf6>
 800377c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003780:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003788:	fa93 f3a3 	rbit	r3, r3
 800378c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003790:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003794:	fab3 f383 	clz	r3, r3
 8003798:	b2db      	uxtb	r3, r3
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	b2db      	uxtb	r3, r3
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d102      	bne.n	80037ae <HAL_RCC_OscConfig+0x82>
 80037a8:	4b99      	ldr	r3, [pc, #612]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	e015      	b.n	80037da <HAL_RCC_OscConfig+0xae>
 80037ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037b2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80037c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037c6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80037ca:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80037ce:	fa93 f3a3 	rbit	r3, r3
 80037d2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80037d6:	4b8e      	ldr	r3, [pc, #568]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037de:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80037e2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80037e6:	fa92 f2a2 	rbit	r2, r2
 80037ea:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80037ee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80037f2:	fab2 f282 	clz	r2, r2
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	f042 0220 	orr.w	r2, r2, #32
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	f002 021f 	and.w	r2, r2, #31
 8003802:	2101      	movs	r1, #1
 8003804:	fa01 f202 	lsl.w	r2, r1, r2
 8003808:	4013      	ands	r3, r2
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 8102 	beq.w	8003a14 <HAL_RCC_OscConfig+0x2e8>
 8003810:	1d3b      	adds	r3, r7, #4
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	f040 80fc 	bne.w	8003a14 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	f000 be93 	b.w	8004548 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003822:	1d3b      	adds	r3, r7, #4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382c:	d106      	bne.n	800383c <HAL_RCC_OscConfig+0x110>
 800382e:	4b78      	ldr	r3, [pc, #480]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a77      	ldr	r2, [pc, #476]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 8003834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e030      	b.n	800389e <HAL_RCC_OscConfig+0x172>
 800383c:	1d3b      	adds	r3, r7, #4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0x134>
 8003846:	4b72      	ldr	r3, [pc, #456]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a71      	ldr	r2, [pc, #452]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 800384c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	4b6f      	ldr	r3, [pc, #444]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a6e      	ldr	r2, [pc, #440]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 8003858:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e01e      	b.n	800389e <HAL_RCC_OscConfig+0x172>
 8003860:	1d3b      	adds	r3, r7, #4
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800386a:	d10c      	bne.n	8003886 <HAL_RCC_OscConfig+0x15a>
 800386c:	4b68      	ldr	r3, [pc, #416]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a67      	ldr	r2, [pc, #412]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 8003872:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	4b65      	ldr	r3, [pc, #404]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a64      	ldr	r2, [pc, #400]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 800387e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	e00b      	b.n	800389e <HAL_RCC_OscConfig+0x172>
 8003886:	4b62      	ldr	r3, [pc, #392]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a61      	ldr	r2, [pc, #388]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 800388c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4b5f      	ldr	r3, [pc, #380]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a5e      	ldr	r2, [pc, #376]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 8003898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800389c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800389e:	1d3b      	adds	r3, r7, #4
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d059      	beq.n	800395c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fe f940 	bl	8001b2c <HAL_GetTick>
 80038ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b2:	f7fe f93b 	bl	8001b2c <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	; 0x64
 80038c0:	d902      	bls.n	80038c8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	f000 be40 	b.w	8004548 <HAL_RCC_OscConfig+0xe1c>
 80038c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038cc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80038d4:	fa93 f3a3 	rbit	r3, r3
 80038d8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80038dc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e0:	fab3 f383 	clz	r3, r3
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d102      	bne.n	80038fa <HAL_RCC_OscConfig+0x1ce>
 80038f4:	4b46      	ldr	r3, [pc, #280]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	e015      	b.n	8003926 <HAL_RCC_OscConfig+0x1fa>
 80038fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038fe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800390e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003912:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003916:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003922:	4b3b      	ldr	r3, [pc, #236]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800392a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800392e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003932:	fa92 f2a2 	rbit	r2, r2
 8003936:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800393a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800393e:	fab2 f282 	clz	r2, r2
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	f042 0220 	orr.w	r2, r2, #32
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	f002 021f 	and.w	r2, r2, #31
 800394e:	2101      	movs	r1, #1
 8003950:	fa01 f202 	lsl.w	r2, r1, r2
 8003954:	4013      	ands	r3, r2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0ab      	beq.n	80038b2 <HAL_RCC_OscConfig+0x186>
 800395a:	e05c      	b.n	8003a16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395c:	f7fe f8e6 	bl	8001b2c <HAL_GetTick>
 8003960:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003964:	e00a      	b.n	800397c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003966:	f7fe f8e1 	bl	8001b2c <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b64      	cmp	r3, #100	; 0x64
 8003974:	d902      	bls.n	800397c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	f000 bde6 	b.w	8004548 <HAL_RCC_OscConfig+0xe1c>
 800397c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003980:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003984:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003988:	fa93 f3a3 	rbit	r3, r3
 800398c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003990:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003994:	fab3 f383 	clz	r3, r3
 8003998:	b2db      	uxtb	r3, r3
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d102      	bne.n	80039ae <HAL_RCC_OscConfig+0x282>
 80039a8:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	e015      	b.n	80039da <HAL_RCC_OscConfig+0x2ae>
 80039ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039b2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80039c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039c6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80039ca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039ce:	fa93 f3a3 	rbit	r3, r3
 80039d2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80039d6:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039de:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80039e2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80039e6:	fa92 f2a2 	rbit	r2, r2
 80039ea:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80039ee:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80039f2:	fab2 f282 	clz	r2, r2
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	f042 0220 	orr.w	r2, r2, #32
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	f002 021f 	and.w	r2, r2, #31
 8003a02:	2101      	movs	r1, #1
 8003a04:	fa01 f202 	lsl.w	r2, r1, r2
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1ab      	bne.n	8003966 <HAL_RCC_OscConfig+0x23a>
 8003a0e:	e002      	b.n	8003a16 <HAL_RCC_OscConfig+0x2ea>
 8003a10:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 8170 	beq.w	8003d06 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a26:	4bd0      	ldr	r3, [pc, #832]	; (8003d68 <HAL_RCC_OscConfig+0x63c>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00c      	beq.n	8003a4c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a32:	4bcd      	ldr	r3, [pc, #820]	; (8003d68 <HAL_RCC_OscConfig+0x63c>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d16d      	bne.n	8003b1a <HAL_RCC_OscConfig+0x3ee>
 8003a3e:	4bca      	ldr	r3, [pc, #808]	; (8003d68 <HAL_RCC_OscConfig+0x63c>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a4a:	d166      	bne.n	8003b1a <HAL_RCC_OscConfig+0x3ee>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a52:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003a56:	fa93 f3a3 	rbit	r3, r3
 8003a5a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003a5e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a62:	fab3 f383 	clz	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d102      	bne.n	8003a7c <HAL_RCC_OscConfig+0x350>
 8003a76:	4bbc      	ldr	r3, [pc, #752]	; (8003d68 <HAL_RCC_OscConfig+0x63c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	e013      	b.n	8003aa4 <HAL_RCC_OscConfig+0x378>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a82:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003a86:	fa93 f3a3 	rbit	r3, r3
 8003a8a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003a8e:	2302      	movs	r3, #2
 8003a90:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003a94:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003a98:	fa93 f3a3 	rbit	r3, r3
 8003a9c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003aa0:	4bb1      	ldr	r3, [pc, #708]	; (8003d68 <HAL_RCC_OscConfig+0x63c>)
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003aaa:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003aae:	fa92 f2a2 	rbit	r2, r2
 8003ab2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003ab6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003aba:	fab2 f282 	clz	r2, r2
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	f042 0220 	orr.w	r2, r2, #32
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	f002 021f 	and.w	r2, r2, #31
 8003aca:	2101      	movs	r1, #1
 8003acc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d007      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x3ba>
 8003ad6:	1d3b      	adds	r3, r7, #4
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d002      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	f000 bd31 	b.w	8004548 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae6:	4ba0      	ldr	r3, [pc, #640]	; (8003d68 <HAL_RCC_OscConfig+0x63c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aee:	1d3b      	adds	r3, r7, #4
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	21f8      	movs	r1, #248	; 0xf8
 8003af6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afa:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003afe:	fa91 f1a1 	rbit	r1, r1
 8003b02:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003b06:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003b0a:	fab1 f181 	clz	r1, r1
 8003b0e:	b2c9      	uxtb	r1, r1
 8003b10:	408b      	lsls	r3, r1
 8003b12:	4995      	ldr	r1, [pc, #596]	; (8003d68 <HAL_RCC_OscConfig+0x63c>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b18:	e0f5      	b.n	8003d06 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b1a:	1d3b      	adds	r3, r7, #4
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8085 	beq.w	8003c30 <HAL_RCC_OscConfig+0x504>
 8003b26:	2301      	movs	r3, #1
 8003b28:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003b30:	fa93 f3a3 	rbit	r3, r3
 8003b34:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003b38:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b3c:	fab3 f383 	clz	r3, r3
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b46:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	2301      	movs	r3, #1
 8003b50:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b52:	f7fd ffeb 	bl	8001b2c <HAL_GetTick>
 8003b56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b5c:	f7fd ffe6 	bl	8001b2c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d902      	bls.n	8003b72 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	f000 bceb 	b.w	8004548 <HAL_RCC_OscConfig+0xe1c>
 8003b72:	2302      	movs	r3, #2
 8003b74:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003b7c:	fa93 f3a3 	rbit	r3, r3
 8003b80:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003b84:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b88:	fab3 f383 	clz	r3, r3
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d102      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x476>
 8003b9c:	4b72      	ldr	r3, [pc, #456]	; (8003d68 <HAL_RCC_OscConfig+0x63c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	e013      	b.n	8003bca <HAL_RCC_OscConfig+0x49e>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003bac:	fa93 f3a3 	rbit	r3, r3
 8003bb0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003bba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003bbe:	fa93 f3a3 	rbit	r3, r3
 8003bc2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003bc6:	4b68      	ldr	r3, [pc, #416]	; (8003d68 <HAL_RCC_OscConfig+0x63c>)
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003bd0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003bd4:	fa92 f2a2 	rbit	r2, r2
 8003bd8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003bdc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003be0:	fab2 f282 	clz	r2, r2
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	f042 0220 	orr.w	r2, r2, #32
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	f002 021f 	and.w	r2, r2, #31
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0af      	beq.n	8003b5c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bfc:	4b5a      	ldr	r3, [pc, #360]	; (8003d68 <HAL_RCC_OscConfig+0x63c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c04:	1d3b      	adds	r3, r7, #4
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	21f8      	movs	r1, #248	; 0xf8
 8003c0c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c10:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003c14:	fa91 f1a1 	rbit	r1, r1
 8003c18:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003c1c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003c20:	fab1 f181 	clz	r1, r1
 8003c24:	b2c9      	uxtb	r1, r1
 8003c26:	408b      	lsls	r3, r1
 8003c28:	494f      	ldr	r1, [pc, #316]	; (8003d68 <HAL_RCC_OscConfig+0x63c>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]
 8003c2e:	e06a      	b.n	8003d06 <HAL_RCC_OscConfig+0x5da>
 8003c30:	2301      	movs	r3, #1
 8003c32:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c36:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003c42:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c46:	fab3 f383 	clz	r3, r3
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	461a      	mov	r2, r3
 8003c58:	2300      	movs	r3, #0
 8003c5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fd ff66 	bl	8001b2c <HAL_GetTick>
 8003c60:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c64:	e00a      	b.n	8003c7c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c66:	f7fd ff61 	bl	8001b2c <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d902      	bls.n	8003c7c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	f000 bc66 	b.w	8004548 <HAL_RCC_OscConfig+0xe1c>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c86:	fa93 f3a3 	rbit	r3, r3
 8003c8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003c8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d102      	bne.n	8003cac <HAL_RCC_OscConfig+0x580>
 8003ca6:	4b30      	ldr	r3, [pc, #192]	; (8003d68 <HAL_RCC_OscConfig+0x63c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	e013      	b.n	8003cd4 <HAL_RCC_OscConfig+0x5a8>
 8003cac:	2302      	movs	r3, #2
 8003cae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cb6:	fa93 f3a3 	rbit	r3, r3
 8003cba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003cc4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003cc8:	fa93 f3a3 	rbit	r3, r3
 8003ccc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003cd0:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <HAL_RCC_OscConfig+0x63c>)
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003cda:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003cde:	fa92 f2a2 	rbit	r2, r2
 8003ce2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003ce6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003cea:	fab2 f282 	clz	r2, r2
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	f042 0220 	orr.w	r2, r2, #32
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	f002 021f 	and.w	r2, r2, #31
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1af      	bne.n	8003c66 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d06:	1d3b      	adds	r3, r7, #4
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 80da 	beq.w	8003eca <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d16:	1d3b      	adds	r3, r7, #4
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d069      	beq.n	8003df4 <HAL_RCC_OscConfig+0x6c8>
 8003d20:	2301      	movs	r3, #1
 8003d22:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d2a:	fa93 f3a3 	rbit	r3, r3
 8003d2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003d32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <HAL_RCC_OscConfig+0x640>)
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	461a      	mov	r2, r3
 8003d46:	2301      	movs	r3, #1
 8003d48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4a:	f7fd feef 	bl	8001b2c <HAL_GetTick>
 8003d4e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d52:	e00d      	b.n	8003d70 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d54:	f7fd feea 	bl	8001b2c <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d905      	bls.n	8003d70 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e3ef      	b.n	8004548 <HAL_RCC_OscConfig+0xe1c>
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	10908120 	.word	0x10908120
 8003d70:	2302      	movs	r3, #2
 8003d72:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d7a:	fa93 f2a3 	rbit	r2, r3
 8003d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003d88:	2202      	movs	r2, #2
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	fa93 f2a3 	rbit	r2, r3
 8003d96:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003da0:	2202      	movs	r2, #2
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	fa93 f2a3 	rbit	r2, r3
 8003dae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003db2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db4:	4ba4      	ldr	r3, [pc, #656]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003db8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003dbc:	2102      	movs	r1, #2
 8003dbe:	6019      	str	r1, [r3, #0]
 8003dc0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	fa93 f1a3 	rbit	r1, r3
 8003dca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003dce:	6019      	str	r1, [r3, #0]
  return result;
 8003dd0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	fab3 f383 	clz	r3, r3
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	2101      	movs	r1, #1
 8003de8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dec:	4013      	ands	r3, r2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0b0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x628>
 8003df2:	e06a      	b.n	8003eca <HAL_RCC_OscConfig+0x79e>
 8003df4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003df8:	2201      	movs	r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	fa93 f2a3 	rbit	r2, r3
 8003e06:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003e0a:	601a      	str	r2, [r3, #0]
  return result;
 8003e0c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003e10:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e12:	fab3 f383 	clz	r3, r3
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4b8c      	ldr	r3, [pc, #560]	; (800404c <HAL_RCC_OscConfig+0x920>)
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	461a      	mov	r2, r3
 8003e22:	2300      	movs	r3, #0
 8003e24:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e26:	f7fd fe81 	bl	8001b2c <HAL_GetTick>
 8003e2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e2e:	e009      	b.n	8003e44 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e30:	f7fd fe7c 	bl	8001b2c <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e381      	b.n	8004548 <HAL_RCC_OscConfig+0xe1c>
 8003e44:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003e48:	2202      	movs	r2, #2
 8003e4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	fa93 f2a3 	rbit	r2, r3
 8003e56:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003e60:	2202      	movs	r2, #2
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	fa93 f2a3 	rbit	r2, r3
 8003e6e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003e78:	2202      	movs	r2, #2
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	fa93 f2a3 	rbit	r2, r3
 8003e86:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003e8a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e8c:	4b6e      	ldr	r3, [pc, #440]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003e94:	2102      	movs	r1, #2
 8003e96:	6019      	str	r1, [r3, #0]
 8003e98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	fa93 f1a3 	rbit	r1, r3
 8003ea2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003ea6:	6019      	str	r1, [r3, #0]
  return result;
 8003ea8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	fab3 f383 	clz	r3, r3
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1b2      	bne.n	8003e30 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eca:	1d3b      	adds	r3, r7, #4
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 8157 	beq.w	8004188 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eda:	2300      	movs	r3, #0
 8003edc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee0:	4b59      	ldr	r3, [pc, #356]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d112      	bne.n	8003f12 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eec:	4b56      	ldr	r3, [pc, #344]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	4a55      	ldr	r2, [pc, #340]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	61d3      	str	r3, [r2, #28]
 8003ef8:	4b53      	ldr	r3, [pc, #332]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003f00:	f107 030c 	add.w	r3, r7, #12
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	f107 030c 	add.w	r3, r7, #12
 8003f0a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f12:	4b4f      	ldr	r3, [pc, #316]	; (8004050 <HAL_RCC_OscConfig+0x924>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d11a      	bne.n	8003f54 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f1e:	4b4c      	ldr	r3, [pc, #304]	; (8004050 <HAL_RCC_OscConfig+0x924>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a4b      	ldr	r2, [pc, #300]	; (8004050 <HAL_RCC_OscConfig+0x924>)
 8003f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f28:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f2a:	f7fd fdff 	bl	8001b2c <HAL_GetTick>
 8003f2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f32:	e009      	b.n	8003f48 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f34:	f7fd fdfa 	bl	8001b2c <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b64      	cmp	r3, #100	; 0x64
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e2ff      	b.n	8004548 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f48:	4b41      	ldr	r3, [pc, #260]	; (8004050 <HAL_RCC_OscConfig+0x924>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0ef      	beq.n	8003f34 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f54:	1d3b      	adds	r3, r7, #4
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d106      	bne.n	8003f6c <HAL_RCC_OscConfig+0x840>
 8003f5e:	4b3a      	ldr	r3, [pc, #232]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	4a39      	ldr	r2, [pc, #228]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003f64:	f043 0301 	orr.w	r3, r3, #1
 8003f68:	6213      	str	r3, [r2, #32]
 8003f6a:	e02f      	b.n	8003fcc <HAL_RCC_OscConfig+0x8a0>
 8003f6c:	1d3b      	adds	r3, r7, #4
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10c      	bne.n	8003f90 <HAL_RCC_OscConfig+0x864>
 8003f76:	4b34      	ldr	r3, [pc, #208]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	4a33      	ldr	r2, [pc, #204]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	6213      	str	r3, [r2, #32]
 8003f82:	4b31      	ldr	r3, [pc, #196]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	4a30      	ldr	r2, [pc, #192]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003f88:	f023 0304 	bic.w	r3, r3, #4
 8003f8c:	6213      	str	r3, [r2, #32]
 8003f8e:	e01d      	b.n	8003fcc <HAL_RCC_OscConfig+0x8a0>
 8003f90:	1d3b      	adds	r3, r7, #4
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b05      	cmp	r3, #5
 8003f98:	d10c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x888>
 8003f9a:	4b2b      	ldr	r3, [pc, #172]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	4a2a      	ldr	r2, [pc, #168]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003fa0:	f043 0304 	orr.w	r3, r3, #4
 8003fa4:	6213      	str	r3, [r2, #32]
 8003fa6:	4b28      	ldr	r3, [pc, #160]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	4a27      	ldr	r2, [pc, #156]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	6213      	str	r3, [r2, #32]
 8003fb2:	e00b      	b.n	8003fcc <HAL_RCC_OscConfig+0x8a0>
 8003fb4:	4b24      	ldr	r3, [pc, #144]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	4a23      	ldr	r2, [pc, #140]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	6213      	str	r3, [r2, #32]
 8003fc0:	4b21      	ldr	r3, [pc, #132]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	4a20      	ldr	r2, [pc, #128]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8003fc6:	f023 0304 	bic.w	r3, r3, #4
 8003fca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fcc:	1d3b      	adds	r3, r7, #4
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d06a      	beq.n	80040ac <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd6:	f7fd fda9 	bl	8001b2c <HAL_GetTick>
 8003fda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fde:	e00b      	b.n	8003ff8 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe0:	f7fd fda4 	bl	8001b2c <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e2a7      	b.n	8004548 <HAL_RCC_OscConfig+0xe1c>
 8003ff8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004000:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	fa93 f2a3 	rbit	r2, r3
 800400a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004014:	2202      	movs	r2, #2
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	fa93 f2a3 	rbit	r2, r3
 8004022:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004026:	601a      	str	r2, [r3, #0]
  return result;
 8004028:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800402c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800402e:	fab3 f383 	clz	r3, r3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f043 0302 	orr.w	r3, r3, #2
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d108      	bne.n	8004054 <HAL_RCC_OscConfig+0x928>
 8004042:	4b01      	ldr	r3, [pc, #4]	; (8004048 <HAL_RCC_OscConfig+0x91c>)
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	e013      	b.n	8004070 <HAL_RCC_OscConfig+0x944>
 8004048:	40021000 	.word	0x40021000
 800404c:	10908120 	.word	0x10908120
 8004050:	40007000 	.word	0x40007000
 8004054:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004058:	2202      	movs	r2, #2
 800405a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	fa93 f2a3 	rbit	r2, r3
 8004066:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	4bc0      	ldr	r3, [pc, #768]	; (8004370 <HAL_RCC_OscConfig+0xc44>)
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004074:	2102      	movs	r1, #2
 8004076:	6011      	str	r1, [r2, #0]
 8004078:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800407c:	6812      	ldr	r2, [r2, #0]
 800407e:	fa92 f1a2 	rbit	r1, r2
 8004082:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004086:	6011      	str	r1, [r2, #0]
  return result;
 8004088:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800408c:	6812      	ldr	r2, [r2, #0]
 800408e:	fab2 f282 	clz	r2, r2
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	f002 021f 	and.w	r2, r2, #31
 800409e:	2101      	movs	r1, #1
 80040a0:	fa01 f202 	lsl.w	r2, r1, r2
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d09a      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x8b4>
 80040aa:	e063      	b.n	8004174 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ac:	f7fd fd3e 	bl	8001b2c <HAL_GetTick>
 80040b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b4:	e00b      	b.n	80040ce <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040b6:	f7fd fd39 	bl	8001b2c <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e23c      	b.n	8004548 <HAL_RCC_OscConfig+0xe1c>
 80040ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80040d2:	2202      	movs	r2, #2
 80040d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	fa93 f2a3 	rbit	r2, r3
 80040e0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80040ea:	2202      	movs	r2, #2
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	fa93 f2a3 	rbit	r2, r3
 80040f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80040fc:	601a      	str	r2, [r3, #0]
  return result;
 80040fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004102:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004104:	fab3 f383 	clz	r3, r3
 8004108:	b2db      	uxtb	r3, r3
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f043 0302 	orr.w	r3, r3, #2
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d102      	bne.n	800411e <HAL_RCC_OscConfig+0x9f2>
 8004118:	4b95      	ldr	r3, [pc, #596]	; (8004370 <HAL_RCC_OscConfig+0xc44>)
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	e00d      	b.n	800413a <HAL_RCC_OscConfig+0xa0e>
 800411e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004122:	2202      	movs	r2, #2
 8004124:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004126:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	fa93 f2a3 	rbit	r2, r3
 8004130:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	4b8e      	ldr	r3, [pc, #568]	; (8004370 <HAL_RCC_OscConfig+0xc44>)
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800413e:	2102      	movs	r1, #2
 8004140:	6011      	str	r1, [r2, #0]
 8004142:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	fa92 f1a2 	rbit	r1, r2
 800414c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004150:	6011      	str	r1, [r2, #0]
  return result;
 8004152:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	fab2 f282 	clz	r2, r2
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	f002 021f 	and.w	r2, r2, #31
 8004168:	2101      	movs	r1, #1
 800416a:	fa01 f202 	lsl.w	r2, r1, r2
 800416e:	4013      	ands	r3, r2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1a0      	bne.n	80040b6 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004174:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004178:	2b01      	cmp	r3, #1
 800417a:	d105      	bne.n	8004188 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800417c:	4b7c      	ldr	r3, [pc, #496]	; (8004370 <HAL_RCC_OscConfig+0xc44>)
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	4a7b      	ldr	r2, [pc, #492]	; (8004370 <HAL_RCC_OscConfig+0xc44>)
 8004182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004186:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004188:	1d3b      	adds	r3, r7, #4
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 81d9 	beq.w	8004546 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004194:	4b76      	ldr	r3, [pc, #472]	; (8004370 <HAL_RCC_OscConfig+0xc44>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 030c 	and.w	r3, r3, #12
 800419c:	2b08      	cmp	r3, #8
 800419e:	f000 81a6 	beq.w	80044ee <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041a2:	1d3b      	adds	r3, r7, #4
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	f040 811e 	bne.w	80043ea <HAL_RCC_OscConfig+0xcbe>
 80041ae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80041b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	fa93 f2a3 	rbit	r2, r3
 80041c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80041c6:	601a      	str	r2, [r3, #0]
  return result;
 80041c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80041cc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ce:	fab3 f383 	clz	r3, r3
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	461a      	mov	r2, r3
 80041e0:	2300      	movs	r3, #0
 80041e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e4:	f7fd fca2 	bl	8001b2c <HAL_GetTick>
 80041e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ec:	e009      	b.n	8004202 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ee:	f7fd fc9d 	bl	8001b2c <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e1a2      	b.n	8004548 <HAL_RCC_OscConfig+0xe1c>
 8004202:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004206:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800420a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	fa93 f2a3 	rbit	r2, r3
 8004216:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800421a:	601a      	str	r2, [r3, #0]
  return result;
 800421c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004220:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004222:	fab3 f383 	clz	r3, r3
 8004226:	b2db      	uxtb	r3, r3
 8004228:	095b      	lsrs	r3, r3, #5
 800422a:	b2db      	uxtb	r3, r3
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b01      	cmp	r3, #1
 8004234:	d102      	bne.n	800423c <HAL_RCC_OscConfig+0xb10>
 8004236:	4b4e      	ldr	r3, [pc, #312]	; (8004370 <HAL_RCC_OscConfig+0xc44>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	e01b      	b.n	8004274 <HAL_RCC_OscConfig+0xb48>
 800423c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004240:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004244:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004246:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	fa93 f2a3 	rbit	r2, r3
 8004250:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800425a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	fa93 f2a3 	rbit	r2, r3
 800426a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	4b3f      	ldr	r3, [pc, #252]	; (8004370 <HAL_RCC_OscConfig+0xc44>)
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004278:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800427c:	6011      	str	r1, [r2, #0]
 800427e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	fa92 f1a2 	rbit	r1, r2
 8004288:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800428c:	6011      	str	r1, [r2, #0]
  return result;
 800428e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	fab2 f282 	clz	r2, r2
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	f042 0220 	orr.w	r2, r2, #32
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	f002 021f 	and.w	r2, r2, #31
 80042a4:	2101      	movs	r1, #1
 80042a6:	fa01 f202 	lsl.w	r2, r1, r2
 80042aa:	4013      	ands	r3, r2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d19e      	bne.n	80041ee <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042b0:	4b2f      	ldr	r3, [pc, #188]	; (8004370 <HAL_RCC_OscConfig+0xc44>)
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	f023 020f 	bic.w	r2, r3, #15
 80042b8:	1d3b      	adds	r3, r7, #4
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	492c      	ldr	r1, [pc, #176]	; (8004370 <HAL_RCC_OscConfig+0xc44>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80042c4:	4b2a      	ldr	r3, [pc, #168]	; (8004370 <HAL_RCC_OscConfig+0xc44>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80042cc:	1d3b      	adds	r3, r7, #4
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6a19      	ldr	r1, [r3, #32]
 80042d2:	1d3b      	adds	r3, r7, #4
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	430b      	orrs	r3, r1
 80042da:	4925      	ldr	r1, [pc, #148]	; (8004370 <HAL_RCC_OscConfig+0xc44>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	604b      	str	r3, [r1, #4]
 80042e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80042e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	fa93 f2a3 	rbit	r2, r3
 80042f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80042f8:	601a      	str	r2, [r3, #0]
  return result;
 80042fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80042fe:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004300:	fab3 f383 	clz	r3, r3
 8004304:	b2db      	uxtb	r3, r3
 8004306:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800430a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	461a      	mov	r2, r3
 8004312:	2301      	movs	r3, #1
 8004314:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004316:	f7fd fc09 	bl	8001b2c <HAL_GetTick>
 800431a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800431e:	e009      	b.n	8004334 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004320:	f7fd fc04 	bl	8001b2c <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e109      	b.n	8004548 <HAL_RCC_OscConfig+0xe1c>
 8004334:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004338:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800433c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	fa93 f2a3 	rbit	r2, r3
 8004348:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800434c:	601a      	str	r2, [r3, #0]
  return result;
 800434e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004352:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004354:	fab3 f383 	clz	r3, r3
 8004358:	b2db      	uxtb	r3, r3
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	b2db      	uxtb	r3, r3
 800435e:	f043 0301 	orr.w	r3, r3, #1
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b01      	cmp	r3, #1
 8004366:	d105      	bne.n	8004374 <HAL_RCC_OscConfig+0xc48>
 8004368:	4b01      	ldr	r3, [pc, #4]	; (8004370 <HAL_RCC_OscConfig+0xc44>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	e01e      	b.n	80043ac <HAL_RCC_OscConfig+0xc80>
 800436e:	bf00      	nop
 8004370:	40021000 	.word	0x40021000
 8004374:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004378:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800437c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	fa93 f2a3 	rbit	r2, r3
 8004388:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004392:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	fa93 f2a3 	rbit	r2, r3
 80043a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	4b6a      	ldr	r3, [pc, #424]	; (8004554 <HAL_RCC_OscConfig+0xe28>)
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80043b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043b4:	6011      	str	r1, [r2, #0]
 80043b6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	fa92 f1a2 	rbit	r1, r2
 80043c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80043c4:	6011      	str	r1, [r2, #0]
  return result;
 80043c6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	fab2 f282 	clz	r2, r2
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	f042 0220 	orr.w	r2, r2, #32
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	f002 021f 	and.w	r2, r2, #31
 80043dc:	2101      	movs	r1, #1
 80043de:	fa01 f202 	lsl.w	r2, r1, r2
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d09b      	beq.n	8004320 <HAL_RCC_OscConfig+0xbf4>
 80043e8:	e0ad      	b.n	8004546 <HAL_RCC_OscConfig+0xe1a>
 80043ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	fa93 f2a3 	rbit	r2, r3
 80043fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004402:	601a      	str	r2, [r3, #0]
  return result;
 8004404:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004408:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440a:	fab3 f383 	clz	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004414:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	461a      	mov	r2, r3
 800441c:	2300      	movs	r3, #0
 800441e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004420:	f7fd fb84 	bl	8001b2c <HAL_GetTick>
 8004424:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004428:	e009      	b.n	800443e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442a:	f7fd fb7f 	bl	8001b2c <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e084      	b.n	8004548 <HAL_RCC_OscConfig+0xe1c>
 800443e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004442:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004448:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	fa93 f2a3 	rbit	r2, r3
 8004452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004456:	601a      	str	r2, [r3, #0]
  return result;
 8004458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800445c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800445e:	fab3 f383 	clz	r3, r3
 8004462:	b2db      	uxtb	r3, r3
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b01      	cmp	r3, #1
 8004470:	d102      	bne.n	8004478 <HAL_RCC_OscConfig+0xd4c>
 8004472:	4b38      	ldr	r3, [pc, #224]	; (8004554 <HAL_RCC_OscConfig+0xe28>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	e01b      	b.n	80044b0 <HAL_RCC_OscConfig+0xd84>
 8004478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800447c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	fa93 f2a3 	rbit	r2, r3
 800448c:	f107 0320 	add.w	r3, r7, #32
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	f107 031c 	add.w	r3, r7, #28
 8004496:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	f107 031c 	add.w	r3, r7, #28
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	fa93 f2a3 	rbit	r2, r3
 80044a6:	f107 0318 	add.w	r3, r7, #24
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	4b29      	ldr	r3, [pc, #164]	; (8004554 <HAL_RCC_OscConfig+0xe28>)
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	f107 0214 	add.w	r2, r7, #20
 80044b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044b8:	6011      	str	r1, [r2, #0]
 80044ba:	f107 0214 	add.w	r2, r7, #20
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	fa92 f1a2 	rbit	r1, r2
 80044c4:	f107 0210 	add.w	r2, r7, #16
 80044c8:	6011      	str	r1, [r2, #0]
  return result;
 80044ca:	f107 0210 	add.w	r2, r7, #16
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	fab2 f282 	clz	r2, r2
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	f042 0220 	orr.w	r2, r2, #32
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	f002 021f 	and.w	r2, r2, #31
 80044e0:	2101      	movs	r1, #1
 80044e2:	fa01 f202 	lsl.w	r2, r1, r2
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d19e      	bne.n	800442a <HAL_RCC_OscConfig+0xcfe>
 80044ec:	e02b      	b.n	8004546 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044ee:	1d3b      	adds	r3, r7, #4
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e025      	b.n	8004548 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044fc:	4b15      	ldr	r3, [pc, #84]	; (8004554 <HAL_RCC_OscConfig+0xe28>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004504:	4b13      	ldr	r3, [pc, #76]	; (8004554 <HAL_RCC_OscConfig+0xe28>)
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800450c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004510:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004514:	1d3b      	adds	r3, r7, #4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	429a      	cmp	r2, r3
 800451c:	d111      	bne.n	8004542 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800451e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004522:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004526:	1d3b      	adds	r3, r7, #4
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800452c:	429a      	cmp	r2, r3
 800452e:	d108      	bne.n	8004542 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004530:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004534:	f003 020f 	and.w	r2, r3, #15
 8004538:	1d3b      	adds	r3, r7, #4
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800453e:	429a      	cmp	r2, r3
 8004540:	d001      	beq.n	8004546 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40021000 	.word	0x40021000

08004558 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b09e      	sub	sp, #120	; 0x78
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e162      	b.n	8004836 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004570:	4b90      	ldr	r3, [pc, #576]	; (80047b4 <HAL_RCC_ClockConfig+0x25c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d910      	bls.n	80045a0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b8d      	ldr	r3, [pc, #564]	; (80047b4 <HAL_RCC_ClockConfig+0x25c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 0207 	bic.w	r2, r3, #7
 8004586:	498b      	ldr	r1, [pc, #556]	; (80047b4 <HAL_RCC_ClockConfig+0x25c>)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	4313      	orrs	r3, r2
 800458c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458e:	4b89      	ldr	r3, [pc, #548]	; (80047b4 <HAL_RCC_ClockConfig+0x25c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d001      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e14a      	b.n	8004836 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ac:	4b82      	ldr	r3, [pc, #520]	; (80047b8 <HAL_RCC_ClockConfig+0x260>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	497f      	ldr	r1, [pc, #508]	; (80047b8 <HAL_RCC_ClockConfig+0x260>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 80dc 	beq.w	8004784 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d13c      	bne.n	800464e <HAL_RCC_ClockConfig+0xf6>
 80045d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045dc:	fa93 f3a3 	rbit	r3, r3
 80045e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80045e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e4:	fab3 f383 	clz	r3, r3
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d102      	bne.n	80045fe <HAL_RCC_ClockConfig+0xa6>
 80045f8:	4b6f      	ldr	r3, [pc, #444]	; (80047b8 <HAL_RCC_ClockConfig+0x260>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	e00f      	b.n	800461e <HAL_RCC_ClockConfig+0xc6>
 80045fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004602:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004606:	fa93 f3a3 	rbit	r3, r3
 800460a:	667b      	str	r3, [r7, #100]	; 0x64
 800460c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004610:	663b      	str	r3, [r7, #96]	; 0x60
 8004612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004614:	fa93 f3a3 	rbit	r3, r3
 8004618:	65fb      	str	r3, [r7, #92]	; 0x5c
 800461a:	4b67      	ldr	r3, [pc, #412]	; (80047b8 <HAL_RCC_ClockConfig+0x260>)
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004622:	65ba      	str	r2, [r7, #88]	; 0x58
 8004624:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004626:	fa92 f2a2 	rbit	r2, r2
 800462a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800462c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800462e:	fab2 f282 	clz	r2, r2
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	f042 0220 	orr.w	r2, r2, #32
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	f002 021f 	and.w	r2, r2, #31
 800463e:	2101      	movs	r1, #1
 8004640:	fa01 f202 	lsl.w	r2, r1, r2
 8004644:	4013      	ands	r3, r2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d17b      	bne.n	8004742 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e0f3      	b.n	8004836 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d13c      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x178>
 8004656:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800465a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800465e:	fa93 f3a3 	rbit	r3, r3
 8004662:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004666:	fab3 f383 	clz	r3, r3
 800466a:	b2db      	uxtb	r3, r3
 800466c:	095b      	lsrs	r3, r3, #5
 800466e:	b2db      	uxtb	r3, r3
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b01      	cmp	r3, #1
 8004678:	d102      	bne.n	8004680 <HAL_RCC_ClockConfig+0x128>
 800467a:	4b4f      	ldr	r3, [pc, #316]	; (80047b8 <HAL_RCC_ClockConfig+0x260>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	e00f      	b.n	80046a0 <HAL_RCC_ClockConfig+0x148>
 8004680:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004684:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004688:	fa93 f3a3 	rbit	r3, r3
 800468c:	647b      	str	r3, [r7, #68]	; 0x44
 800468e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004692:	643b      	str	r3, [r7, #64]	; 0x40
 8004694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004696:	fa93 f3a3 	rbit	r3, r3
 800469a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800469c:	4b46      	ldr	r3, [pc, #280]	; (80047b8 <HAL_RCC_ClockConfig+0x260>)
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046a4:	63ba      	str	r2, [r7, #56]	; 0x38
 80046a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046a8:	fa92 f2a2 	rbit	r2, r2
 80046ac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80046ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046b0:	fab2 f282 	clz	r2, r2
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	f042 0220 	orr.w	r2, r2, #32
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	f002 021f 	and.w	r2, r2, #31
 80046c0:	2101      	movs	r1, #1
 80046c2:	fa01 f202 	lsl.w	r2, r1, r2
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d13a      	bne.n	8004742 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0b2      	b.n	8004836 <HAL_RCC_ClockConfig+0x2de>
 80046d0:	2302      	movs	r3, #2
 80046d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d6:	fa93 f3a3 	rbit	r3, r3
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80046dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046de:	fab3 f383 	clz	r3, r3
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	095b      	lsrs	r3, r3, #5
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d102      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x1a0>
 80046f2:	4b31      	ldr	r3, [pc, #196]	; (80047b8 <HAL_RCC_ClockConfig+0x260>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	e00d      	b.n	8004714 <HAL_RCC_ClockConfig+0x1bc>
 80046f8:	2302      	movs	r3, #2
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	fa93 f3a3 	rbit	r3, r3
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
 8004704:	2302      	movs	r3, #2
 8004706:	623b      	str	r3, [r7, #32]
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	fa93 f3a3 	rbit	r3, r3
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	4b29      	ldr	r3, [pc, #164]	; (80047b8 <HAL_RCC_ClockConfig+0x260>)
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	2202      	movs	r2, #2
 8004716:	61ba      	str	r2, [r7, #24]
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	fa92 f2a2 	rbit	r2, r2
 800471e:	617a      	str	r2, [r7, #20]
  return result;
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	fab2 f282 	clz	r2, r2
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	f042 0220 	orr.w	r2, r2, #32
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	f002 021f 	and.w	r2, r2, #31
 8004732:	2101      	movs	r1, #1
 8004734:	fa01 f202 	lsl.w	r2, r1, r2
 8004738:	4013      	ands	r3, r2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e079      	b.n	8004836 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004742:	4b1d      	ldr	r3, [pc, #116]	; (80047b8 <HAL_RCC_ClockConfig+0x260>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f023 0203 	bic.w	r2, r3, #3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	491a      	ldr	r1, [pc, #104]	; (80047b8 <HAL_RCC_ClockConfig+0x260>)
 8004750:	4313      	orrs	r3, r2
 8004752:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004754:	f7fd f9ea 	bl	8001b2c <HAL_GetTick>
 8004758:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800475a:	e00a      	b.n	8004772 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800475c:	f7fd f9e6 	bl	8001b2c <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	f241 3288 	movw	r2, #5000	; 0x1388
 800476a:	4293      	cmp	r3, r2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e061      	b.n	8004836 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004772:	4b11      	ldr	r3, [pc, #68]	; (80047b8 <HAL_RCC_ClockConfig+0x260>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f003 020c 	and.w	r2, r3, #12
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	429a      	cmp	r2, r3
 8004782:	d1eb      	bne.n	800475c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <HAL_RCC_ClockConfig+0x25c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d214      	bcs.n	80047bc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004792:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <HAL_RCC_ClockConfig+0x25c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 0207 	bic.w	r2, r3, #7
 800479a:	4906      	ldr	r1, [pc, #24]	; (80047b4 <HAL_RCC_ClockConfig+0x25c>)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	4313      	orrs	r3, r2
 80047a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a2:	4b04      	ldr	r3, [pc, #16]	; (80047b4 <HAL_RCC_ClockConfig+0x25c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d005      	beq.n	80047bc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e040      	b.n	8004836 <HAL_RCC_ClockConfig+0x2de>
 80047b4:	40022000 	.word	0x40022000
 80047b8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c8:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <HAL_RCC_ClockConfig+0x2e8>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	491a      	ldr	r1, [pc, #104]	; (8004840 <HAL_RCC_ClockConfig+0x2e8>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047e6:	4b16      	ldr	r3, [pc, #88]	; (8004840 <HAL_RCC_ClockConfig+0x2e8>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	4912      	ldr	r1, [pc, #72]	; (8004840 <HAL_RCC_ClockConfig+0x2e8>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80047fa:	f000 f829 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 80047fe:	4601      	mov	r1, r0
 8004800:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <HAL_RCC_ClockConfig+0x2e8>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004808:	22f0      	movs	r2, #240	; 0xf0
 800480a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	fa92 f2a2 	rbit	r2, r2
 8004812:	60fa      	str	r2, [r7, #12]
  return result;
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	fab2 f282 	clz	r2, r2
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	40d3      	lsrs	r3, r2
 800481e:	4a09      	ldr	r2, [pc, #36]	; (8004844 <HAL_RCC_ClockConfig+0x2ec>)
 8004820:	5cd3      	ldrb	r3, [r2, r3]
 8004822:	fa21 f303 	lsr.w	r3, r1, r3
 8004826:	4a08      	ldr	r2, [pc, #32]	; (8004848 <HAL_RCC_ClockConfig+0x2f0>)
 8004828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800482a:	4b08      	ldr	r3, [pc, #32]	; (800484c <HAL_RCC_ClockConfig+0x2f4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f7fd f938 	bl	8001aa4 <HAL_InitTick>
  
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3778      	adds	r7, #120	; 0x78
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40021000 	.word	0x40021000
 8004844:	080068b8 	.word	0x080068b8
 8004848:	20000000 	.word	0x20000000
 800484c:	20000004 	.word	0x20000004

08004850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004850:	b480      	push	{r7}
 8004852:	b08b      	sub	sp, #44	; 0x2c
 8004854:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	61fb      	str	r3, [r7, #28]
 800485a:	2300      	movs	r3, #0
 800485c:	61bb      	str	r3, [r7, #24]
 800485e:	2300      	movs	r3, #0
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800486a:	4b2a      	ldr	r3, [pc, #168]	; (8004914 <HAL_RCC_GetSysClockFreq+0xc4>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f003 030c 	and.w	r3, r3, #12
 8004876:	2b04      	cmp	r3, #4
 8004878:	d002      	beq.n	8004880 <HAL_RCC_GetSysClockFreq+0x30>
 800487a:	2b08      	cmp	r3, #8
 800487c:	d003      	beq.n	8004886 <HAL_RCC_GetSysClockFreq+0x36>
 800487e:	e03f      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004880:	4b25      	ldr	r3, [pc, #148]	; (8004918 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004882:	623b      	str	r3, [r7, #32]
      break;
 8004884:	e03f      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800488c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004890:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	fa92 f2a2 	rbit	r2, r2
 8004898:	607a      	str	r2, [r7, #4]
  return result;
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	fab2 f282 	clz	r2, r2
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	40d3      	lsrs	r3, r2
 80048a4:	4a1d      	ldr	r2, [pc, #116]	; (800491c <HAL_RCC_GetSysClockFreq+0xcc>)
 80048a6:	5cd3      	ldrb	r3, [r2, r3]
 80048a8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80048aa:	4b1a      	ldr	r3, [pc, #104]	; (8004914 <HAL_RCC_GetSysClockFreq+0xc4>)
 80048ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	220f      	movs	r2, #15
 80048b4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	fa92 f2a2 	rbit	r2, r2
 80048bc:	60fa      	str	r2, [r7, #12]
  return result;
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	fab2 f282 	clz	r2, r2
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	40d3      	lsrs	r3, r2
 80048c8:	4a15      	ldr	r2, [pc, #84]	; (8004920 <HAL_RCC_GetSysClockFreq+0xd0>)
 80048ca:	5cd3      	ldrb	r3, [r2, r3]
 80048cc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d008      	beq.n	80048ea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80048d8:	4a0f      	ldr	r2, [pc, #60]	; (8004918 <HAL_RCC_GetSysClockFreq+0xc8>)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	fb02 f303 	mul.w	r3, r2, r3
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
 80048e8:	e007      	b.n	80048fa <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80048ea:	4a0b      	ldr	r2, [pc, #44]	; (8004918 <HAL_RCC_GetSysClockFreq+0xc8>)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	fb02 f303 	mul.w	r3, r2, r3
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	623b      	str	r3, [r7, #32]
      break;
 80048fe:	e002      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004900:	4b05      	ldr	r3, [pc, #20]	; (8004918 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004902:	623b      	str	r3, [r7, #32]
      break;
 8004904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004906:	6a3b      	ldr	r3, [r7, #32]
}
 8004908:	4618      	mov	r0, r3
 800490a:	372c      	adds	r7, #44	; 0x2c
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	40021000 	.word	0x40021000
 8004918:	007a1200 	.word	0x007a1200
 800491c:	080068d0 	.word	0x080068d0
 8004920:	080068e0 	.word	0x080068e0

08004924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004928:	4b03      	ldr	r3, [pc, #12]	; (8004938 <HAL_RCC_GetHCLKFreq+0x14>)
 800492a:	681b      	ldr	r3, [r3, #0]
}
 800492c:	4618      	mov	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	20000000 	.word	0x20000000

0800493c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004942:	f7ff ffef 	bl	8004924 <HAL_RCC_GetHCLKFreq>
 8004946:	4601      	mov	r1, r0
 8004948:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004950:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004954:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	fa92 f2a2 	rbit	r2, r2
 800495c:	603a      	str	r2, [r7, #0]
  return result;
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	fab2 f282 	clz	r2, r2
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	40d3      	lsrs	r3, r2
 8004968:	4a04      	ldr	r2, [pc, #16]	; (800497c <HAL_RCC_GetPCLK1Freq+0x40>)
 800496a:	5cd3      	ldrb	r3, [r2, r3]
 800496c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40021000 	.word	0x40021000
 800497c:	080068c8 	.word	0x080068c8

08004980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004986:	f7ff ffcd 	bl	8004924 <HAL_RCC_GetHCLKFreq>
 800498a:	4601      	mov	r1, r0
 800498c:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004994:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004998:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	fa92 f2a2 	rbit	r2, r2
 80049a0:	603a      	str	r2, [r7, #0]
  return result;
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	fab2 f282 	clz	r2, r2
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	40d3      	lsrs	r3, r2
 80049ac:	4a04      	ldr	r2, [pc, #16]	; (80049c0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80049ae:	5cd3      	ldrb	r3, [r2, r3]
 80049b0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80049b4:	4618      	mov	r0, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40021000 	.word	0x40021000
 80049c0:	080068c8 	.word	0x080068c8

080049c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b092      	sub	sp, #72	; 0x48
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80049d4:	2300      	movs	r3, #0
 80049d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 80d4 	beq.w	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e8:	4b4e      	ldr	r3, [pc, #312]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10e      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f4:	4b4b      	ldr	r3, [pc, #300]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	4a4a      	ldr	r2, [pc, #296]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049fe:	61d3      	str	r3, [r2, #28]
 8004a00:	4b48      	ldr	r3, [pc, #288]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a12:	4b45      	ldr	r3, [pc, #276]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d118      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a1e:	4b42      	ldr	r3, [pc, #264]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a41      	ldr	r2, [pc, #260]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a28:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a2a:	f7fd f87f 	bl	8001b2c <HAL_GetTick>
 8004a2e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a30:	e008      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a32:	f7fd f87b 	bl	8001b2c <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b64      	cmp	r3, #100	; 0x64
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e1d6      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a44:	4b38      	ldr	r3, [pc, #224]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0f0      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a50:	4b34      	ldr	r3, [pc, #208]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a58:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8084 	beq.w	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d07c      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a70:	4b2c      	ldr	r3, [pc, #176]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	fa93 f3a3 	rbit	r3, r3
 8004a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a8a:	fab3 f383 	clz	r3, r3
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	461a      	mov	r2, r3
 8004a92:	4b26      	ldr	r3, [pc, #152]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	461a      	mov	r2, r3
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004aa2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa6:	fa93 f3a3 	rbit	r3, r3
 8004aaa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004aae:	fab3 f383 	clz	r3, r3
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4b1d      	ldr	r3, [pc, #116]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	461a      	mov	r2, r3
 8004abe:	2300      	movs	r3, #0
 8004ac0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ac2:	4a18      	ldr	r2, [pc, #96]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d04b      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad2:	f7fd f82b 	bl	8001b2c <HAL_GetTick>
 8004ad6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad8:	e00a      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ada:	f7fd f827 	bl	8001b2c <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e180      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004af0:	2302      	movs	r3, #2
 8004af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af6:	fa93 f3a3 	rbit	r3, r3
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
 8004afc:	2302      	movs	r3, #2
 8004afe:	623b      	str	r3, [r7, #32]
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	fa93 f3a3 	rbit	r3, r3
 8004b06:	61fb      	str	r3, [r7, #28]
  return result;
 8004b08:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b0a:	fab3 f383 	clz	r3, r3
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	f043 0302 	orr.w	r3, r3, #2
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d108      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004b1e:	4b01      	ldr	r3, [pc, #4]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	e00d      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004b24:	40021000 	.word	0x40021000
 8004b28:	40007000 	.word	0x40007000
 8004b2c:	10908100 	.word	0x10908100
 8004b30:	2302      	movs	r3, #2
 8004b32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	fa93 f3a3 	rbit	r3, r3
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	4ba0      	ldr	r3, [pc, #640]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	2202      	movs	r2, #2
 8004b42:	613a      	str	r2, [r7, #16]
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	fa92 f2a2 	rbit	r2, r2
 8004b4a:	60fa      	str	r2, [r7, #12]
  return result;
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	fab2 f282 	clz	r2, r2
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	f002 021f 	and.w	r2, r2, #31
 8004b5e:	2101      	movs	r1, #1
 8004b60:	fa01 f202 	lsl.w	r2, r1, r2
 8004b64:	4013      	ands	r3, r2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0b7      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004b6a:	4b95      	ldr	r3, [pc, #596]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	4992      	ldr	r1, [pc, #584]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d105      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b84:	4b8e      	ldr	r3, [pc, #568]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	4a8d      	ldr	r2, [pc, #564]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b9c:	4b88      	ldr	r3, [pc, #544]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	f023 0203 	bic.w	r2, r3, #3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	4985      	ldr	r1, [pc, #532]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d008      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bba:	4b81      	ldr	r3, [pc, #516]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	497e      	ldr	r1, [pc, #504]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d008      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bd8:	4b79      	ldr	r3, [pc, #484]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	4976      	ldr	r1, [pc, #472]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d008      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bf6:	4b72      	ldr	r3, [pc, #456]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	f023 0210 	bic.w	r2, r3, #16
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	496f      	ldr	r1, [pc, #444]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004c14:	4b6a      	ldr	r3, [pc, #424]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c20:	4967      	ldr	r1, [pc, #412]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d008      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c32:	4b63      	ldr	r3, [pc, #396]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	f023 0220 	bic.w	r2, r3, #32
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	4960      	ldr	r1, [pc, #384]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d008      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c50:	4b5b      	ldr	r3, [pc, #364]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	4958      	ldr	r1, [pc, #352]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d008      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c6e:	4b54      	ldr	r3, [pc, #336]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	4951      	ldr	r1, [pc, #324]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0310 	and.w	r3, r3, #16
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d008      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c8c:	4b4c      	ldr	r3, [pc, #304]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	4949      	ldr	r1, [pc, #292]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d008      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004caa:	4b45      	ldr	r3, [pc, #276]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	4942      	ldr	r1, [pc, #264]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d008      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004cc8:	4b3d      	ldr	r3, [pc, #244]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	493a      	ldr	r1, [pc, #232]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d008      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004ce6:	4b36      	ldr	r3, [pc, #216]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cea:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf2:	4933      	ldr	r1, [pc, #204]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d008      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004d04:	4b2e      	ldr	r3, [pc, #184]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d10:	492b      	ldr	r1, [pc, #172]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004d22:	4b27      	ldr	r3, [pc, #156]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	4924      	ldr	r1, [pc, #144]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004d40:	4b1f      	ldr	r3, [pc, #124]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	491c      	ldr	r1, [pc, #112]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d008      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004d5e:	4b18      	ldr	r3, [pc, #96]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6a:	4915      	ldr	r1, [pc, #84]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d008      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004d7c:	4b10      	ldr	r3, [pc, #64]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d80:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d88:	490d      	ldr	r1, [pc, #52]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d008      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004d9a:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da6:	4906      	ldr	r1, [pc, #24]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00c      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004db8:	4b01      	ldr	r3, [pc, #4]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	e002      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004dbe:	bf00      	nop
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dcc:	490b      	ldr	r1, [pc, #44]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d008      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004dde:	4b07      	ldr	r3, [pc, #28]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dea:	4904      	ldr	r1, [pc, #16]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3748      	adds	r7, #72	; 0x48
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	40021000 	.word	0x40021000

08004e00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e09d      	b.n	8004f4e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d108      	bne.n	8004e2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e22:	d009      	beq.n	8004e38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	61da      	str	r2, [r3, #28]
 8004e2a:	e005      	b.n	8004e38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fc fbb0 	bl	80015b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e78:	d902      	bls.n	8004e80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	e002      	b.n	8004e86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e8e:	d007      	beq.n	8004ea0 <HAL_SPI_Init+0xa0>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e98:	d002      	beq.n	8004ea0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee2:	ea42 0103 	orr.w	r1, r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	0c1b      	lsrs	r3, r3, #16
 8004efc:	f003 0204 	and.w	r2, r3, #4
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	f003 0310 	and.w	r3, r3, #16
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f1c:	ea42 0103 	orr.w	r1, r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69da      	ldr	r2, [r3, #28]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b082      	sub	sp, #8
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e040      	b.n	8004fea <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d106      	bne.n	8004f7e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7fc fcf1 	bl	8001960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2224      	movs	r2, #36	; 0x24
 8004f82:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0201 	bic.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f8c1 	bl	800511c <UART_SetConfig>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d101      	bne.n	8004fa4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e022      	b.n	8004fea <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fa8b 	bl	80054c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fc0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fd0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0201 	orr.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fb12 	bl	800560c <UART_CheckIdleState>
 8004fe8:	4603      	mov	r3, r0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b08a      	sub	sp, #40	; 0x28
 8004ff6:	af02      	add	r7, sp, #8
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	603b      	str	r3, [r7, #0]
 8004ffe:	4613      	mov	r3, r2
 8005000:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005006:	2b20      	cmp	r3, #32
 8005008:	f040 8082 	bne.w	8005110 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <HAL_UART_Transmit+0x26>
 8005012:	88fb      	ldrh	r3, [r7, #6]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e07a      	b.n	8005112 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005022:	2b01      	cmp	r3, #1
 8005024:	d101      	bne.n	800502a <HAL_UART_Transmit+0x38>
 8005026:	2302      	movs	r3, #2
 8005028:	e073      	b.n	8005112 <HAL_UART_Transmit+0x120>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2221      	movs	r2, #33	; 0x21
 800503e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005040:	f7fc fd74 	bl	8001b2c <HAL_GetTick>
 8005044:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	88fa      	ldrh	r2, [r7, #6]
 800504a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	88fa      	ldrh	r2, [r7, #6]
 8005052:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505e:	d108      	bne.n	8005072 <HAL_UART_Transmit+0x80>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d104      	bne.n	8005072 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005068:	2300      	movs	r3, #0
 800506a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	61bb      	str	r3, [r7, #24]
 8005070:	e003      	b.n	800507a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005076:	2300      	movs	r3, #0
 8005078:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005082:	e02d      	b.n	80050e0 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2200      	movs	r2, #0
 800508c:	2180      	movs	r1, #128	; 0x80
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 fb05 	bl	800569e <UART_WaitOnFlagUntilTimeout>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e039      	b.n	8005112 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10b      	bne.n	80050bc <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	881a      	ldrh	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050b0:	b292      	uxth	r2, r2
 80050b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	3302      	adds	r3, #2
 80050b8:	61bb      	str	r3, [r7, #24]
 80050ba:	e008      	b.n	80050ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	781a      	ldrb	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	b292      	uxth	r2, r2
 80050c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	3301      	adds	r3, #1
 80050cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1cb      	bne.n	8005084 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2200      	movs	r2, #0
 80050f4:	2140      	movs	r1, #64	; 0x40
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 fad1 	bl	800569e <UART_WaitOnFlagUntilTimeout>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e005      	b.n	8005112 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2220      	movs	r2, #32
 800510a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800510c:	2300      	movs	r3, #0
 800510e:	e000      	b.n	8005112 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005110:	2302      	movs	r3, #2
  }
}
 8005112:	4618      	mov	r0, r3
 8005114:	3720      	adds	r7, #32
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	4bab      	ldr	r3, [pc, #684]	; (80053f4 <UART_SetConfig+0x2d8>)
 8005148:	4013      	ands	r3, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6812      	ldr	r2, [r2, #0]
 800514e:	6979      	ldr	r1, [r7, #20]
 8005150:	430b      	orrs	r3, r1
 8005152:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	430a      	orrs	r2, r1
 800518c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a99      	ldr	r2, [pc, #612]	; (80053f8 <UART_SetConfig+0x2dc>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d120      	bne.n	80051da <UART_SetConfig+0xbe>
 8005198:	4b98      	ldr	r3, [pc, #608]	; (80053fc <UART_SetConfig+0x2e0>)
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d817      	bhi.n	80051d4 <UART_SetConfig+0xb8>
 80051a4:	a201      	add	r2, pc, #4	; (adr r2, 80051ac <UART_SetConfig+0x90>)
 80051a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051aa:	bf00      	nop
 80051ac:	080051bd 	.word	0x080051bd
 80051b0:	080051c9 	.word	0x080051c9
 80051b4:	080051cf 	.word	0x080051cf
 80051b8:	080051c3 	.word	0x080051c3
 80051bc:	2301      	movs	r3, #1
 80051be:	77fb      	strb	r3, [r7, #31]
 80051c0:	e0b5      	b.n	800532e <UART_SetConfig+0x212>
 80051c2:	2302      	movs	r3, #2
 80051c4:	77fb      	strb	r3, [r7, #31]
 80051c6:	e0b2      	b.n	800532e <UART_SetConfig+0x212>
 80051c8:	2304      	movs	r3, #4
 80051ca:	77fb      	strb	r3, [r7, #31]
 80051cc:	e0af      	b.n	800532e <UART_SetConfig+0x212>
 80051ce:	2308      	movs	r3, #8
 80051d0:	77fb      	strb	r3, [r7, #31]
 80051d2:	e0ac      	b.n	800532e <UART_SetConfig+0x212>
 80051d4:	2310      	movs	r3, #16
 80051d6:	77fb      	strb	r3, [r7, #31]
 80051d8:	e0a9      	b.n	800532e <UART_SetConfig+0x212>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a88      	ldr	r2, [pc, #544]	; (8005400 <UART_SetConfig+0x2e4>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d124      	bne.n	800522e <UART_SetConfig+0x112>
 80051e4:	4b85      	ldr	r3, [pc, #532]	; (80053fc <UART_SetConfig+0x2e0>)
 80051e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051f0:	d011      	beq.n	8005216 <UART_SetConfig+0xfa>
 80051f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051f6:	d817      	bhi.n	8005228 <UART_SetConfig+0x10c>
 80051f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051fc:	d011      	beq.n	8005222 <UART_SetConfig+0x106>
 80051fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005202:	d811      	bhi.n	8005228 <UART_SetConfig+0x10c>
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <UART_SetConfig+0xf4>
 8005208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520c:	d006      	beq.n	800521c <UART_SetConfig+0x100>
 800520e:	e00b      	b.n	8005228 <UART_SetConfig+0x10c>
 8005210:	2300      	movs	r3, #0
 8005212:	77fb      	strb	r3, [r7, #31]
 8005214:	e08b      	b.n	800532e <UART_SetConfig+0x212>
 8005216:	2302      	movs	r3, #2
 8005218:	77fb      	strb	r3, [r7, #31]
 800521a:	e088      	b.n	800532e <UART_SetConfig+0x212>
 800521c:	2304      	movs	r3, #4
 800521e:	77fb      	strb	r3, [r7, #31]
 8005220:	e085      	b.n	800532e <UART_SetConfig+0x212>
 8005222:	2308      	movs	r3, #8
 8005224:	77fb      	strb	r3, [r7, #31]
 8005226:	e082      	b.n	800532e <UART_SetConfig+0x212>
 8005228:	2310      	movs	r3, #16
 800522a:	77fb      	strb	r3, [r7, #31]
 800522c:	e07f      	b.n	800532e <UART_SetConfig+0x212>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a74      	ldr	r2, [pc, #464]	; (8005404 <UART_SetConfig+0x2e8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d124      	bne.n	8005282 <UART_SetConfig+0x166>
 8005238:	4b70      	ldr	r3, [pc, #448]	; (80053fc <UART_SetConfig+0x2e0>)
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005240:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005244:	d011      	beq.n	800526a <UART_SetConfig+0x14e>
 8005246:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800524a:	d817      	bhi.n	800527c <UART_SetConfig+0x160>
 800524c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005250:	d011      	beq.n	8005276 <UART_SetConfig+0x15a>
 8005252:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005256:	d811      	bhi.n	800527c <UART_SetConfig+0x160>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <UART_SetConfig+0x148>
 800525c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005260:	d006      	beq.n	8005270 <UART_SetConfig+0x154>
 8005262:	e00b      	b.n	800527c <UART_SetConfig+0x160>
 8005264:	2300      	movs	r3, #0
 8005266:	77fb      	strb	r3, [r7, #31]
 8005268:	e061      	b.n	800532e <UART_SetConfig+0x212>
 800526a:	2302      	movs	r3, #2
 800526c:	77fb      	strb	r3, [r7, #31]
 800526e:	e05e      	b.n	800532e <UART_SetConfig+0x212>
 8005270:	2304      	movs	r3, #4
 8005272:	77fb      	strb	r3, [r7, #31]
 8005274:	e05b      	b.n	800532e <UART_SetConfig+0x212>
 8005276:	2308      	movs	r3, #8
 8005278:	77fb      	strb	r3, [r7, #31]
 800527a:	e058      	b.n	800532e <UART_SetConfig+0x212>
 800527c:	2310      	movs	r3, #16
 800527e:	77fb      	strb	r3, [r7, #31]
 8005280:	e055      	b.n	800532e <UART_SetConfig+0x212>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a60      	ldr	r2, [pc, #384]	; (8005408 <UART_SetConfig+0x2ec>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d124      	bne.n	80052d6 <UART_SetConfig+0x1ba>
 800528c:	4b5b      	ldr	r3, [pc, #364]	; (80053fc <UART_SetConfig+0x2e0>)
 800528e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005290:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005294:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005298:	d011      	beq.n	80052be <UART_SetConfig+0x1a2>
 800529a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800529e:	d817      	bhi.n	80052d0 <UART_SetConfig+0x1b4>
 80052a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052a4:	d011      	beq.n	80052ca <UART_SetConfig+0x1ae>
 80052a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052aa:	d811      	bhi.n	80052d0 <UART_SetConfig+0x1b4>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <UART_SetConfig+0x19c>
 80052b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052b4:	d006      	beq.n	80052c4 <UART_SetConfig+0x1a8>
 80052b6:	e00b      	b.n	80052d0 <UART_SetConfig+0x1b4>
 80052b8:	2300      	movs	r3, #0
 80052ba:	77fb      	strb	r3, [r7, #31]
 80052bc:	e037      	b.n	800532e <UART_SetConfig+0x212>
 80052be:	2302      	movs	r3, #2
 80052c0:	77fb      	strb	r3, [r7, #31]
 80052c2:	e034      	b.n	800532e <UART_SetConfig+0x212>
 80052c4:	2304      	movs	r3, #4
 80052c6:	77fb      	strb	r3, [r7, #31]
 80052c8:	e031      	b.n	800532e <UART_SetConfig+0x212>
 80052ca:	2308      	movs	r3, #8
 80052cc:	77fb      	strb	r3, [r7, #31]
 80052ce:	e02e      	b.n	800532e <UART_SetConfig+0x212>
 80052d0:	2310      	movs	r3, #16
 80052d2:	77fb      	strb	r3, [r7, #31]
 80052d4:	e02b      	b.n	800532e <UART_SetConfig+0x212>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a4c      	ldr	r2, [pc, #304]	; (800540c <UART_SetConfig+0x2f0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d124      	bne.n	800532a <UART_SetConfig+0x20e>
 80052e0:	4b46      	ldr	r3, [pc, #280]	; (80053fc <UART_SetConfig+0x2e0>)
 80052e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80052e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052ec:	d011      	beq.n	8005312 <UART_SetConfig+0x1f6>
 80052ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052f2:	d817      	bhi.n	8005324 <UART_SetConfig+0x208>
 80052f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052f8:	d011      	beq.n	800531e <UART_SetConfig+0x202>
 80052fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052fe:	d811      	bhi.n	8005324 <UART_SetConfig+0x208>
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <UART_SetConfig+0x1f0>
 8005304:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005308:	d006      	beq.n	8005318 <UART_SetConfig+0x1fc>
 800530a:	e00b      	b.n	8005324 <UART_SetConfig+0x208>
 800530c:	2300      	movs	r3, #0
 800530e:	77fb      	strb	r3, [r7, #31]
 8005310:	e00d      	b.n	800532e <UART_SetConfig+0x212>
 8005312:	2302      	movs	r3, #2
 8005314:	77fb      	strb	r3, [r7, #31]
 8005316:	e00a      	b.n	800532e <UART_SetConfig+0x212>
 8005318:	2304      	movs	r3, #4
 800531a:	77fb      	strb	r3, [r7, #31]
 800531c:	e007      	b.n	800532e <UART_SetConfig+0x212>
 800531e:	2308      	movs	r3, #8
 8005320:	77fb      	strb	r3, [r7, #31]
 8005322:	e004      	b.n	800532e <UART_SetConfig+0x212>
 8005324:	2310      	movs	r3, #16
 8005326:	77fb      	strb	r3, [r7, #31]
 8005328:	e001      	b.n	800532e <UART_SetConfig+0x212>
 800532a:	2310      	movs	r3, #16
 800532c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005336:	d16d      	bne.n	8005414 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8005338:	7ffb      	ldrb	r3, [r7, #31]
 800533a:	2b08      	cmp	r3, #8
 800533c:	d827      	bhi.n	800538e <UART_SetConfig+0x272>
 800533e:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <UART_SetConfig+0x228>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	08005369 	.word	0x08005369
 8005348:	08005371 	.word	0x08005371
 800534c:	08005379 	.word	0x08005379
 8005350:	0800538f 	.word	0x0800538f
 8005354:	0800537f 	.word	0x0800537f
 8005358:	0800538f 	.word	0x0800538f
 800535c:	0800538f 	.word	0x0800538f
 8005360:	0800538f 	.word	0x0800538f
 8005364:	08005387 	.word	0x08005387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005368:	f7ff fae8 	bl	800493c <HAL_RCC_GetPCLK1Freq>
 800536c:	61b8      	str	r0, [r7, #24]
        break;
 800536e:	e013      	b.n	8005398 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005370:	f7ff fb06 	bl	8004980 <HAL_RCC_GetPCLK2Freq>
 8005374:	61b8      	str	r0, [r7, #24]
        break;
 8005376:	e00f      	b.n	8005398 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005378:	4b25      	ldr	r3, [pc, #148]	; (8005410 <UART_SetConfig+0x2f4>)
 800537a:	61bb      	str	r3, [r7, #24]
        break;
 800537c:	e00c      	b.n	8005398 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800537e:	f7ff fa67 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 8005382:	61b8      	str	r0, [r7, #24]
        break;
 8005384:	e008      	b.n	8005398 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800538a:	61bb      	str	r3, [r7, #24]
        break;
 800538c:	e004      	b.n	8005398 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	77bb      	strb	r3, [r7, #30]
        break;
 8005396:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 8086 	beq.w	80054ac <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	005a      	lsls	r2, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	085b      	lsrs	r3, r3, #1
 80053aa:	441a      	add	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	2b0f      	cmp	r3, #15
 80053bc:	d916      	bls.n	80053ec <UART_SetConfig+0x2d0>
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c4:	d212      	bcs.n	80053ec <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	f023 030f 	bic.w	r3, r3, #15
 80053ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	085b      	lsrs	r3, r3, #1
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	b29a      	uxth	r2, r3
 80053dc:	89fb      	ldrh	r3, [r7, #14]
 80053de:	4313      	orrs	r3, r2
 80053e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	89fa      	ldrh	r2, [r7, #14]
 80053e8:	60da      	str	r2, [r3, #12]
 80053ea:	e05f      	b.n	80054ac <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	77bb      	strb	r3, [r7, #30]
 80053f0:	e05c      	b.n	80054ac <UART_SetConfig+0x390>
 80053f2:	bf00      	nop
 80053f4:	efff69f3 	.word	0xefff69f3
 80053f8:	40013800 	.word	0x40013800
 80053fc:	40021000 	.word	0x40021000
 8005400:	40004400 	.word	0x40004400
 8005404:	40004800 	.word	0x40004800
 8005408:	40004c00 	.word	0x40004c00
 800540c:	40005000 	.word	0x40005000
 8005410:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8005414:	7ffb      	ldrb	r3, [r7, #31]
 8005416:	2b08      	cmp	r3, #8
 8005418:	d827      	bhi.n	800546a <UART_SetConfig+0x34e>
 800541a:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <UART_SetConfig+0x304>)
 800541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005420:	08005445 	.word	0x08005445
 8005424:	0800544d 	.word	0x0800544d
 8005428:	08005455 	.word	0x08005455
 800542c:	0800546b 	.word	0x0800546b
 8005430:	0800545b 	.word	0x0800545b
 8005434:	0800546b 	.word	0x0800546b
 8005438:	0800546b 	.word	0x0800546b
 800543c:	0800546b 	.word	0x0800546b
 8005440:	08005463 	.word	0x08005463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005444:	f7ff fa7a 	bl	800493c <HAL_RCC_GetPCLK1Freq>
 8005448:	61b8      	str	r0, [r7, #24]
        break;
 800544a:	e013      	b.n	8005474 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800544c:	f7ff fa98 	bl	8004980 <HAL_RCC_GetPCLK2Freq>
 8005450:	61b8      	str	r0, [r7, #24]
        break;
 8005452:	e00f      	b.n	8005474 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005454:	4b1b      	ldr	r3, [pc, #108]	; (80054c4 <UART_SetConfig+0x3a8>)
 8005456:	61bb      	str	r3, [r7, #24]
        break;
 8005458:	e00c      	b.n	8005474 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800545a:	f7ff f9f9 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 800545e:	61b8      	str	r0, [r7, #24]
        break;
 8005460:	e008      	b.n	8005474 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005466:	61bb      	str	r3, [r7, #24]
        break;
 8005468:	e004      	b.n	8005474 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	77bb      	strb	r3, [r7, #30]
        break;
 8005472:	bf00      	nop
    }

    if (pclk != 0U)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d018      	beq.n	80054ac <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	085a      	lsrs	r2, r3, #1
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	441a      	add	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	fbb2 f3f3 	udiv	r3, r2, r3
 800548c:	b29b      	uxth	r3, r3
 800548e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	2b0f      	cmp	r3, #15
 8005494:	d908      	bls.n	80054a8 <UART_SetConfig+0x38c>
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800549c:	d204      	bcs.n	80054a8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	60da      	str	r2, [r3, #12]
 80054a6:	e001      	b.n	80054ac <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80054b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3720      	adds	r7, #32
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	007a1200 	.word	0x007a1200

080054c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00a      	beq.n	8005536 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	f003 0310 	and.w	r3, r3, #16
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01a      	beq.n	80055de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055c6:	d10a      	bne.n	80055de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	605a      	str	r2, [r3, #4]
  }
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af02      	add	r7, sp, #8
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800561c:	f7fc fa86 	bl	8001b2c <HAL_GetTick>
 8005620:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0308 	and.w	r3, r3, #8
 800562c:	2b08      	cmp	r3, #8
 800562e:	d10e      	bne.n	800564e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005630:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f82d 	bl	800569e <UART_WaitOnFlagUntilTimeout>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e023      	b.n	8005696 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b04      	cmp	r3, #4
 800565a:	d10e      	bne.n	800567a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800565c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f817 	bl	800569e <UART_WaitOnFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e00d      	b.n	8005696 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2220      	movs	r2, #32
 8005684:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	603b      	str	r3, [r7, #0]
 80056aa:	4613      	mov	r3, r2
 80056ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ae:	e05e      	b.n	800576e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056b6:	d05a      	beq.n	800576e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b8:	f7fc fa38 	bl	8001b2c <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d302      	bcc.n	80056ce <UART_WaitOnFlagUntilTimeout+0x30>
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d11b      	bne.n	8005706 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0201 	bic.w	r2, r2, #1
 80056ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2220      	movs	r2, #32
 80056f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e043      	b.n	800578e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d02c      	beq.n	800576e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800571e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005722:	d124      	bne.n	800576e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800572c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800573c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0201 	bic.w	r2, r2, #1
 800574c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2220      	movs	r2, #32
 8005752:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2220      	movs	r2, #32
 800575e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e00f      	b.n	800578e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4013      	ands	r3, r2
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	429a      	cmp	r2, r3
 800577c:	bf0c      	ite	eq
 800577e:	2301      	moveq	r3, #1
 8005780:	2300      	movne	r3, #0
 8005782:	b2db      	uxtb	r3, r3
 8005784:	461a      	mov	r2, r3
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	429a      	cmp	r2, r3
 800578a:	d091      	beq.n	80056b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <__errno>:
 8005798:	4b01      	ldr	r3, [pc, #4]	; (80057a0 <__errno+0x8>)
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	2000000c 	.word	0x2000000c

080057a4 <__libc_init_array>:
 80057a4:	b570      	push	{r4, r5, r6, lr}
 80057a6:	4d0d      	ldr	r5, [pc, #52]	; (80057dc <__libc_init_array+0x38>)
 80057a8:	4c0d      	ldr	r4, [pc, #52]	; (80057e0 <__libc_init_array+0x3c>)
 80057aa:	1b64      	subs	r4, r4, r5
 80057ac:	10a4      	asrs	r4, r4, #2
 80057ae:	2600      	movs	r6, #0
 80057b0:	42a6      	cmp	r6, r4
 80057b2:	d109      	bne.n	80057c8 <__libc_init_array+0x24>
 80057b4:	4d0b      	ldr	r5, [pc, #44]	; (80057e4 <__libc_init_array+0x40>)
 80057b6:	4c0c      	ldr	r4, [pc, #48]	; (80057e8 <__libc_init_array+0x44>)
 80057b8:	f000 ff76 	bl	80066a8 <_init>
 80057bc:	1b64      	subs	r4, r4, r5
 80057be:	10a4      	asrs	r4, r4, #2
 80057c0:	2600      	movs	r6, #0
 80057c2:	42a6      	cmp	r6, r4
 80057c4:	d105      	bne.n	80057d2 <__libc_init_array+0x2e>
 80057c6:	bd70      	pop	{r4, r5, r6, pc}
 80057c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057cc:	4798      	blx	r3
 80057ce:	3601      	adds	r6, #1
 80057d0:	e7ee      	b.n	80057b0 <__libc_init_array+0xc>
 80057d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d6:	4798      	blx	r3
 80057d8:	3601      	adds	r6, #1
 80057da:	e7f2      	b.n	80057c2 <__libc_init_array+0x1e>
 80057dc:	08006988 	.word	0x08006988
 80057e0:	08006988 	.word	0x08006988
 80057e4:	08006988 	.word	0x08006988
 80057e8:	0800698c 	.word	0x0800698c

080057ec <memset>:
 80057ec:	4402      	add	r2, r0
 80057ee:	4603      	mov	r3, r0
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d100      	bne.n	80057f6 <memset+0xa>
 80057f4:	4770      	bx	lr
 80057f6:	f803 1b01 	strb.w	r1, [r3], #1
 80057fa:	e7f9      	b.n	80057f0 <memset+0x4>

080057fc <iprintf>:
 80057fc:	b40f      	push	{r0, r1, r2, r3}
 80057fe:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <iprintf+0x2c>)
 8005800:	b513      	push	{r0, r1, r4, lr}
 8005802:	681c      	ldr	r4, [r3, #0]
 8005804:	b124      	cbz	r4, 8005810 <iprintf+0x14>
 8005806:	69a3      	ldr	r3, [r4, #24]
 8005808:	b913      	cbnz	r3, 8005810 <iprintf+0x14>
 800580a:	4620      	mov	r0, r4
 800580c:	f000 f866 	bl	80058dc <__sinit>
 8005810:	ab05      	add	r3, sp, #20
 8005812:	9a04      	ldr	r2, [sp, #16]
 8005814:	68a1      	ldr	r1, [r4, #8]
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	4620      	mov	r0, r4
 800581a:	f000 f983 	bl	8005b24 <_vfiprintf_r>
 800581e:	b002      	add	sp, #8
 8005820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005824:	b004      	add	sp, #16
 8005826:	4770      	bx	lr
 8005828:	2000000c 	.word	0x2000000c

0800582c <std>:
 800582c:	2300      	movs	r3, #0
 800582e:	b510      	push	{r4, lr}
 8005830:	4604      	mov	r4, r0
 8005832:	e9c0 3300 	strd	r3, r3, [r0]
 8005836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800583a:	6083      	str	r3, [r0, #8]
 800583c:	8181      	strh	r1, [r0, #12]
 800583e:	6643      	str	r3, [r0, #100]	; 0x64
 8005840:	81c2      	strh	r2, [r0, #14]
 8005842:	6183      	str	r3, [r0, #24]
 8005844:	4619      	mov	r1, r3
 8005846:	2208      	movs	r2, #8
 8005848:	305c      	adds	r0, #92	; 0x5c
 800584a:	f7ff ffcf 	bl	80057ec <memset>
 800584e:	4b05      	ldr	r3, [pc, #20]	; (8005864 <std+0x38>)
 8005850:	6263      	str	r3, [r4, #36]	; 0x24
 8005852:	4b05      	ldr	r3, [pc, #20]	; (8005868 <std+0x3c>)
 8005854:	62a3      	str	r3, [r4, #40]	; 0x28
 8005856:	4b05      	ldr	r3, [pc, #20]	; (800586c <std+0x40>)
 8005858:	62e3      	str	r3, [r4, #44]	; 0x2c
 800585a:	4b05      	ldr	r3, [pc, #20]	; (8005870 <std+0x44>)
 800585c:	6224      	str	r4, [r4, #32]
 800585e:	6323      	str	r3, [r4, #48]	; 0x30
 8005860:	bd10      	pop	{r4, pc}
 8005862:	bf00      	nop
 8005864:	080060cd 	.word	0x080060cd
 8005868:	080060ef 	.word	0x080060ef
 800586c:	08006127 	.word	0x08006127
 8005870:	0800614b 	.word	0x0800614b

08005874 <_cleanup_r>:
 8005874:	4901      	ldr	r1, [pc, #4]	; (800587c <_cleanup_r+0x8>)
 8005876:	f000 b8af 	b.w	80059d8 <_fwalk_reent>
 800587a:	bf00      	nop
 800587c:	08006425 	.word	0x08006425

08005880 <__sfmoreglue>:
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	1e4a      	subs	r2, r1, #1
 8005884:	2568      	movs	r5, #104	; 0x68
 8005886:	4355      	muls	r5, r2
 8005888:	460e      	mov	r6, r1
 800588a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800588e:	f000 f8c5 	bl	8005a1c <_malloc_r>
 8005892:	4604      	mov	r4, r0
 8005894:	b140      	cbz	r0, 80058a8 <__sfmoreglue+0x28>
 8005896:	2100      	movs	r1, #0
 8005898:	e9c0 1600 	strd	r1, r6, [r0]
 800589c:	300c      	adds	r0, #12
 800589e:	60a0      	str	r0, [r4, #8]
 80058a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058a4:	f7ff ffa2 	bl	80057ec <memset>
 80058a8:	4620      	mov	r0, r4
 80058aa:	bd70      	pop	{r4, r5, r6, pc}

080058ac <__sfp_lock_acquire>:
 80058ac:	4801      	ldr	r0, [pc, #4]	; (80058b4 <__sfp_lock_acquire+0x8>)
 80058ae:	f000 b8b3 	b.w	8005a18 <__retarget_lock_acquire_recursive>
 80058b2:	bf00      	nop
 80058b4:	20000b14 	.word	0x20000b14

080058b8 <__sfp_lock_release>:
 80058b8:	4801      	ldr	r0, [pc, #4]	; (80058c0 <__sfp_lock_release+0x8>)
 80058ba:	f000 b8ae 	b.w	8005a1a <__retarget_lock_release_recursive>
 80058be:	bf00      	nop
 80058c0:	20000b14 	.word	0x20000b14

080058c4 <__sinit_lock_acquire>:
 80058c4:	4801      	ldr	r0, [pc, #4]	; (80058cc <__sinit_lock_acquire+0x8>)
 80058c6:	f000 b8a7 	b.w	8005a18 <__retarget_lock_acquire_recursive>
 80058ca:	bf00      	nop
 80058cc:	20000b0f 	.word	0x20000b0f

080058d0 <__sinit_lock_release>:
 80058d0:	4801      	ldr	r0, [pc, #4]	; (80058d8 <__sinit_lock_release+0x8>)
 80058d2:	f000 b8a2 	b.w	8005a1a <__retarget_lock_release_recursive>
 80058d6:	bf00      	nop
 80058d8:	20000b0f 	.word	0x20000b0f

080058dc <__sinit>:
 80058dc:	b510      	push	{r4, lr}
 80058de:	4604      	mov	r4, r0
 80058e0:	f7ff fff0 	bl	80058c4 <__sinit_lock_acquire>
 80058e4:	69a3      	ldr	r3, [r4, #24]
 80058e6:	b11b      	cbz	r3, 80058f0 <__sinit+0x14>
 80058e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058ec:	f7ff bff0 	b.w	80058d0 <__sinit_lock_release>
 80058f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80058f4:	6523      	str	r3, [r4, #80]	; 0x50
 80058f6:	4b13      	ldr	r3, [pc, #76]	; (8005944 <__sinit+0x68>)
 80058f8:	4a13      	ldr	r2, [pc, #76]	; (8005948 <__sinit+0x6c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80058fe:	42a3      	cmp	r3, r4
 8005900:	bf04      	itt	eq
 8005902:	2301      	moveq	r3, #1
 8005904:	61a3      	streq	r3, [r4, #24]
 8005906:	4620      	mov	r0, r4
 8005908:	f000 f820 	bl	800594c <__sfp>
 800590c:	6060      	str	r0, [r4, #4]
 800590e:	4620      	mov	r0, r4
 8005910:	f000 f81c 	bl	800594c <__sfp>
 8005914:	60a0      	str	r0, [r4, #8]
 8005916:	4620      	mov	r0, r4
 8005918:	f000 f818 	bl	800594c <__sfp>
 800591c:	2200      	movs	r2, #0
 800591e:	60e0      	str	r0, [r4, #12]
 8005920:	2104      	movs	r1, #4
 8005922:	6860      	ldr	r0, [r4, #4]
 8005924:	f7ff ff82 	bl	800582c <std>
 8005928:	68a0      	ldr	r0, [r4, #8]
 800592a:	2201      	movs	r2, #1
 800592c:	2109      	movs	r1, #9
 800592e:	f7ff ff7d 	bl	800582c <std>
 8005932:	68e0      	ldr	r0, [r4, #12]
 8005934:	2202      	movs	r2, #2
 8005936:	2112      	movs	r1, #18
 8005938:	f7ff ff78 	bl	800582c <std>
 800593c:	2301      	movs	r3, #1
 800593e:	61a3      	str	r3, [r4, #24]
 8005940:	e7d2      	b.n	80058e8 <__sinit+0xc>
 8005942:	bf00      	nop
 8005944:	080068f0 	.word	0x080068f0
 8005948:	08005875 	.word	0x08005875

0800594c <__sfp>:
 800594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594e:	4607      	mov	r7, r0
 8005950:	f7ff ffac 	bl	80058ac <__sfp_lock_acquire>
 8005954:	4b1e      	ldr	r3, [pc, #120]	; (80059d0 <__sfp+0x84>)
 8005956:	681e      	ldr	r6, [r3, #0]
 8005958:	69b3      	ldr	r3, [r6, #24]
 800595a:	b913      	cbnz	r3, 8005962 <__sfp+0x16>
 800595c:	4630      	mov	r0, r6
 800595e:	f7ff ffbd 	bl	80058dc <__sinit>
 8005962:	3648      	adds	r6, #72	; 0x48
 8005964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005968:	3b01      	subs	r3, #1
 800596a:	d503      	bpl.n	8005974 <__sfp+0x28>
 800596c:	6833      	ldr	r3, [r6, #0]
 800596e:	b30b      	cbz	r3, 80059b4 <__sfp+0x68>
 8005970:	6836      	ldr	r6, [r6, #0]
 8005972:	e7f7      	b.n	8005964 <__sfp+0x18>
 8005974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005978:	b9d5      	cbnz	r5, 80059b0 <__sfp+0x64>
 800597a:	4b16      	ldr	r3, [pc, #88]	; (80059d4 <__sfp+0x88>)
 800597c:	60e3      	str	r3, [r4, #12]
 800597e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005982:	6665      	str	r5, [r4, #100]	; 0x64
 8005984:	f000 f847 	bl	8005a16 <__retarget_lock_init_recursive>
 8005988:	f7ff ff96 	bl	80058b8 <__sfp_lock_release>
 800598c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005990:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005994:	6025      	str	r5, [r4, #0]
 8005996:	61a5      	str	r5, [r4, #24]
 8005998:	2208      	movs	r2, #8
 800599a:	4629      	mov	r1, r5
 800599c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059a0:	f7ff ff24 	bl	80057ec <memset>
 80059a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059ac:	4620      	mov	r0, r4
 80059ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059b0:	3468      	adds	r4, #104	; 0x68
 80059b2:	e7d9      	b.n	8005968 <__sfp+0x1c>
 80059b4:	2104      	movs	r1, #4
 80059b6:	4638      	mov	r0, r7
 80059b8:	f7ff ff62 	bl	8005880 <__sfmoreglue>
 80059bc:	4604      	mov	r4, r0
 80059be:	6030      	str	r0, [r6, #0]
 80059c0:	2800      	cmp	r0, #0
 80059c2:	d1d5      	bne.n	8005970 <__sfp+0x24>
 80059c4:	f7ff ff78 	bl	80058b8 <__sfp_lock_release>
 80059c8:	230c      	movs	r3, #12
 80059ca:	603b      	str	r3, [r7, #0]
 80059cc:	e7ee      	b.n	80059ac <__sfp+0x60>
 80059ce:	bf00      	nop
 80059d0:	080068f0 	.word	0x080068f0
 80059d4:	ffff0001 	.word	0xffff0001

080059d8 <_fwalk_reent>:
 80059d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059dc:	4606      	mov	r6, r0
 80059de:	4688      	mov	r8, r1
 80059e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059e4:	2700      	movs	r7, #0
 80059e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059ea:	f1b9 0901 	subs.w	r9, r9, #1
 80059ee:	d505      	bpl.n	80059fc <_fwalk_reent+0x24>
 80059f0:	6824      	ldr	r4, [r4, #0]
 80059f2:	2c00      	cmp	r4, #0
 80059f4:	d1f7      	bne.n	80059e6 <_fwalk_reent+0xe>
 80059f6:	4638      	mov	r0, r7
 80059f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059fc:	89ab      	ldrh	r3, [r5, #12]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d907      	bls.n	8005a12 <_fwalk_reent+0x3a>
 8005a02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a06:	3301      	adds	r3, #1
 8005a08:	d003      	beq.n	8005a12 <_fwalk_reent+0x3a>
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	47c0      	blx	r8
 8005a10:	4307      	orrs	r7, r0
 8005a12:	3568      	adds	r5, #104	; 0x68
 8005a14:	e7e9      	b.n	80059ea <_fwalk_reent+0x12>

08005a16 <__retarget_lock_init_recursive>:
 8005a16:	4770      	bx	lr

08005a18 <__retarget_lock_acquire_recursive>:
 8005a18:	4770      	bx	lr

08005a1a <__retarget_lock_release_recursive>:
 8005a1a:	4770      	bx	lr

08005a1c <_malloc_r>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	1ccd      	adds	r5, r1, #3
 8005a20:	f025 0503 	bic.w	r5, r5, #3
 8005a24:	3508      	adds	r5, #8
 8005a26:	2d0c      	cmp	r5, #12
 8005a28:	bf38      	it	cc
 8005a2a:	250c      	movcc	r5, #12
 8005a2c:	2d00      	cmp	r5, #0
 8005a2e:	4606      	mov	r6, r0
 8005a30:	db01      	blt.n	8005a36 <_malloc_r+0x1a>
 8005a32:	42a9      	cmp	r1, r5
 8005a34:	d903      	bls.n	8005a3e <_malloc_r+0x22>
 8005a36:	230c      	movs	r3, #12
 8005a38:	6033      	str	r3, [r6, #0]
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a3e:	f000 fda3 	bl	8006588 <__malloc_lock>
 8005a42:	4921      	ldr	r1, [pc, #132]	; (8005ac8 <_malloc_r+0xac>)
 8005a44:	680a      	ldr	r2, [r1, #0]
 8005a46:	4614      	mov	r4, r2
 8005a48:	b99c      	cbnz	r4, 8005a72 <_malloc_r+0x56>
 8005a4a:	4f20      	ldr	r7, [pc, #128]	; (8005acc <_malloc_r+0xb0>)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	b923      	cbnz	r3, 8005a5a <_malloc_r+0x3e>
 8005a50:	4621      	mov	r1, r4
 8005a52:	4630      	mov	r0, r6
 8005a54:	f000 fb2a 	bl	80060ac <_sbrk_r>
 8005a58:	6038      	str	r0, [r7, #0]
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	f000 fb25 	bl	80060ac <_sbrk_r>
 8005a62:	1c43      	adds	r3, r0, #1
 8005a64:	d123      	bne.n	8005aae <_malloc_r+0x92>
 8005a66:	230c      	movs	r3, #12
 8005a68:	6033      	str	r3, [r6, #0]
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	f000 fd92 	bl	8006594 <__malloc_unlock>
 8005a70:	e7e3      	b.n	8005a3a <_malloc_r+0x1e>
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	1b5b      	subs	r3, r3, r5
 8005a76:	d417      	bmi.n	8005aa8 <_malloc_r+0x8c>
 8005a78:	2b0b      	cmp	r3, #11
 8005a7a:	d903      	bls.n	8005a84 <_malloc_r+0x68>
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	441c      	add	r4, r3
 8005a80:	6025      	str	r5, [r4, #0]
 8005a82:	e004      	b.n	8005a8e <_malloc_r+0x72>
 8005a84:	6863      	ldr	r3, [r4, #4]
 8005a86:	42a2      	cmp	r2, r4
 8005a88:	bf0c      	ite	eq
 8005a8a:	600b      	streq	r3, [r1, #0]
 8005a8c:	6053      	strne	r3, [r2, #4]
 8005a8e:	4630      	mov	r0, r6
 8005a90:	f000 fd80 	bl	8006594 <__malloc_unlock>
 8005a94:	f104 000b 	add.w	r0, r4, #11
 8005a98:	1d23      	adds	r3, r4, #4
 8005a9a:	f020 0007 	bic.w	r0, r0, #7
 8005a9e:	1ac2      	subs	r2, r0, r3
 8005aa0:	d0cc      	beq.n	8005a3c <_malloc_r+0x20>
 8005aa2:	1a1b      	subs	r3, r3, r0
 8005aa4:	50a3      	str	r3, [r4, r2]
 8005aa6:	e7c9      	b.n	8005a3c <_malloc_r+0x20>
 8005aa8:	4622      	mov	r2, r4
 8005aaa:	6864      	ldr	r4, [r4, #4]
 8005aac:	e7cc      	b.n	8005a48 <_malloc_r+0x2c>
 8005aae:	1cc4      	adds	r4, r0, #3
 8005ab0:	f024 0403 	bic.w	r4, r4, #3
 8005ab4:	42a0      	cmp	r0, r4
 8005ab6:	d0e3      	beq.n	8005a80 <_malloc_r+0x64>
 8005ab8:	1a21      	subs	r1, r4, r0
 8005aba:	4630      	mov	r0, r6
 8005abc:	f000 faf6 	bl	80060ac <_sbrk_r>
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d1dd      	bne.n	8005a80 <_malloc_r+0x64>
 8005ac4:	e7cf      	b.n	8005a66 <_malloc_r+0x4a>
 8005ac6:	bf00      	nop
 8005ac8:	20000098 	.word	0x20000098
 8005acc:	2000009c 	.word	0x2000009c

08005ad0 <__sfputc_r>:
 8005ad0:	6893      	ldr	r3, [r2, #8]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	b410      	push	{r4}
 8005ad8:	6093      	str	r3, [r2, #8]
 8005ada:	da08      	bge.n	8005aee <__sfputc_r+0x1e>
 8005adc:	6994      	ldr	r4, [r2, #24]
 8005ade:	42a3      	cmp	r3, r4
 8005ae0:	db01      	blt.n	8005ae6 <__sfputc_r+0x16>
 8005ae2:	290a      	cmp	r1, #10
 8005ae4:	d103      	bne.n	8005aee <__sfputc_r+0x1e>
 8005ae6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005aea:	f000 bb33 	b.w	8006154 <__swbuf_r>
 8005aee:	6813      	ldr	r3, [r2, #0]
 8005af0:	1c58      	adds	r0, r3, #1
 8005af2:	6010      	str	r0, [r2, #0]
 8005af4:	7019      	strb	r1, [r3, #0]
 8005af6:	4608      	mov	r0, r1
 8005af8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <__sfputs_r>:
 8005afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b00:	4606      	mov	r6, r0
 8005b02:	460f      	mov	r7, r1
 8005b04:	4614      	mov	r4, r2
 8005b06:	18d5      	adds	r5, r2, r3
 8005b08:	42ac      	cmp	r4, r5
 8005b0a:	d101      	bne.n	8005b10 <__sfputs_r+0x12>
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	e007      	b.n	8005b20 <__sfputs_r+0x22>
 8005b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b14:	463a      	mov	r2, r7
 8005b16:	4630      	mov	r0, r6
 8005b18:	f7ff ffda 	bl	8005ad0 <__sfputc_r>
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	d1f3      	bne.n	8005b08 <__sfputs_r+0xa>
 8005b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b24 <_vfiprintf_r>:
 8005b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b28:	460d      	mov	r5, r1
 8005b2a:	b09d      	sub	sp, #116	; 0x74
 8005b2c:	4614      	mov	r4, r2
 8005b2e:	4698      	mov	r8, r3
 8005b30:	4606      	mov	r6, r0
 8005b32:	b118      	cbz	r0, 8005b3c <_vfiprintf_r+0x18>
 8005b34:	6983      	ldr	r3, [r0, #24]
 8005b36:	b90b      	cbnz	r3, 8005b3c <_vfiprintf_r+0x18>
 8005b38:	f7ff fed0 	bl	80058dc <__sinit>
 8005b3c:	4b89      	ldr	r3, [pc, #548]	; (8005d64 <_vfiprintf_r+0x240>)
 8005b3e:	429d      	cmp	r5, r3
 8005b40:	d11b      	bne.n	8005b7a <_vfiprintf_r+0x56>
 8005b42:	6875      	ldr	r5, [r6, #4]
 8005b44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b46:	07d9      	lsls	r1, r3, #31
 8005b48:	d405      	bmi.n	8005b56 <_vfiprintf_r+0x32>
 8005b4a:	89ab      	ldrh	r3, [r5, #12]
 8005b4c:	059a      	lsls	r2, r3, #22
 8005b4e:	d402      	bmi.n	8005b56 <_vfiprintf_r+0x32>
 8005b50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b52:	f7ff ff61 	bl	8005a18 <__retarget_lock_acquire_recursive>
 8005b56:	89ab      	ldrh	r3, [r5, #12]
 8005b58:	071b      	lsls	r3, r3, #28
 8005b5a:	d501      	bpl.n	8005b60 <_vfiprintf_r+0x3c>
 8005b5c:	692b      	ldr	r3, [r5, #16]
 8005b5e:	b9eb      	cbnz	r3, 8005b9c <_vfiprintf_r+0x78>
 8005b60:	4629      	mov	r1, r5
 8005b62:	4630      	mov	r0, r6
 8005b64:	f000 fb5a 	bl	800621c <__swsetup_r>
 8005b68:	b1c0      	cbz	r0, 8005b9c <_vfiprintf_r+0x78>
 8005b6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b6c:	07dc      	lsls	r4, r3, #31
 8005b6e:	d50e      	bpl.n	8005b8e <_vfiprintf_r+0x6a>
 8005b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b74:	b01d      	add	sp, #116	; 0x74
 8005b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7a:	4b7b      	ldr	r3, [pc, #492]	; (8005d68 <_vfiprintf_r+0x244>)
 8005b7c:	429d      	cmp	r5, r3
 8005b7e:	d101      	bne.n	8005b84 <_vfiprintf_r+0x60>
 8005b80:	68b5      	ldr	r5, [r6, #8]
 8005b82:	e7df      	b.n	8005b44 <_vfiprintf_r+0x20>
 8005b84:	4b79      	ldr	r3, [pc, #484]	; (8005d6c <_vfiprintf_r+0x248>)
 8005b86:	429d      	cmp	r5, r3
 8005b88:	bf08      	it	eq
 8005b8a:	68f5      	ldreq	r5, [r6, #12]
 8005b8c:	e7da      	b.n	8005b44 <_vfiprintf_r+0x20>
 8005b8e:	89ab      	ldrh	r3, [r5, #12]
 8005b90:	0598      	lsls	r0, r3, #22
 8005b92:	d4ed      	bmi.n	8005b70 <_vfiprintf_r+0x4c>
 8005b94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b96:	f7ff ff40 	bl	8005a1a <__retarget_lock_release_recursive>
 8005b9a:	e7e9      	b.n	8005b70 <_vfiprintf_r+0x4c>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba0:	2320      	movs	r3, #32
 8005ba2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ba6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005baa:	2330      	movs	r3, #48	; 0x30
 8005bac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d70 <_vfiprintf_r+0x24c>
 8005bb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bb4:	f04f 0901 	mov.w	r9, #1
 8005bb8:	4623      	mov	r3, r4
 8005bba:	469a      	mov	sl, r3
 8005bbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bc0:	b10a      	cbz	r2, 8005bc6 <_vfiprintf_r+0xa2>
 8005bc2:	2a25      	cmp	r2, #37	; 0x25
 8005bc4:	d1f9      	bne.n	8005bba <_vfiprintf_r+0x96>
 8005bc6:	ebba 0b04 	subs.w	fp, sl, r4
 8005bca:	d00b      	beq.n	8005be4 <_vfiprintf_r+0xc0>
 8005bcc:	465b      	mov	r3, fp
 8005bce:	4622      	mov	r2, r4
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	f7ff ff93 	bl	8005afe <__sfputs_r>
 8005bd8:	3001      	adds	r0, #1
 8005bda:	f000 80aa 	beq.w	8005d32 <_vfiprintf_r+0x20e>
 8005bde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005be0:	445a      	add	r2, fp
 8005be2:	9209      	str	r2, [sp, #36]	; 0x24
 8005be4:	f89a 3000 	ldrb.w	r3, [sl]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 80a2 	beq.w	8005d32 <_vfiprintf_r+0x20e>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bf8:	f10a 0a01 	add.w	sl, sl, #1
 8005bfc:	9304      	str	r3, [sp, #16]
 8005bfe:	9307      	str	r3, [sp, #28]
 8005c00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c04:	931a      	str	r3, [sp, #104]	; 0x68
 8005c06:	4654      	mov	r4, sl
 8005c08:	2205      	movs	r2, #5
 8005c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c0e:	4858      	ldr	r0, [pc, #352]	; (8005d70 <_vfiprintf_r+0x24c>)
 8005c10:	f7fa fae6 	bl	80001e0 <memchr>
 8005c14:	9a04      	ldr	r2, [sp, #16]
 8005c16:	b9d8      	cbnz	r0, 8005c50 <_vfiprintf_r+0x12c>
 8005c18:	06d1      	lsls	r1, r2, #27
 8005c1a:	bf44      	itt	mi
 8005c1c:	2320      	movmi	r3, #32
 8005c1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c22:	0713      	lsls	r3, r2, #28
 8005c24:	bf44      	itt	mi
 8005c26:	232b      	movmi	r3, #43	; 0x2b
 8005c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c2c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c30:	2b2a      	cmp	r3, #42	; 0x2a
 8005c32:	d015      	beq.n	8005c60 <_vfiprintf_r+0x13c>
 8005c34:	9a07      	ldr	r2, [sp, #28]
 8005c36:	4654      	mov	r4, sl
 8005c38:	2000      	movs	r0, #0
 8005c3a:	f04f 0c0a 	mov.w	ip, #10
 8005c3e:	4621      	mov	r1, r4
 8005c40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c44:	3b30      	subs	r3, #48	; 0x30
 8005c46:	2b09      	cmp	r3, #9
 8005c48:	d94e      	bls.n	8005ce8 <_vfiprintf_r+0x1c4>
 8005c4a:	b1b0      	cbz	r0, 8005c7a <_vfiprintf_r+0x156>
 8005c4c:	9207      	str	r2, [sp, #28]
 8005c4e:	e014      	b.n	8005c7a <_vfiprintf_r+0x156>
 8005c50:	eba0 0308 	sub.w	r3, r0, r8
 8005c54:	fa09 f303 	lsl.w	r3, r9, r3
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	9304      	str	r3, [sp, #16]
 8005c5c:	46a2      	mov	sl, r4
 8005c5e:	e7d2      	b.n	8005c06 <_vfiprintf_r+0xe2>
 8005c60:	9b03      	ldr	r3, [sp, #12]
 8005c62:	1d19      	adds	r1, r3, #4
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	9103      	str	r1, [sp, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	bfbb      	ittet	lt
 8005c6c:	425b      	neglt	r3, r3
 8005c6e:	f042 0202 	orrlt.w	r2, r2, #2
 8005c72:	9307      	strge	r3, [sp, #28]
 8005c74:	9307      	strlt	r3, [sp, #28]
 8005c76:	bfb8      	it	lt
 8005c78:	9204      	strlt	r2, [sp, #16]
 8005c7a:	7823      	ldrb	r3, [r4, #0]
 8005c7c:	2b2e      	cmp	r3, #46	; 0x2e
 8005c7e:	d10c      	bne.n	8005c9a <_vfiprintf_r+0x176>
 8005c80:	7863      	ldrb	r3, [r4, #1]
 8005c82:	2b2a      	cmp	r3, #42	; 0x2a
 8005c84:	d135      	bne.n	8005cf2 <_vfiprintf_r+0x1ce>
 8005c86:	9b03      	ldr	r3, [sp, #12]
 8005c88:	1d1a      	adds	r2, r3, #4
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	9203      	str	r2, [sp, #12]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	bfb8      	it	lt
 8005c92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005c96:	3402      	adds	r4, #2
 8005c98:	9305      	str	r3, [sp, #20]
 8005c9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d80 <_vfiprintf_r+0x25c>
 8005c9e:	7821      	ldrb	r1, [r4, #0]
 8005ca0:	2203      	movs	r2, #3
 8005ca2:	4650      	mov	r0, sl
 8005ca4:	f7fa fa9c 	bl	80001e0 <memchr>
 8005ca8:	b140      	cbz	r0, 8005cbc <_vfiprintf_r+0x198>
 8005caa:	2340      	movs	r3, #64	; 0x40
 8005cac:	eba0 000a 	sub.w	r0, r0, sl
 8005cb0:	fa03 f000 	lsl.w	r0, r3, r0
 8005cb4:	9b04      	ldr	r3, [sp, #16]
 8005cb6:	4303      	orrs	r3, r0
 8005cb8:	3401      	adds	r4, #1
 8005cba:	9304      	str	r3, [sp, #16]
 8005cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc0:	482c      	ldr	r0, [pc, #176]	; (8005d74 <_vfiprintf_r+0x250>)
 8005cc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cc6:	2206      	movs	r2, #6
 8005cc8:	f7fa fa8a 	bl	80001e0 <memchr>
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d03f      	beq.n	8005d50 <_vfiprintf_r+0x22c>
 8005cd0:	4b29      	ldr	r3, [pc, #164]	; (8005d78 <_vfiprintf_r+0x254>)
 8005cd2:	bb1b      	cbnz	r3, 8005d1c <_vfiprintf_r+0x1f8>
 8005cd4:	9b03      	ldr	r3, [sp, #12]
 8005cd6:	3307      	adds	r3, #7
 8005cd8:	f023 0307 	bic.w	r3, r3, #7
 8005cdc:	3308      	adds	r3, #8
 8005cde:	9303      	str	r3, [sp, #12]
 8005ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce2:	443b      	add	r3, r7
 8005ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce6:	e767      	b.n	8005bb8 <_vfiprintf_r+0x94>
 8005ce8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cec:	460c      	mov	r4, r1
 8005cee:	2001      	movs	r0, #1
 8005cf0:	e7a5      	b.n	8005c3e <_vfiprintf_r+0x11a>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	3401      	adds	r4, #1
 8005cf6:	9305      	str	r3, [sp, #20]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	f04f 0c0a 	mov.w	ip, #10
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d04:	3a30      	subs	r2, #48	; 0x30
 8005d06:	2a09      	cmp	r2, #9
 8005d08:	d903      	bls.n	8005d12 <_vfiprintf_r+0x1ee>
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0c5      	beq.n	8005c9a <_vfiprintf_r+0x176>
 8005d0e:	9105      	str	r1, [sp, #20]
 8005d10:	e7c3      	b.n	8005c9a <_vfiprintf_r+0x176>
 8005d12:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d16:	4604      	mov	r4, r0
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e7f0      	b.n	8005cfe <_vfiprintf_r+0x1da>
 8005d1c:	ab03      	add	r3, sp, #12
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	462a      	mov	r2, r5
 8005d22:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <_vfiprintf_r+0x258>)
 8005d24:	a904      	add	r1, sp, #16
 8005d26:	4630      	mov	r0, r6
 8005d28:	f3af 8000 	nop.w
 8005d2c:	4607      	mov	r7, r0
 8005d2e:	1c78      	adds	r0, r7, #1
 8005d30:	d1d6      	bne.n	8005ce0 <_vfiprintf_r+0x1bc>
 8005d32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d34:	07d9      	lsls	r1, r3, #31
 8005d36:	d405      	bmi.n	8005d44 <_vfiprintf_r+0x220>
 8005d38:	89ab      	ldrh	r3, [r5, #12]
 8005d3a:	059a      	lsls	r2, r3, #22
 8005d3c:	d402      	bmi.n	8005d44 <_vfiprintf_r+0x220>
 8005d3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d40:	f7ff fe6b 	bl	8005a1a <__retarget_lock_release_recursive>
 8005d44:	89ab      	ldrh	r3, [r5, #12]
 8005d46:	065b      	lsls	r3, r3, #25
 8005d48:	f53f af12 	bmi.w	8005b70 <_vfiprintf_r+0x4c>
 8005d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d4e:	e711      	b.n	8005b74 <_vfiprintf_r+0x50>
 8005d50:	ab03      	add	r3, sp, #12
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	462a      	mov	r2, r5
 8005d56:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <_vfiprintf_r+0x258>)
 8005d58:	a904      	add	r1, sp, #16
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	f000 f880 	bl	8005e60 <_printf_i>
 8005d60:	e7e4      	b.n	8005d2c <_vfiprintf_r+0x208>
 8005d62:	bf00      	nop
 8005d64:	08006914 	.word	0x08006914
 8005d68:	08006934 	.word	0x08006934
 8005d6c:	080068f4 	.word	0x080068f4
 8005d70:	08006954 	.word	0x08006954
 8005d74:	0800695e 	.word	0x0800695e
 8005d78:	00000000 	.word	0x00000000
 8005d7c:	08005aff 	.word	0x08005aff
 8005d80:	0800695a 	.word	0x0800695a

08005d84 <_printf_common>:
 8005d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d88:	4616      	mov	r6, r2
 8005d8a:	4699      	mov	r9, r3
 8005d8c:	688a      	ldr	r2, [r1, #8]
 8005d8e:	690b      	ldr	r3, [r1, #16]
 8005d90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d94:	4293      	cmp	r3, r2
 8005d96:	bfb8      	it	lt
 8005d98:	4613      	movlt	r3, r2
 8005d9a:	6033      	str	r3, [r6, #0]
 8005d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005da0:	4607      	mov	r7, r0
 8005da2:	460c      	mov	r4, r1
 8005da4:	b10a      	cbz	r2, 8005daa <_printf_common+0x26>
 8005da6:	3301      	adds	r3, #1
 8005da8:	6033      	str	r3, [r6, #0]
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	0699      	lsls	r1, r3, #26
 8005dae:	bf42      	ittt	mi
 8005db0:	6833      	ldrmi	r3, [r6, #0]
 8005db2:	3302      	addmi	r3, #2
 8005db4:	6033      	strmi	r3, [r6, #0]
 8005db6:	6825      	ldr	r5, [r4, #0]
 8005db8:	f015 0506 	ands.w	r5, r5, #6
 8005dbc:	d106      	bne.n	8005dcc <_printf_common+0x48>
 8005dbe:	f104 0a19 	add.w	sl, r4, #25
 8005dc2:	68e3      	ldr	r3, [r4, #12]
 8005dc4:	6832      	ldr	r2, [r6, #0]
 8005dc6:	1a9b      	subs	r3, r3, r2
 8005dc8:	42ab      	cmp	r3, r5
 8005dca:	dc26      	bgt.n	8005e1a <_printf_common+0x96>
 8005dcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dd0:	1e13      	subs	r3, r2, #0
 8005dd2:	6822      	ldr	r2, [r4, #0]
 8005dd4:	bf18      	it	ne
 8005dd6:	2301      	movne	r3, #1
 8005dd8:	0692      	lsls	r2, r2, #26
 8005dda:	d42b      	bmi.n	8005e34 <_printf_common+0xb0>
 8005ddc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005de0:	4649      	mov	r1, r9
 8005de2:	4638      	mov	r0, r7
 8005de4:	47c0      	blx	r8
 8005de6:	3001      	adds	r0, #1
 8005de8:	d01e      	beq.n	8005e28 <_printf_common+0xa4>
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	68e5      	ldr	r5, [r4, #12]
 8005dee:	6832      	ldr	r2, [r6, #0]
 8005df0:	f003 0306 	and.w	r3, r3, #6
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	bf08      	it	eq
 8005df8:	1aad      	subeq	r5, r5, r2
 8005dfa:	68a3      	ldr	r3, [r4, #8]
 8005dfc:	6922      	ldr	r2, [r4, #16]
 8005dfe:	bf0c      	ite	eq
 8005e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e04:	2500      	movne	r5, #0
 8005e06:	4293      	cmp	r3, r2
 8005e08:	bfc4      	itt	gt
 8005e0a:	1a9b      	subgt	r3, r3, r2
 8005e0c:	18ed      	addgt	r5, r5, r3
 8005e0e:	2600      	movs	r6, #0
 8005e10:	341a      	adds	r4, #26
 8005e12:	42b5      	cmp	r5, r6
 8005e14:	d11a      	bne.n	8005e4c <_printf_common+0xc8>
 8005e16:	2000      	movs	r0, #0
 8005e18:	e008      	b.n	8005e2c <_printf_common+0xa8>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	4652      	mov	r2, sl
 8005e1e:	4649      	mov	r1, r9
 8005e20:	4638      	mov	r0, r7
 8005e22:	47c0      	blx	r8
 8005e24:	3001      	adds	r0, #1
 8005e26:	d103      	bne.n	8005e30 <_printf_common+0xac>
 8005e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e30:	3501      	adds	r5, #1
 8005e32:	e7c6      	b.n	8005dc2 <_printf_common+0x3e>
 8005e34:	18e1      	adds	r1, r4, r3
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	2030      	movs	r0, #48	; 0x30
 8005e3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e3e:	4422      	add	r2, r4
 8005e40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e48:	3302      	adds	r3, #2
 8005e4a:	e7c7      	b.n	8005ddc <_printf_common+0x58>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	4622      	mov	r2, r4
 8005e50:	4649      	mov	r1, r9
 8005e52:	4638      	mov	r0, r7
 8005e54:	47c0      	blx	r8
 8005e56:	3001      	adds	r0, #1
 8005e58:	d0e6      	beq.n	8005e28 <_printf_common+0xa4>
 8005e5a:	3601      	adds	r6, #1
 8005e5c:	e7d9      	b.n	8005e12 <_printf_common+0x8e>
	...

08005e60 <_printf_i>:
 8005e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e64:	460c      	mov	r4, r1
 8005e66:	4691      	mov	r9, r2
 8005e68:	7e27      	ldrb	r7, [r4, #24]
 8005e6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e6c:	2f78      	cmp	r7, #120	; 0x78
 8005e6e:	4680      	mov	r8, r0
 8005e70:	469a      	mov	sl, r3
 8005e72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e76:	d807      	bhi.n	8005e88 <_printf_i+0x28>
 8005e78:	2f62      	cmp	r7, #98	; 0x62
 8005e7a:	d80a      	bhi.n	8005e92 <_printf_i+0x32>
 8005e7c:	2f00      	cmp	r7, #0
 8005e7e:	f000 80d8 	beq.w	8006032 <_printf_i+0x1d2>
 8005e82:	2f58      	cmp	r7, #88	; 0x58
 8005e84:	f000 80a3 	beq.w	8005fce <_printf_i+0x16e>
 8005e88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e90:	e03a      	b.n	8005f08 <_printf_i+0xa8>
 8005e92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e96:	2b15      	cmp	r3, #21
 8005e98:	d8f6      	bhi.n	8005e88 <_printf_i+0x28>
 8005e9a:	a001      	add	r0, pc, #4	; (adr r0, 8005ea0 <_printf_i+0x40>)
 8005e9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ea0:	08005ef9 	.word	0x08005ef9
 8005ea4:	08005f0d 	.word	0x08005f0d
 8005ea8:	08005e89 	.word	0x08005e89
 8005eac:	08005e89 	.word	0x08005e89
 8005eb0:	08005e89 	.word	0x08005e89
 8005eb4:	08005e89 	.word	0x08005e89
 8005eb8:	08005f0d 	.word	0x08005f0d
 8005ebc:	08005e89 	.word	0x08005e89
 8005ec0:	08005e89 	.word	0x08005e89
 8005ec4:	08005e89 	.word	0x08005e89
 8005ec8:	08005e89 	.word	0x08005e89
 8005ecc:	08006019 	.word	0x08006019
 8005ed0:	08005f3d 	.word	0x08005f3d
 8005ed4:	08005ffb 	.word	0x08005ffb
 8005ed8:	08005e89 	.word	0x08005e89
 8005edc:	08005e89 	.word	0x08005e89
 8005ee0:	0800603b 	.word	0x0800603b
 8005ee4:	08005e89 	.word	0x08005e89
 8005ee8:	08005f3d 	.word	0x08005f3d
 8005eec:	08005e89 	.word	0x08005e89
 8005ef0:	08005e89 	.word	0x08005e89
 8005ef4:	08006003 	.word	0x08006003
 8005ef8:	680b      	ldr	r3, [r1, #0]
 8005efa:	1d1a      	adds	r2, r3, #4
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	600a      	str	r2, [r1, #0]
 8005f00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e0a3      	b.n	8006054 <_printf_i+0x1f4>
 8005f0c:	6825      	ldr	r5, [r4, #0]
 8005f0e:	6808      	ldr	r0, [r1, #0]
 8005f10:	062e      	lsls	r6, r5, #24
 8005f12:	f100 0304 	add.w	r3, r0, #4
 8005f16:	d50a      	bpl.n	8005f2e <_printf_i+0xce>
 8005f18:	6805      	ldr	r5, [r0, #0]
 8005f1a:	600b      	str	r3, [r1, #0]
 8005f1c:	2d00      	cmp	r5, #0
 8005f1e:	da03      	bge.n	8005f28 <_printf_i+0xc8>
 8005f20:	232d      	movs	r3, #45	; 0x2d
 8005f22:	426d      	negs	r5, r5
 8005f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f28:	485e      	ldr	r0, [pc, #376]	; (80060a4 <_printf_i+0x244>)
 8005f2a:	230a      	movs	r3, #10
 8005f2c:	e019      	b.n	8005f62 <_printf_i+0x102>
 8005f2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f32:	6805      	ldr	r5, [r0, #0]
 8005f34:	600b      	str	r3, [r1, #0]
 8005f36:	bf18      	it	ne
 8005f38:	b22d      	sxthne	r5, r5
 8005f3a:	e7ef      	b.n	8005f1c <_printf_i+0xbc>
 8005f3c:	680b      	ldr	r3, [r1, #0]
 8005f3e:	6825      	ldr	r5, [r4, #0]
 8005f40:	1d18      	adds	r0, r3, #4
 8005f42:	6008      	str	r0, [r1, #0]
 8005f44:	0628      	lsls	r0, r5, #24
 8005f46:	d501      	bpl.n	8005f4c <_printf_i+0xec>
 8005f48:	681d      	ldr	r5, [r3, #0]
 8005f4a:	e002      	b.n	8005f52 <_printf_i+0xf2>
 8005f4c:	0669      	lsls	r1, r5, #25
 8005f4e:	d5fb      	bpl.n	8005f48 <_printf_i+0xe8>
 8005f50:	881d      	ldrh	r5, [r3, #0]
 8005f52:	4854      	ldr	r0, [pc, #336]	; (80060a4 <_printf_i+0x244>)
 8005f54:	2f6f      	cmp	r7, #111	; 0x6f
 8005f56:	bf0c      	ite	eq
 8005f58:	2308      	moveq	r3, #8
 8005f5a:	230a      	movne	r3, #10
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f62:	6866      	ldr	r6, [r4, #4]
 8005f64:	60a6      	str	r6, [r4, #8]
 8005f66:	2e00      	cmp	r6, #0
 8005f68:	bfa2      	ittt	ge
 8005f6a:	6821      	ldrge	r1, [r4, #0]
 8005f6c:	f021 0104 	bicge.w	r1, r1, #4
 8005f70:	6021      	strge	r1, [r4, #0]
 8005f72:	b90d      	cbnz	r5, 8005f78 <_printf_i+0x118>
 8005f74:	2e00      	cmp	r6, #0
 8005f76:	d04d      	beq.n	8006014 <_printf_i+0x1b4>
 8005f78:	4616      	mov	r6, r2
 8005f7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f7e:	fb03 5711 	mls	r7, r3, r1, r5
 8005f82:	5dc7      	ldrb	r7, [r0, r7]
 8005f84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f88:	462f      	mov	r7, r5
 8005f8a:	42bb      	cmp	r3, r7
 8005f8c:	460d      	mov	r5, r1
 8005f8e:	d9f4      	bls.n	8005f7a <_printf_i+0x11a>
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d10b      	bne.n	8005fac <_printf_i+0x14c>
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	07df      	lsls	r7, r3, #31
 8005f98:	d508      	bpl.n	8005fac <_printf_i+0x14c>
 8005f9a:	6923      	ldr	r3, [r4, #16]
 8005f9c:	6861      	ldr	r1, [r4, #4]
 8005f9e:	4299      	cmp	r1, r3
 8005fa0:	bfde      	ittt	le
 8005fa2:	2330      	movle	r3, #48	; 0x30
 8005fa4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fa8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005fac:	1b92      	subs	r2, r2, r6
 8005fae:	6122      	str	r2, [r4, #16]
 8005fb0:	f8cd a000 	str.w	sl, [sp]
 8005fb4:	464b      	mov	r3, r9
 8005fb6:	aa03      	add	r2, sp, #12
 8005fb8:	4621      	mov	r1, r4
 8005fba:	4640      	mov	r0, r8
 8005fbc:	f7ff fee2 	bl	8005d84 <_printf_common>
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	d14c      	bne.n	800605e <_printf_i+0x1fe>
 8005fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fc8:	b004      	add	sp, #16
 8005fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fce:	4835      	ldr	r0, [pc, #212]	; (80060a4 <_printf_i+0x244>)
 8005fd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	680e      	ldr	r6, [r1, #0]
 8005fd8:	061f      	lsls	r7, r3, #24
 8005fda:	f856 5b04 	ldr.w	r5, [r6], #4
 8005fde:	600e      	str	r6, [r1, #0]
 8005fe0:	d514      	bpl.n	800600c <_printf_i+0x1ac>
 8005fe2:	07d9      	lsls	r1, r3, #31
 8005fe4:	bf44      	itt	mi
 8005fe6:	f043 0320 	orrmi.w	r3, r3, #32
 8005fea:	6023      	strmi	r3, [r4, #0]
 8005fec:	b91d      	cbnz	r5, 8005ff6 <_printf_i+0x196>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	f023 0320 	bic.w	r3, r3, #32
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	2310      	movs	r3, #16
 8005ff8:	e7b0      	b.n	8005f5c <_printf_i+0xfc>
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	f043 0320 	orr.w	r3, r3, #32
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	2378      	movs	r3, #120	; 0x78
 8006004:	4828      	ldr	r0, [pc, #160]	; (80060a8 <_printf_i+0x248>)
 8006006:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800600a:	e7e3      	b.n	8005fd4 <_printf_i+0x174>
 800600c:	065e      	lsls	r6, r3, #25
 800600e:	bf48      	it	mi
 8006010:	b2ad      	uxthmi	r5, r5
 8006012:	e7e6      	b.n	8005fe2 <_printf_i+0x182>
 8006014:	4616      	mov	r6, r2
 8006016:	e7bb      	b.n	8005f90 <_printf_i+0x130>
 8006018:	680b      	ldr	r3, [r1, #0]
 800601a:	6826      	ldr	r6, [r4, #0]
 800601c:	6960      	ldr	r0, [r4, #20]
 800601e:	1d1d      	adds	r5, r3, #4
 8006020:	600d      	str	r5, [r1, #0]
 8006022:	0635      	lsls	r5, r6, #24
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	d501      	bpl.n	800602c <_printf_i+0x1cc>
 8006028:	6018      	str	r0, [r3, #0]
 800602a:	e002      	b.n	8006032 <_printf_i+0x1d2>
 800602c:	0671      	lsls	r1, r6, #25
 800602e:	d5fb      	bpl.n	8006028 <_printf_i+0x1c8>
 8006030:	8018      	strh	r0, [r3, #0]
 8006032:	2300      	movs	r3, #0
 8006034:	6123      	str	r3, [r4, #16]
 8006036:	4616      	mov	r6, r2
 8006038:	e7ba      	b.n	8005fb0 <_printf_i+0x150>
 800603a:	680b      	ldr	r3, [r1, #0]
 800603c:	1d1a      	adds	r2, r3, #4
 800603e:	600a      	str	r2, [r1, #0]
 8006040:	681e      	ldr	r6, [r3, #0]
 8006042:	6862      	ldr	r2, [r4, #4]
 8006044:	2100      	movs	r1, #0
 8006046:	4630      	mov	r0, r6
 8006048:	f7fa f8ca 	bl	80001e0 <memchr>
 800604c:	b108      	cbz	r0, 8006052 <_printf_i+0x1f2>
 800604e:	1b80      	subs	r0, r0, r6
 8006050:	6060      	str	r0, [r4, #4]
 8006052:	6863      	ldr	r3, [r4, #4]
 8006054:	6123      	str	r3, [r4, #16]
 8006056:	2300      	movs	r3, #0
 8006058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800605c:	e7a8      	b.n	8005fb0 <_printf_i+0x150>
 800605e:	6923      	ldr	r3, [r4, #16]
 8006060:	4632      	mov	r2, r6
 8006062:	4649      	mov	r1, r9
 8006064:	4640      	mov	r0, r8
 8006066:	47d0      	blx	sl
 8006068:	3001      	adds	r0, #1
 800606a:	d0ab      	beq.n	8005fc4 <_printf_i+0x164>
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	079b      	lsls	r3, r3, #30
 8006070:	d413      	bmi.n	800609a <_printf_i+0x23a>
 8006072:	68e0      	ldr	r0, [r4, #12]
 8006074:	9b03      	ldr	r3, [sp, #12]
 8006076:	4298      	cmp	r0, r3
 8006078:	bfb8      	it	lt
 800607a:	4618      	movlt	r0, r3
 800607c:	e7a4      	b.n	8005fc8 <_printf_i+0x168>
 800607e:	2301      	movs	r3, #1
 8006080:	4632      	mov	r2, r6
 8006082:	4649      	mov	r1, r9
 8006084:	4640      	mov	r0, r8
 8006086:	47d0      	blx	sl
 8006088:	3001      	adds	r0, #1
 800608a:	d09b      	beq.n	8005fc4 <_printf_i+0x164>
 800608c:	3501      	adds	r5, #1
 800608e:	68e3      	ldr	r3, [r4, #12]
 8006090:	9903      	ldr	r1, [sp, #12]
 8006092:	1a5b      	subs	r3, r3, r1
 8006094:	42ab      	cmp	r3, r5
 8006096:	dcf2      	bgt.n	800607e <_printf_i+0x21e>
 8006098:	e7eb      	b.n	8006072 <_printf_i+0x212>
 800609a:	2500      	movs	r5, #0
 800609c:	f104 0619 	add.w	r6, r4, #25
 80060a0:	e7f5      	b.n	800608e <_printf_i+0x22e>
 80060a2:	bf00      	nop
 80060a4:	08006965 	.word	0x08006965
 80060a8:	08006976 	.word	0x08006976

080060ac <_sbrk_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	4d06      	ldr	r5, [pc, #24]	; (80060c8 <_sbrk_r+0x1c>)
 80060b0:	2300      	movs	r3, #0
 80060b2:	4604      	mov	r4, r0
 80060b4:	4608      	mov	r0, r1
 80060b6:	602b      	str	r3, [r5, #0]
 80060b8:	f7fb fbda 	bl	8001870 <_sbrk>
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d102      	bne.n	80060c6 <_sbrk_r+0x1a>
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	b103      	cbz	r3, 80060c6 <_sbrk_r+0x1a>
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	20000b18 	.word	0x20000b18

080060cc <__sread>:
 80060cc:	b510      	push	{r4, lr}
 80060ce:	460c      	mov	r4, r1
 80060d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d4:	f000 fab4 	bl	8006640 <_read_r>
 80060d8:	2800      	cmp	r0, #0
 80060da:	bfab      	itete	ge
 80060dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060de:	89a3      	ldrhlt	r3, [r4, #12]
 80060e0:	181b      	addge	r3, r3, r0
 80060e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060e6:	bfac      	ite	ge
 80060e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80060ea:	81a3      	strhlt	r3, [r4, #12]
 80060ec:	bd10      	pop	{r4, pc}

080060ee <__swrite>:
 80060ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f2:	461f      	mov	r7, r3
 80060f4:	898b      	ldrh	r3, [r1, #12]
 80060f6:	05db      	lsls	r3, r3, #23
 80060f8:	4605      	mov	r5, r0
 80060fa:	460c      	mov	r4, r1
 80060fc:	4616      	mov	r6, r2
 80060fe:	d505      	bpl.n	800610c <__swrite+0x1e>
 8006100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006104:	2302      	movs	r3, #2
 8006106:	2200      	movs	r2, #0
 8006108:	f000 f9c8 	bl	800649c <_lseek_r>
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006112:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006116:	81a3      	strh	r3, [r4, #12]
 8006118:	4632      	mov	r2, r6
 800611a:	463b      	mov	r3, r7
 800611c:	4628      	mov	r0, r5
 800611e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006122:	f000 b869 	b.w	80061f8 <_write_r>

08006126 <__sseek>:
 8006126:	b510      	push	{r4, lr}
 8006128:	460c      	mov	r4, r1
 800612a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800612e:	f000 f9b5 	bl	800649c <_lseek_r>
 8006132:	1c43      	adds	r3, r0, #1
 8006134:	89a3      	ldrh	r3, [r4, #12]
 8006136:	bf15      	itete	ne
 8006138:	6560      	strne	r0, [r4, #84]	; 0x54
 800613a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800613e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006142:	81a3      	strheq	r3, [r4, #12]
 8006144:	bf18      	it	ne
 8006146:	81a3      	strhne	r3, [r4, #12]
 8006148:	bd10      	pop	{r4, pc}

0800614a <__sclose>:
 800614a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800614e:	f000 b8d3 	b.w	80062f8 <_close_r>
	...

08006154 <__swbuf_r>:
 8006154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006156:	460e      	mov	r6, r1
 8006158:	4614      	mov	r4, r2
 800615a:	4605      	mov	r5, r0
 800615c:	b118      	cbz	r0, 8006166 <__swbuf_r+0x12>
 800615e:	6983      	ldr	r3, [r0, #24]
 8006160:	b90b      	cbnz	r3, 8006166 <__swbuf_r+0x12>
 8006162:	f7ff fbbb 	bl	80058dc <__sinit>
 8006166:	4b21      	ldr	r3, [pc, #132]	; (80061ec <__swbuf_r+0x98>)
 8006168:	429c      	cmp	r4, r3
 800616a:	d12b      	bne.n	80061c4 <__swbuf_r+0x70>
 800616c:	686c      	ldr	r4, [r5, #4]
 800616e:	69a3      	ldr	r3, [r4, #24]
 8006170:	60a3      	str	r3, [r4, #8]
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	071a      	lsls	r2, r3, #28
 8006176:	d52f      	bpl.n	80061d8 <__swbuf_r+0x84>
 8006178:	6923      	ldr	r3, [r4, #16]
 800617a:	b36b      	cbz	r3, 80061d8 <__swbuf_r+0x84>
 800617c:	6923      	ldr	r3, [r4, #16]
 800617e:	6820      	ldr	r0, [r4, #0]
 8006180:	1ac0      	subs	r0, r0, r3
 8006182:	6963      	ldr	r3, [r4, #20]
 8006184:	b2f6      	uxtb	r6, r6
 8006186:	4283      	cmp	r3, r0
 8006188:	4637      	mov	r7, r6
 800618a:	dc04      	bgt.n	8006196 <__swbuf_r+0x42>
 800618c:	4621      	mov	r1, r4
 800618e:	4628      	mov	r0, r5
 8006190:	f000 f948 	bl	8006424 <_fflush_r>
 8006194:	bb30      	cbnz	r0, 80061e4 <__swbuf_r+0x90>
 8006196:	68a3      	ldr	r3, [r4, #8]
 8006198:	3b01      	subs	r3, #1
 800619a:	60a3      	str	r3, [r4, #8]
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	6022      	str	r2, [r4, #0]
 80061a2:	701e      	strb	r6, [r3, #0]
 80061a4:	6963      	ldr	r3, [r4, #20]
 80061a6:	3001      	adds	r0, #1
 80061a8:	4283      	cmp	r3, r0
 80061aa:	d004      	beq.n	80061b6 <__swbuf_r+0x62>
 80061ac:	89a3      	ldrh	r3, [r4, #12]
 80061ae:	07db      	lsls	r3, r3, #31
 80061b0:	d506      	bpl.n	80061c0 <__swbuf_r+0x6c>
 80061b2:	2e0a      	cmp	r6, #10
 80061b4:	d104      	bne.n	80061c0 <__swbuf_r+0x6c>
 80061b6:	4621      	mov	r1, r4
 80061b8:	4628      	mov	r0, r5
 80061ba:	f000 f933 	bl	8006424 <_fflush_r>
 80061be:	b988      	cbnz	r0, 80061e4 <__swbuf_r+0x90>
 80061c0:	4638      	mov	r0, r7
 80061c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061c4:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <__swbuf_r+0x9c>)
 80061c6:	429c      	cmp	r4, r3
 80061c8:	d101      	bne.n	80061ce <__swbuf_r+0x7a>
 80061ca:	68ac      	ldr	r4, [r5, #8]
 80061cc:	e7cf      	b.n	800616e <__swbuf_r+0x1a>
 80061ce:	4b09      	ldr	r3, [pc, #36]	; (80061f4 <__swbuf_r+0xa0>)
 80061d0:	429c      	cmp	r4, r3
 80061d2:	bf08      	it	eq
 80061d4:	68ec      	ldreq	r4, [r5, #12]
 80061d6:	e7ca      	b.n	800616e <__swbuf_r+0x1a>
 80061d8:	4621      	mov	r1, r4
 80061da:	4628      	mov	r0, r5
 80061dc:	f000 f81e 	bl	800621c <__swsetup_r>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d0cb      	beq.n	800617c <__swbuf_r+0x28>
 80061e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80061e8:	e7ea      	b.n	80061c0 <__swbuf_r+0x6c>
 80061ea:	bf00      	nop
 80061ec:	08006914 	.word	0x08006914
 80061f0:	08006934 	.word	0x08006934
 80061f4:	080068f4 	.word	0x080068f4

080061f8 <_write_r>:
 80061f8:	b538      	push	{r3, r4, r5, lr}
 80061fa:	4d07      	ldr	r5, [pc, #28]	; (8006218 <_write_r+0x20>)
 80061fc:	4604      	mov	r4, r0
 80061fe:	4608      	mov	r0, r1
 8006200:	4611      	mov	r1, r2
 8006202:	2200      	movs	r2, #0
 8006204:	602a      	str	r2, [r5, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	f7fb fae1 	bl	80017ce <_write>
 800620c:	1c43      	adds	r3, r0, #1
 800620e:	d102      	bne.n	8006216 <_write_r+0x1e>
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	b103      	cbz	r3, 8006216 <_write_r+0x1e>
 8006214:	6023      	str	r3, [r4, #0]
 8006216:	bd38      	pop	{r3, r4, r5, pc}
 8006218:	20000b18 	.word	0x20000b18

0800621c <__swsetup_r>:
 800621c:	4b32      	ldr	r3, [pc, #200]	; (80062e8 <__swsetup_r+0xcc>)
 800621e:	b570      	push	{r4, r5, r6, lr}
 8006220:	681d      	ldr	r5, [r3, #0]
 8006222:	4606      	mov	r6, r0
 8006224:	460c      	mov	r4, r1
 8006226:	b125      	cbz	r5, 8006232 <__swsetup_r+0x16>
 8006228:	69ab      	ldr	r3, [r5, #24]
 800622a:	b913      	cbnz	r3, 8006232 <__swsetup_r+0x16>
 800622c:	4628      	mov	r0, r5
 800622e:	f7ff fb55 	bl	80058dc <__sinit>
 8006232:	4b2e      	ldr	r3, [pc, #184]	; (80062ec <__swsetup_r+0xd0>)
 8006234:	429c      	cmp	r4, r3
 8006236:	d10f      	bne.n	8006258 <__swsetup_r+0x3c>
 8006238:	686c      	ldr	r4, [r5, #4]
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006240:	0719      	lsls	r1, r3, #28
 8006242:	d42c      	bmi.n	800629e <__swsetup_r+0x82>
 8006244:	06dd      	lsls	r5, r3, #27
 8006246:	d411      	bmi.n	800626c <__swsetup_r+0x50>
 8006248:	2309      	movs	r3, #9
 800624a:	6033      	str	r3, [r6, #0]
 800624c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006250:	81a3      	strh	r3, [r4, #12]
 8006252:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006256:	e03e      	b.n	80062d6 <__swsetup_r+0xba>
 8006258:	4b25      	ldr	r3, [pc, #148]	; (80062f0 <__swsetup_r+0xd4>)
 800625a:	429c      	cmp	r4, r3
 800625c:	d101      	bne.n	8006262 <__swsetup_r+0x46>
 800625e:	68ac      	ldr	r4, [r5, #8]
 8006260:	e7eb      	b.n	800623a <__swsetup_r+0x1e>
 8006262:	4b24      	ldr	r3, [pc, #144]	; (80062f4 <__swsetup_r+0xd8>)
 8006264:	429c      	cmp	r4, r3
 8006266:	bf08      	it	eq
 8006268:	68ec      	ldreq	r4, [r5, #12]
 800626a:	e7e6      	b.n	800623a <__swsetup_r+0x1e>
 800626c:	0758      	lsls	r0, r3, #29
 800626e:	d512      	bpl.n	8006296 <__swsetup_r+0x7a>
 8006270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006272:	b141      	cbz	r1, 8006286 <__swsetup_r+0x6a>
 8006274:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006278:	4299      	cmp	r1, r3
 800627a:	d002      	beq.n	8006282 <__swsetup_r+0x66>
 800627c:	4630      	mov	r0, r6
 800627e:	f000 f98f 	bl	80065a0 <_free_r>
 8006282:	2300      	movs	r3, #0
 8006284:	6363      	str	r3, [r4, #52]	; 0x34
 8006286:	89a3      	ldrh	r3, [r4, #12]
 8006288:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800628c:	81a3      	strh	r3, [r4, #12]
 800628e:	2300      	movs	r3, #0
 8006290:	6063      	str	r3, [r4, #4]
 8006292:	6923      	ldr	r3, [r4, #16]
 8006294:	6023      	str	r3, [r4, #0]
 8006296:	89a3      	ldrh	r3, [r4, #12]
 8006298:	f043 0308 	orr.w	r3, r3, #8
 800629c:	81a3      	strh	r3, [r4, #12]
 800629e:	6923      	ldr	r3, [r4, #16]
 80062a0:	b94b      	cbnz	r3, 80062b6 <__swsetup_r+0x9a>
 80062a2:	89a3      	ldrh	r3, [r4, #12]
 80062a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ac:	d003      	beq.n	80062b6 <__swsetup_r+0x9a>
 80062ae:	4621      	mov	r1, r4
 80062b0:	4630      	mov	r0, r6
 80062b2:	f000 f929 	bl	8006508 <__smakebuf_r>
 80062b6:	89a0      	ldrh	r0, [r4, #12]
 80062b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062bc:	f010 0301 	ands.w	r3, r0, #1
 80062c0:	d00a      	beq.n	80062d8 <__swsetup_r+0xbc>
 80062c2:	2300      	movs	r3, #0
 80062c4:	60a3      	str	r3, [r4, #8]
 80062c6:	6963      	ldr	r3, [r4, #20]
 80062c8:	425b      	negs	r3, r3
 80062ca:	61a3      	str	r3, [r4, #24]
 80062cc:	6923      	ldr	r3, [r4, #16]
 80062ce:	b943      	cbnz	r3, 80062e2 <__swsetup_r+0xc6>
 80062d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062d4:	d1ba      	bne.n	800624c <__swsetup_r+0x30>
 80062d6:	bd70      	pop	{r4, r5, r6, pc}
 80062d8:	0781      	lsls	r1, r0, #30
 80062da:	bf58      	it	pl
 80062dc:	6963      	ldrpl	r3, [r4, #20]
 80062de:	60a3      	str	r3, [r4, #8]
 80062e0:	e7f4      	b.n	80062cc <__swsetup_r+0xb0>
 80062e2:	2000      	movs	r0, #0
 80062e4:	e7f7      	b.n	80062d6 <__swsetup_r+0xba>
 80062e6:	bf00      	nop
 80062e8:	2000000c 	.word	0x2000000c
 80062ec:	08006914 	.word	0x08006914
 80062f0:	08006934 	.word	0x08006934
 80062f4:	080068f4 	.word	0x080068f4

080062f8 <_close_r>:
 80062f8:	b538      	push	{r3, r4, r5, lr}
 80062fa:	4d06      	ldr	r5, [pc, #24]	; (8006314 <_close_r+0x1c>)
 80062fc:	2300      	movs	r3, #0
 80062fe:	4604      	mov	r4, r0
 8006300:	4608      	mov	r0, r1
 8006302:	602b      	str	r3, [r5, #0]
 8006304:	f7fb fa7f 	bl	8001806 <_close>
 8006308:	1c43      	adds	r3, r0, #1
 800630a:	d102      	bne.n	8006312 <_close_r+0x1a>
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	b103      	cbz	r3, 8006312 <_close_r+0x1a>
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	bd38      	pop	{r3, r4, r5, pc}
 8006314:	20000b18 	.word	0x20000b18

08006318 <__sflush_r>:
 8006318:	898a      	ldrh	r2, [r1, #12]
 800631a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800631e:	4605      	mov	r5, r0
 8006320:	0710      	lsls	r0, r2, #28
 8006322:	460c      	mov	r4, r1
 8006324:	d458      	bmi.n	80063d8 <__sflush_r+0xc0>
 8006326:	684b      	ldr	r3, [r1, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	dc05      	bgt.n	8006338 <__sflush_r+0x20>
 800632c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800632e:	2b00      	cmp	r3, #0
 8006330:	dc02      	bgt.n	8006338 <__sflush_r+0x20>
 8006332:	2000      	movs	r0, #0
 8006334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800633a:	2e00      	cmp	r6, #0
 800633c:	d0f9      	beq.n	8006332 <__sflush_r+0x1a>
 800633e:	2300      	movs	r3, #0
 8006340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006344:	682f      	ldr	r7, [r5, #0]
 8006346:	602b      	str	r3, [r5, #0]
 8006348:	d032      	beq.n	80063b0 <__sflush_r+0x98>
 800634a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800634c:	89a3      	ldrh	r3, [r4, #12]
 800634e:	075a      	lsls	r2, r3, #29
 8006350:	d505      	bpl.n	800635e <__sflush_r+0x46>
 8006352:	6863      	ldr	r3, [r4, #4]
 8006354:	1ac0      	subs	r0, r0, r3
 8006356:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006358:	b10b      	cbz	r3, 800635e <__sflush_r+0x46>
 800635a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800635c:	1ac0      	subs	r0, r0, r3
 800635e:	2300      	movs	r3, #0
 8006360:	4602      	mov	r2, r0
 8006362:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006364:	6a21      	ldr	r1, [r4, #32]
 8006366:	4628      	mov	r0, r5
 8006368:	47b0      	blx	r6
 800636a:	1c43      	adds	r3, r0, #1
 800636c:	89a3      	ldrh	r3, [r4, #12]
 800636e:	d106      	bne.n	800637e <__sflush_r+0x66>
 8006370:	6829      	ldr	r1, [r5, #0]
 8006372:	291d      	cmp	r1, #29
 8006374:	d82c      	bhi.n	80063d0 <__sflush_r+0xb8>
 8006376:	4a2a      	ldr	r2, [pc, #168]	; (8006420 <__sflush_r+0x108>)
 8006378:	40ca      	lsrs	r2, r1
 800637a:	07d6      	lsls	r6, r2, #31
 800637c:	d528      	bpl.n	80063d0 <__sflush_r+0xb8>
 800637e:	2200      	movs	r2, #0
 8006380:	6062      	str	r2, [r4, #4]
 8006382:	04d9      	lsls	r1, r3, #19
 8006384:	6922      	ldr	r2, [r4, #16]
 8006386:	6022      	str	r2, [r4, #0]
 8006388:	d504      	bpl.n	8006394 <__sflush_r+0x7c>
 800638a:	1c42      	adds	r2, r0, #1
 800638c:	d101      	bne.n	8006392 <__sflush_r+0x7a>
 800638e:	682b      	ldr	r3, [r5, #0]
 8006390:	b903      	cbnz	r3, 8006394 <__sflush_r+0x7c>
 8006392:	6560      	str	r0, [r4, #84]	; 0x54
 8006394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006396:	602f      	str	r7, [r5, #0]
 8006398:	2900      	cmp	r1, #0
 800639a:	d0ca      	beq.n	8006332 <__sflush_r+0x1a>
 800639c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063a0:	4299      	cmp	r1, r3
 80063a2:	d002      	beq.n	80063aa <__sflush_r+0x92>
 80063a4:	4628      	mov	r0, r5
 80063a6:	f000 f8fb 	bl	80065a0 <_free_r>
 80063aa:	2000      	movs	r0, #0
 80063ac:	6360      	str	r0, [r4, #52]	; 0x34
 80063ae:	e7c1      	b.n	8006334 <__sflush_r+0x1c>
 80063b0:	6a21      	ldr	r1, [r4, #32]
 80063b2:	2301      	movs	r3, #1
 80063b4:	4628      	mov	r0, r5
 80063b6:	47b0      	blx	r6
 80063b8:	1c41      	adds	r1, r0, #1
 80063ba:	d1c7      	bne.n	800634c <__sflush_r+0x34>
 80063bc:	682b      	ldr	r3, [r5, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0c4      	beq.n	800634c <__sflush_r+0x34>
 80063c2:	2b1d      	cmp	r3, #29
 80063c4:	d001      	beq.n	80063ca <__sflush_r+0xb2>
 80063c6:	2b16      	cmp	r3, #22
 80063c8:	d101      	bne.n	80063ce <__sflush_r+0xb6>
 80063ca:	602f      	str	r7, [r5, #0]
 80063cc:	e7b1      	b.n	8006332 <__sflush_r+0x1a>
 80063ce:	89a3      	ldrh	r3, [r4, #12]
 80063d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063d4:	81a3      	strh	r3, [r4, #12]
 80063d6:	e7ad      	b.n	8006334 <__sflush_r+0x1c>
 80063d8:	690f      	ldr	r7, [r1, #16]
 80063da:	2f00      	cmp	r7, #0
 80063dc:	d0a9      	beq.n	8006332 <__sflush_r+0x1a>
 80063de:	0793      	lsls	r3, r2, #30
 80063e0:	680e      	ldr	r6, [r1, #0]
 80063e2:	bf08      	it	eq
 80063e4:	694b      	ldreq	r3, [r1, #20]
 80063e6:	600f      	str	r7, [r1, #0]
 80063e8:	bf18      	it	ne
 80063ea:	2300      	movne	r3, #0
 80063ec:	eba6 0807 	sub.w	r8, r6, r7
 80063f0:	608b      	str	r3, [r1, #8]
 80063f2:	f1b8 0f00 	cmp.w	r8, #0
 80063f6:	dd9c      	ble.n	8006332 <__sflush_r+0x1a>
 80063f8:	6a21      	ldr	r1, [r4, #32]
 80063fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063fc:	4643      	mov	r3, r8
 80063fe:	463a      	mov	r2, r7
 8006400:	4628      	mov	r0, r5
 8006402:	47b0      	blx	r6
 8006404:	2800      	cmp	r0, #0
 8006406:	dc06      	bgt.n	8006416 <__sflush_r+0xfe>
 8006408:	89a3      	ldrh	r3, [r4, #12]
 800640a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800640e:	81a3      	strh	r3, [r4, #12]
 8006410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006414:	e78e      	b.n	8006334 <__sflush_r+0x1c>
 8006416:	4407      	add	r7, r0
 8006418:	eba8 0800 	sub.w	r8, r8, r0
 800641c:	e7e9      	b.n	80063f2 <__sflush_r+0xda>
 800641e:	bf00      	nop
 8006420:	20400001 	.word	0x20400001

08006424 <_fflush_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	690b      	ldr	r3, [r1, #16]
 8006428:	4605      	mov	r5, r0
 800642a:	460c      	mov	r4, r1
 800642c:	b913      	cbnz	r3, 8006434 <_fflush_r+0x10>
 800642e:	2500      	movs	r5, #0
 8006430:	4628      	mov	r0, r5
 8006432:	bd38      	pop	{r3, r4, r5, pc}
 8006434:	b118      	cbz	r0, 800643e <_fflush_r+0x1a>
 8006436:	6983      	ldr	r3, [r0, #24]
 8006438:	b90b      	cbnz	r3, 800643e <_fflush_r+0x1a>
 800643a:	f7ff fa4f 	bl	80058dc <__sinit>
 800643e:	4b14      	ldr	r3, [pc, #80]	; (8006490 <_fflush_r+0x6c>)
 8006440:	429c      	cmp	r4, r3
 8006442:	d11b      	bne.n	800647c <_fflush_r+0x58>
 8006444:	686c      	ldr	r4, [r5, #4]
 8006446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0ef      	beq.n	800642e <_fflush_r+0xa>
 800644e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006450:	07d0      	lsls	r0, r2, #31
 8006452:	d404      	bmi.n	800645e <_fflush_r+0x3a>
 8006454:	0599      	lsls	r1, r3, #22
 8006456:	d402      	bmi.n	800645e <_fflush_r+0x3a>
 8006458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800645a:	f7ff fadd 	bl	8005a18 <__retarget_lock_acquire_recursive>
 800645e:	4628      	mov	r0, r5
 8006460:	4621      	mov	r1, r4
 8006462:	f7ff ff59 	bl	8006318 <__sflush_r>
 8006466:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006468:	07da      	lsls	r2, r3, #31
 800646a:	4605      	mov	r5, r0
 800646c:	d4e0      	bmi.n	8006430 <_fflush_r+0xc>
 800646e:	89a3      	ldrh	r3, [r4, #12]
 8006470:	059b      	lsls	r3, r3, #22
 8006472:	d4dd      	bmi.n	8006430 <_fflush_r+0xc>
 8006474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006476:	f7ff fad0 	bl	8005a1a <__retarget_lock_release_recursive>
 800647a:	e7d9      	b.n	8006430 <_fflush_r+0xc>
 800647c:	4b05      	ldr	r3, [pc, #20]	; (8006494 <_fflush_r+0x70>)
 800647e:	429c      	cmp	r4, r3
 8006480:	d101      	bne.n	8006486 <_fflush_r+0x62>
 8006482:	68ac      	ldr	r4, [r5, #8]
 8006484:	e7df      	b.n	8006446 <_fflush_r+0x22>
 8006486:	4b04      	ldr	r3, [pc, #16]	; (8006498 <_fflush_r+0x74>)
 8006488:	429c      	cmp	r4, r3
 800648a:	bf08      	it	eq
 800648c:	68ec      	ldreq	r4, [r5, #12]
 800648e:	e7da      	b.n	8006446 <_fflush_r+0x22>
 8006490:	08006914 	.word	0x08006914
 8006494:	08006934 	.word	0x08006934
 8006498:	080068f4 	.word	0x080068f4

0800649c <_lseek_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	4d07      	ldr	r5, [pc, #28]	; (80064bc <_lseek_r+0x20>)
 80064a0:	4604      	mov	r4, r0
 80064a2:	4608      	mov	r0, r1
 80064a4:	4611      	mov	r1, r2
 80064a6:	2200      	movs	r2, #0
 80064a8:	602a      	str	r2, [r5, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	f7fb f9d2 	bl	8001854 <_lseek>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	d102      	bne.n	80064ba <_lseek_r+0x1e>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	b103      	cbz	r3, 80064ba <_lseek_r+0x1e>
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	20000b18 	.word	0x20000b18

080064c0 <__swhatbuf_r>:
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	460e      	mov	r6, r1
 80064c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064c8:	2900      	cmp	r1, #0
 80064ca:	b096      	sub	sp, #88	; 0x58
 80064cc:	4614      	mov	r4, r2
 80064ce:	461d      	mov	r5, r3
 80064d0:	da07      	bge.n	80064e2 <__swhatbuf_r+0x22>
 80064d2:	2300      	movs	r3, #0
 80064d4:	602b      	str	r3, [r5, #0]
 80064d6:	89b3      	ldrh	r3, [r6, #12]
 80064d8:	061a      	lsls	r2, r3, #24
 80064da:	d410      	bmi.n	80064fe <__swhatbuf_r+0x3e>
 80064dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064e0:	e00e      	b.n	8006500 <__swhatbuf_r+0x40>
 80064e2:	466a      	mov	r2, sp
 80064e4:	f000 f8be 	bl	8006664 <_fstat_r>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	dbf2      	blt.n	80064d2 <__swhatbuf_r+0x12>
 80064ec:	9a01      	ldr	r2, [sp, #4]
 80064ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064f6:	425a      	negs	r2, r3
 80064f8:	415a      	adcs	r2, r3
 80064fa:	602a      	str	r2, [r5, #0]
 80064fc:	e7ee      	b.n	80064dc <__swhatbuf_r+0x1c>
 80064fe:	2340      	movs	r3, #64	; 0x40
 8006500:	2000      	movs	r0, #0
 8006502:	6023      	str	r3, [r4, #0]
 8006504:	b016      	add	sp, #88	; 0x58
 8006506:	bd70      	pop	{r4, r5, r6, pc}

08006508 <__smakebuf_r>:
 8006508:	898b      	ldrh	r3, [r1, #12]
 800650a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800650c:	079d      	lsls	r5, r3, #30
 800650e:	4606      	mov	r6, r0
 8006510:	460c      	mov	r4, r1
 8006512:	d507      	bpl.n	8006524 <__smakebuf_r+0x1c>
 8006514:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	6123      	str	r3, [r4, #16]
 800651c:	2301      	movs	r3, #1
 800651e:	6163      	str	r3, [r4, #20]
 8006520:	b002      	add	sp, #8
 8006522:	bd70      	pop	{r4, r5, r6, pc}
 8006524:	ab01      	add	r3, sp, #4
 8006526:	466a      	mov	r2, sp
 8006528:	f7ff ffca 	bl	80064c0 <__swhatbuf_r>
 800652c:	9900      	ldr	r1, [sp, #0]
 800652e:	4605      	mov	r5, r0
 8006530:	4630      	mov	r0, r6
 8006532:	f7ff fa73 	bl	8005a1c <_malloc_r>
 8006536:	b948      	cbnz	r0, 800654c <__smakebuf_r+0x44>
 8006538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800653c:	059a      	lsls	r2, r3, #22
 800653e:	d4ef      	bmi.n	8006520 <__smakebuf_r+0x18>
 8006540:	f023 0303 	bic.w	r3, r3, #3
 8006544:	f043 0302 	orr.w	r3, r3, #2
 8006548:	81a3      	strh	r3, [r4, #12]
 800654a:	e7e3      	b.n	8006514 <__smakebuf_r+0xc>
 800654c:	4b0d      	ldr	r3, [pc, #52]	; (8006584 <__smakebuf_r+0x7c>)
 800654e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	6020      	str	r0, [r4, #0]
 8006554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006558:	81a3      	strh	r3, [r4, #12]
 800655a:	9b00      	ldr	r3, [sp, #0]
 800655c:	6163      	str	r3, [r4, #20]
 800655e:	9b01      	ldr	r3, [sp, #4]
 8006560:	6120      	str	r0, [r4, #16]
 8006562:	b15b      	cbz	r3, 800657c <__smakebuf_r+0x74>
 8006564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006568:	4630      	mov	r0, r6
 800656a:	f000 f88d 	bl	8006688 <_isatty_r>
 800656e:	b128      	cbz	r0, 800657c <__smakebuf_r+0x74>
 8006570:	89a3      	ldrh	r3, [r4, #12]
 8006572:	f023 0303 	bic.w	r3, r3, #3
 8006576:	f043 0301 	orr.w	r3, r3, #1
 800657a:	81a3      	strh	r3, [r4, #12]
 800657c:	89a0      	ldrh	r0, [r4, #12]
 800657e:	4305      	orrs	r5, r0
 8006580:	81a5      	strh	r5, [r4, #12]
 8006582:	e7cd      	b.n	8006520 <__smakebuf_r+0x18>
 8006584:	08005875 	.word	0x08005875

08006588 <__malloc_lock>:
 8006588:	4801      	ldr	r0, [pc, #4]	; (8006590 <__malloc_lock+0x8>)
 800658a:	f7ff ba45 	b.w	8005a18 <__retarget_lock_acquire_recursive>
 800658e:	bf00      	nop
 8006590:	20000b10 	.word	0x20000b10

08006594 <__malloc_unlock>:
 8006594:	4801      	ldr	r0, [pc, #4]	; (800659c <__malloc_unlock+0x8>)
 8006596:	f7ff ba40 	b.w	8005a1a <__retarget_lock_release_recursive>
 800659a:	bf00      	nop
 800659c:	20000b10 	.word	0x20000b10

080065a0 <_free_r>:
 80065a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065a2:	2900      	cmp	r1, #0
 80065a4:	d048      	beq.n	8006638 <_free_r+0x98>
 80065a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065aa:	9001      	str	r0, [sp, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f1a1 0404 	sub.w	r4, r1, #4
 80065b2:	bfb8      	it	lt
 80065b4:	18e4      	addlt	r4, r4, r3
 80065b6:	f7ff ffe7 	bl	8006588 <__malloc_lock>
 80065ba:	4a20      	ldr	r2, [pc, #128]	; (800663c <_free_r+0x9c>)
 80065bc:	9801      	ldr	r0, [sp, #4]
 80065be:	6813      	ldr	r3, [r2, #0]
 80065c0:	4615      	mov	r5, r2
 80065c2:	b933      	cbnz	r3, 80065d2 <_free_r+0x32>
 80065c4:	6063      	str	r3, [r4, #4]
 80065c6:	6014      	str	r4, [r2, #0]
 80065c8:	b003      	add	sp, #12
 80065ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065ce:	f7ff bfe1 	b.w	8006594 <__malloc_unlock>
 80065d2:	42a3      	cmp	r3, r4
 80065d4:	d90b      	bls.n	80065ee <_free_r+0x4e>
 80065d6:	6821      	ldr	r1, [r4, #0]
 80065d8:	1862      	adds	r2, r4, r1
 80065da:	4293      	cmp	r3, r2
 80065dc:	bf04      	itt	eq
 80065de:	681a      	ldreq	r2, [r3, #0]
 80065e0:	685b      	ldreq	r3, [r3, #4]
 80065e2:	6063      	str	r3, [r4, #4]
 80065e4:	bf04      	itt	eq
 80065e6:	1852      	addeq	r2, r2, r1
 80065e8:	6022      	streq	r2, [r4, #0]
 80065ea:	602c      	str	r4, [r5, #0]
 80065ec:	e7ec      	b.n	80065c8 <_free_r+0x28>
 80065ee:	461a      	mov	r2, r3
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	b10b      	cbz	r3, 80065f8 <_free_r+0x58>
 80065f4:	42a3      	cmp	r3, r4
 80065f6:	d9fa      	bls.n	80065ee <_free_r+0x4e>
 80065f8:	6811      	ldr	r1, [r2, #0]
 80065fa:	1855      	adds	r5, r2, r1
 80065fc:	42a5      	cmp	r5, r4
 80065fe:	d10b      	bne.n	8006618 <_free_r+0x78>
 8006600:	6824      	ldr	r4, [r4, #0]
 8006602:	4421      	add	r1, r4
 8006604:	1854      	adds	r4, r2, r1
 8006606:	42a3      	cmp	r3, r4
 8006608:	6011      	str	r1, [r2, #0]
 800660a:	d1dd      	bne.n	80065c8 <_free_r+0x28>
 800660c:	681c      	ldr	r4, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	6053      	str	r3, [r2, #4]
 8006612:	4421      	add	r1, r4
 8006614:	6011      	str	r1, [r2, #0]
 8006616:	e7d7      	b.n	80065c8 <_free_r+0x28>
 8006618:	d902      	bls.n	8006620 <_free_r+0x80>
 800661a:	230c      	movs	r3, #12
 800661c:	6003      	str	r3, [r0, #0]
 800661e:	e7d3      	b.n	80065c8 <_free_r+0x28>
 8006620:	6825      	ldr	r5, [r4, #0]
 8006622:	1961      	adds	r1, r4, r5
 8006624:	428b      	cmp	r3, r1
 8006626:	bf04      	itt	eq
 8006628:	6819      	ldreq	r1, [r3, #0]
 800662a:	685b      	ldreq	r3, [r3, #4]
 800662c:	6063      	str	r3, [r4, #4]
 800662e:	bf04      	itt	eq
 8006630:	1949      	addeq	r1, r1, r5
 8006632:	6021      	streq	r1, [r4, #0]
 8006634:	6054      	str	r4, [r2, #4]
 8006636:	e7c7      	b.n	80065c8 <_free_r+0x28>
 8006638:	b003      	add	sp, #12
 800663a:	bd30      	pop	{r4, r5, pc}
 800663c:	20000098 	.word	0x20000098

08006640 <_read_r>:
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	4d07      	ldr	r5, [pc, #28]	; (8006660 <_read_r+0x20>)
 8006644:	4604      	mov	r4, r0
 8006646:	4608      	mov	r0, r1
 8006648:	4611      	mov	r1, r2
 800664a:	2200      	movs	r2, #0
 800664c:	602a      	str	r2, [r5, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	f7fb f8a0 	bl	8001794 <_read>
 8006654:	1c43      	adds	r3, r0, #1
 8006656:	d102      	bne.n	800665e <_read_r+0x1e>
 8006658:	682b      	ldr	r3, [r5, #0]
 800665a:	b103      	cbz	r3, 800665e <_read_r+0x1e>
 800665c:	6023      	str	r3, [r4, #0]
 800665e:	bd38      	pop	{r3, r4, r5, pc}
 8006660:	20000b18 	.word	0x20000b18

08006664 <_fstat_r>:
 8006664:	b538      	push	{r3, r4, r5, lr}
 8006666:	4d07      	ldr	r5, [pc, #28]	; (8006684 <_fstat_r+0x20>)
 8006668:	2300      	movs	r3, #0
 800666a:	4604      	mov	r4, r0
 800666c:	4608      	mov	r0, r1
 800666e:	4611      	mov	r1, r2
 8006670:	602b      	str	r3, [r5, #0]
 8006672:	f7fb f8d4 	bl	800181e <_fstat>
 8006676:	1c43      	adds	r3, r0, #1
 8006678:	d102      	bne.n	8006680 <_fstat_r+0x1c>
 800667a:	682b      	ldr	r3, [r5, #0]
 800667c:	b103      	cbz	r3, 8006680 <_fstat_r+0x1c>
 800667e:	6023      	str	r3, [r4, #0]
 8006680:	bd38      	pop	{r3, r4, r5, pc}
 8006682:	bf00      	nop
 8006684:	20000b18 	.word	0x20000b18

08006688 <_isatty_r>:
 8006688:	b538      	push	{r3, r4, r5, lr}
 800668a:	4d06      	ldr	r5, [pc, #24]	; (80066a4 <_isatty_r+0x1c>)
 800668c:	2300      	movs	r3, #0
 800668e:	4604      	mov	r4, r0
 8006690:	4608      	mov	r0, r1
 8006692:	602b      	str	r3, [r5, #0]
 8006694:	f7fb f8d3 	bl	800183e <_isatty>
 8006698:	1c43      	adds	r3, r0, #1
 800669a:	d102      	bne.n	80066a2 <_isatty_r+0x1a>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	b103      	cbz	r3, 80066a2 <_isatty_r+0x1a>
 80066a0:	6023      	str	r3, [r4, #0]
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
 80066a4:	20000b18 	.word	0x20000b18

080066a8 <_init>:
 80066a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066aa:	bf00      	nop
 80066ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ae:	bc08      	pop	{r3}
 80066b0:	469e      	mov	lr, r3
 80066b2:	4770      	bx	lr

080066b4 <_fini>:
 80066b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b6:	bf00      	nop
 80066b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ba:	bc08      	pop	{r3}
 80066bc:	469e      	mov	lr, r3
 80066be:	4770      	bx	lr
