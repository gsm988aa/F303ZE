
F303ZE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006050  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  080061f0  080061f0  000161f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006440  08006440  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006440  08006440  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006440  08006440  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006440  08006440  00016440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006444  08006444  00016444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aac  20000070  080064b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b1c  080064b8  00020b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101be  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000295e  00000000  00000000  0003025e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00032bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  00033868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b40  00000000  00000000  000343e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128f7  00000000  00000000  00056f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd202  00000000  00000000  0006981f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00136a21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a24  00000000  00000000  00136a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080061d8 	.word	0x080061d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080061d8 	.word	0x080061d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000286:	f107 031c 	add.w	r3, r7, #28
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
 800029e:	611a      	str	r2, [r3, #16]
 80002a0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002a2:	4b74      	ldr	r3, [pc, #464]	; (8000474 <MX_ADC1_Init+0x1f4>)
 80002a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002aa:	4b72      	ldr	r3, [pc, #456]	; (8000474 <MX_ADC1_Init+0x1f4>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002b0:	4b70      	ldr	r3, [pc, #448]	; (8000474 <MX_ADC1_Init+0x1f4>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002b6:	4b6f      	ldr	r3, [pc, #444]	; (8000474 <MX_ADC1_Init+0x1f4>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002bc:	4b6d      	ldr	r3, [pc, #436]	; (8000474 <MX_ADC1_Init+0x1f4>)
 80002be:	2201      	movs	r2, #1
 80002c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002c2:	4b6c      	ldr	r3, [pc, #432]	; (8000474 <MX_ADC1_Init+0x1f4>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002ca:	4b6a      	ldr	r3, [pc, #424]	; (8000474 <MX_ADC1_Init+0x1f4>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002d0:	4b68      	ldr	r3, [pc, #416]	; (8000474 <MX_ADC1_Init+0x1f4>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d6:	4b67      	ldr	r3, [pc, #412]	; (8000474 <MX_ADC1_Init+0x1f4>)
 80002d8:	2200      	movs	r2, #0
 80002da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 80002dc:	4b65      	ldr	r3, [pc, #404]	; (8000474 <MX_ADC1_Init+0x1f4>)
 80002de:	220b      	movs	r2, #11
 80002e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80002e2:	4b64      	ldr	r3, [pc, #400]	; (8000474 <MX_ADC1_Init+0x1f4>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002ea:	4b62      	ldr	r3, [pc, #392]	; (8000474 <MX_ADC1_Init+0x1f4>)
 80002ec:	2204      	movs	r2, #4
 80002ee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002f0:	4b60      	ldr	r3, [pc, #384]	; (8000474 <MX_ADC1_Init+0x1f4>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80002f6:	4b5f      	ldr	r3, [pc, #380]	; (8000474 <MX_ADC1_Init+0x1f4>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002fc:	485d      	ldr	r0, [pc, #372]	; (8000474 <MX_ADC1_Init+0x1f4>)
 80002fe:	f001 fad1 	bl	80018a4 <HAL_ADC_Init>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000308:	f000 ff81 	bl	800120e <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800030c:	2300      	movs	r3, #0
 800030e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000310:	f107 031c 	add.w	r3, r7, #28
 8000314:	4619      	mov	r1, r3
 8000316:	4857      	ldr	r0, [pc, #348]	; (8000474 <MX_ADC1_Init+0x1f4>)
 8000318:	f002 f8c6 	bl	80024a8 <HAL_ADCEx_MultiModeConfigChannel>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000322:	f000 ff74 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000326:	2301      	movs	r3, #1
 8000328:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800032a:	2301      	movs	r3, #1
 800032c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800032e:	2300      	movs	r3, #0
 8000330:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800033a:	2300      	movs	r3, #0
 800033c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4619      	mov	r1, r3
 8000342:	484c      	ldr	r0, [pc, #304]	; (8000474 <MX_ADC1_Init+0x1f4>)
 8000344:	f001 fdc4 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800034e:	f000 ff5e 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000352:	2302      	movs	r3, #2
 8000354:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000356:	2302      	movs	r3, #2
 8000358:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4619      	mov	r1, r3
 800035e:	4845      	ldr	r0, [pc, #276]	; (8000474 <MX_ADC1_Init+0x1f4>)
 8000360:	f001 fdb6 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800036a:	f000 ff50 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800036e:	2303      	movs	r3, #3
 8000370:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000372:	2303      	movs	r3, #3
 8000374:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	4619      	mov	r1, r3
 800037a:	483e      	ldr	r0, [pc, #248]	; (8000474 <MX_ADC1_Init+0x1f4>)
 800037c:	f001 fda8 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8000386:	f000 ff42 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800038a:	2304      	movs	r3, #4
 800038c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800038e:	2304      	movs	r3, #4
 8000390:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	4619      	mov	r1, r3
 8000396:	4837      	ldr	r0, [pc, #220]	; (8000474 <MX_ADC1_Init+0x1f4>)
 8000398:	f001 fd9a 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80003a2:	f000 ff34 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003a6:	2305      	movs	r3, #5
 80003a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80003aa:	2305      	movs	r3, #5
 80003ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4619      	mov	r1, r3
 80003b2:	4830      	ldr	r0, [pc, #192]	; (8000474 <MX_ADC1_Init+0x1f4>)
 80003b4:	f001 fd8c 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 80003be:	f000 ff26 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80003c2:	2306      	movs	r3, #6
 80003c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80003c6:	2306      	movs	r3, #6
 80003c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	4619      	mov	r1, r3
 80003ce:	4829      	ldr	r0, [pc, #164]	; (8000474 <MX_ADC1_Init+0x1f4>)
 80003d0:	f001 fd7e 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 80003da:	f000 ff18 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003de:	2307      	movs	r3, #7
 80003e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80003e2:	2307      	movs	r3, #7
 80003e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	4619      	mov	r1, r3
 80003ea:	4822      	ldr	r0, [pc, #136]	; (8000474 <MX_ADC1_Init+0x1f4>)
 80003ec:	f001 fd70 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 80003f6:	f000 ff0a 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80003fa:	2308      	movs	r3, #8
 80003fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80003fe:	2308      	movs	r3, #8
 8000400:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	4619      	mov	r1, r3
 8000406:	481b      	ldr	r0, [pc, #108]	; (8000474 <MX_ADC1_Init+0x1f4>)
 8000408:	f001 fd62 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8000412:	f000 fefc 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000416:	2309      	movs	r3, #9
 8000418:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800041a:	2309      	movs	r3, #9
 800041c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	4619      	mov	r1, r3
 8000422:	4814      	ldr	r0, [pc, #80]	; (8000474 <MX_ADC1_Init+0x1f4>)
 8000424:	f001 fd54 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_ADC1_Init+0x1b2>
  {
    Error_Handler();
 800042e:	f000 feee 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000432:	230a      	movs	r3, #10
 8000434:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000436:	230a      	movs	r3, #10
 8000438:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	4619      	mov	r1, r3
 800043e:	480d      	ldr	r0, [pc, #52]	; (8000474 <MX_ADC1_Init+0x1f4>)
 8000440:	f001 fd46 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_ADC1_Init+0x1ce>
  {
    Error_Handler();
 800044a:	f000 fee0 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800044e:	230e      	movs	r3, #14
 8000450:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000452:	230b      	movs	r3, #11
 8000454:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	4619      	mov	r1, r3
 800045a:	4806      	ldr	r0, [pc, #24]	; (8000474 <MX_ADC1_Init+0x1f4>)
 800045c:	f001 fd38 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_ADC1_Init+0x1ea>
  {
    Error_Handler();
 8000466:	f000 fed2 	bl	800120e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	3728      	adds	r7, #40	; 0x28
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000178 	.word	0x20000178

08000478 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800047e:	463b      	mov	r3, r7
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
 800048a:	611a      	str	r2, [r3, #16]
 800048c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800048e:	4b52      	ldr	r3, [pc, #328]	; (80005d8 <MX_ADC2_Init+0x160>)
 8000490:	4a52      	ldr	r2, [pc, #328]	; (80005dc <MX_ADC2_Init+0x164>)
 8000492:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000494:	4b50      	ldr	r3, [pc, #320]	; (80005d8 <MX_ADC2_Init+0x160>)
 8000496:	2200      	movs	r2, #0
 8000498:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800049a:	4b4f      	ldr	r3, [pc, #316]	; (80005d8 <MX_ADC2_Init+0x160>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004a0:	4b4d      	ldr	r3, [pc, #308]	; (80005d8 <MX_ADC2_Init+0x160>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004a6:	4b4c      	ldr	r3, [pc, #304]	; (80005d8 <MX_ADC2_Init+0x160>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 80004ac:	4b4a      	ldr	r3, [pc, #296]	; (80005d8 <MX_ADC2_Init+0x160>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 80004b4:	4b48      	ldr	r3, [pc, #288]	; (80005d8 <MX_ADC2_Init+0x160>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004ba:	4b47      	ldr	r3, [pc, #284]	; (80005d8 <MX_ADC2_Init+0x160>)
 80004bc:	2200      	movs	r2, #0
 80004be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004c0:	4b45      	ldr	r3, [pc, #276]	; (80005d8 <MX_ADC2_Init+0x160>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004c6:	4b44      	ldr	r3, [pc, #272]	; (80005d8 <MX_ADC2_Init+0x160>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 7;
 80004cc:	4b42      	ldr	r3, [pc, #264]	; (80005d8 <MX_ADC2_Init+0x160>)
 80004ce:	2207      	movs	r2, #7
 80004d0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80004d2:	4b41      	ldr	r3, [pc, #260]	; (80005d8 <MX_ADC2_Init+0x160>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004da:	4b3f      	ldr	r3, [pc, #252]	; (80005d8 <MX_ADC2_Init+0x160>)
 80004dc:	2204      	movs	r2, #4
 80004de:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80004e0:	4b3d      	ldr	r3, [pc, #244]	; (80005d8 <MX_ADC2_Init+0x160>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004e6:	4b3c      	ldr	r3, [pc, #240]	; (80005d8 <MX_ADC2_Init+0x160>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004ec:	483a      	ldr	r0, [pc, #232]	; (80005d8 <MX_ADC2_Init+0x160>)
 80004ee:	f001 f9d9 	bl	80018a4 <HAL_ADC_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80004f8:	f000 fe89 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80004fc:	230c      	movs	r3, #12
 80004fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000500:	2301      	movs	r3, #1
 8000502:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000508:	2300      	movs	r3, #0
 800050a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800050c:	2300      	movs	r3, #0
 800050e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000514:	463b      	mov	r3, r7
 8000516:	4619      	mov	r1, r3
 8000518:	482f      	ldr	r0, [pc, #188]	; (80005d8 <MX_ADC2_Init+0x160>)
 800051a:	f001 fcd9 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8000524:	f000 fe73 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000528:	2302      	movs	r3, #2
 800052a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800052c:	2302      	movs	r3, #2
 800052e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000530:	463b      	mov	r3, r7
 8000532:	4619      	mov	r1, r3
 8000534:	4828      	ldr	r0, [pc, #160]	; (80005d8 <MX_ADC2_Init+0x160>)
 8000536:	f001 fccb 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8000540:	f000 fe65 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000544:	2303      	movs	r3, #3
 8000546:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000548:	2303      	movs	r3, #3
 800054a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800054c:	463b      	mov	r3, r7
 800054e:	4619      	mov	r1, r3
 8000550:	4821      	ldr	r0, [pc, #132]	; (80005d8 <MX_ADC2_Init+0x160>)
 8000552:	f001 fcbd 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 800055c:	f000 fe57 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000560:	2304      	movs	r3, #4
 8000562:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000564:	2304      	movs	r3, #4
 8000566:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	4619      	mov	r1, r3
 800056c:	481a      	ldr	r0, [pc, #104]	; (80005d8 <MX_ADC2_Init+0x160>)
 800056e:	f001 fcaf 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_ADC2_Init+0x104>
  {
    Error_Handler();
 8000578:	f000 fe49 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800057c:	2305      	movs	r3, #5
 800057e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000580:	2305      	movs	r3, #5
 8000582:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000584:	463b      	mov	r3, r7
 8000586:	4619      	mov	r1, r3
 8000588:	4813      	ldr	r0, [pc, #76]	; (80005d8 <MX_ADC2_Init+0x160>)
 800058a:	f001 fca1 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_ADC2_Init+0x120>
  {
    Error_Handler();
 8000594:	f000 fe3b 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000598:	230b      	movs	r3, #11
 800059a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800059c:	2306      	movs	r3, #6
 800059e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005a0:	463b      	mov	r3, r7
 80005a2:	4619      	mov	r1, r3
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <MX_ADC2_Init+0x160>)
 80005a6:	f001 fc93 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_ADC2_Init+0x13c>
  {
    Error_Handler();
 80005b0:	f000 fe2d 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005b4:	230c      	movs	r3, #12
 80005b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80005b8:	2307      	movs	r3, #7
 80005ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005bc:	463b      	mov	r3, r7
 80005be:	4619      	mov	r1, r3
 80005c0:	4805      	ldr	r0, [pc, #20]	; (80005d8 <MX_ADC2_Init+0x160>)
 80005c2:	f001 fc85 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_ADC2_Init+0x158>
  {
    Error_Handler();
 80005cc:	f000 fe1f 	bl	800120e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80005d0:	bf00      	nop
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200000e4 	.word	0x200000e4
 80005dc:	50000100 	.word	0x50000100

080005e0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
 8000600:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000602:	4b91      	ldr	r3, [pc, #580]	; (8000848 <MX_ADC3_Init+0x268>)
 8000604:	4a91      	ldr	r2, [pc, #580]	; (800084c <MX_ADC3_Init+0x26c>)
 8000606:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000608:	4b8f      	ldr	r3, [pc, #572]	; (8000848 <MX_ADC3_Init+0x268>)
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b8e      	ldr	r3, [pc, #568]	; (8000848 <MX_ADC3_Init+0x268>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000614:	4b8c      	ldr	r3, [pc, #560]	; (8000848 <MX_ADC3_Init+0x268>)
 8000616:	2201      	movs	r2, #1
 8000618:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800061a:	4b8b      	ldr	r3, [pc, #556]	; (8000848 <MX_ADC3_Init+0x268>)
 800061c:	2200      	movs	r2, #0
 800061e:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = ENABLE;
 8000620:	4b89      	ldr	r3, [pc, #548]	; (8000848 <MX_ADC3_Init+0x268>)
 8000622:	2201      	movs	r2, #1
 8000624:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.NbrOfDiscConversion = 1;
 8000628:	4b87      	ldr	r3, [pc, #540]	; (8000848 <MX_ADC3_Init+0x268>)
 800062a:	2201      	movs	r2, #1
 800062c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062e:	4b86      	ldr	r3, [pc, #536]	; (8000848 <MX_ADC3_Init+0x268>)
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000634:	4b84      	ldr	r3, [pc, #528]	; (8000848 <MX_ADC3_Init+0x268>)
 8000636:	2201      	movs	r2, #1
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063a:	4b83      	ldr	r3, [pc, #524]	; (8000848 <MX_ADC3_Init+0x268>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 15;
 8000640:	4b81      	ldr	r3, [pc, #516]	; (8000848 <MX_ADC3_Init+0x268>)
 8000642:	220f      	movs	r2, #15
 8000644:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000646:	4b80      	ldr	r3, [pc, #512]	; (8000848 <MX_ADC3_Init+0x268>)
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064e:	4b7e      	ldr	r3, [pc, #504]	; (8000848 <MX_ADC3_Init+0x268>)
 8000650:	2204      	movs	r2, #4
 8000652:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000654:	4b7c      	ldr	r3, [pc, #496]	; (8000848 <MX_ADC3_Init+0x268>)
 8000656:	2200      	movs	r2, #0
 8000658:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800065a:	4b7b      	ldr	r3, [pc, #492]	; (8000848 <MX_ADC3_Init+0x268>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000660:	4879      	ldr	r0, [pc, #484]	; (8000848 <MX_ADC3_Init+0x268>)
 8000662:	f001 f91f 	bl	80018a4 <HAL_ADC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800066c:	f000 fdcf 	bl	800120e <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	4619      	mov	r1, r3
 800067a:	4873      	ldr	r0, [pc, #460]	; (8000848 <MX_ADC3_Init+0x268>)
 800067c:	f001 ff14 	bl	80024a8 <HAL_ADCEx_MultiModeConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC3_Init+0xaa>
  {
    Error_Handler();
 8000686:	f000 fdc2 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800068a:	2301      	movs	r3, #1
 800068c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800068e:	2301      	movs	r3, #1
 8000690:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	4868      	ldr	r0, [pc, #416]	; (8000848 <MX_ADC3_Init+0x268>)
 80006a8:	f001 fc12 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 80006b2:	f000 fdac 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4861      	ldr	r0, [pc, #388]	; (8000848 <MX_ADC3_Init+0x268>)
 80006c4:	f001 fc04 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC3_Init+0xf2>
  {
    Error_Handler();
 80006ce:	f000 fd9e 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006d2:	2303      	movs	r3, #3
 80006d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006d6:	2303      	movs	r3, #3
 80006d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4619      	mov	r1, r3
 80006de:	485a      	ldr	r0, [pc, #360]	; (8000848 <MX_ADC3_Init+0x268>)
 80006e0:	f001 fbf6 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 80006ea:	f000 fd90 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006ee:	2305      	movs	r3, #5
 80006f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006f2:	2304      	movs	r3, #4
 80006f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4619      	mov	r1, r3
 80006fa:	4853      	ldr	r0, [pc, #332]	; (8000848 <MX_ADC3_Init+0x268>)
 80006fc:	f001 fbe8 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC3_Init+0x12a>
  {
    Error_Handler();
 8000706:	f000 fd82 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800070a:	2306      	movs	r3, #6
 800070c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800070e:	2305      	movs	r3, #5
 8000710:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4619      	mov	r1, r3
 8000716:	484c      	ldr	r0, [pc, #304]	; (8000848 <MX_ADC3_Init+0x268>)
 8000718:	f001 fbda 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC3_Init+0x146>
  {
    Error_Handler();
 8000722:	f000 fd74 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000726:	2307      	movs	r3, #7
 8000728:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800072a:	2306      	movs	r3, #6
 800072c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4619      	mov	r1, r3
 8000732:	4845      	ldr	r0, [pc, #276]	; (8000848 <MX_ADC3_Init+0x268>)
 8000734:	f001 fbcc 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC3_Init+0x162>
  {
    Error_Handler();
 800073e:	f000 fd66 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000742:	2308      	movs	r3, #8
 8000744:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000746:	2307      	movs	r3, #7
 8000748:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4619      	mov	r1, r3
 800074e:	483e      	ldr	r0, [pc, #248]	; (8000848 <MX_ADC3_Init+0x268>)
 8000750:	f001 fbbe 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC3_Init+0x17e>
  {
    Error_Handler();
 800075a:	f000 fd58 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800075e:	2309      	movs	r3, #9
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000762:	2308      	movs	r3, #8
 8000764:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	4619      	mov	r1, r3
 800076a:	4837      	ldr	r0, [pc, #220]	; (8000848 <MX_ADC3_Init+0x268>)
 800076c:	f001 fbb0 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC3_Init+0x19a>
  {
    Error_Handler();
 8000776:	f000 fd4a 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800077a:	230a      	movs	r3, #10
 800077c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800077e:	2309      	movs	r3, #9
 8000780:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4619      	mov	r1, r3
 8000786:	4830      	ldr	r0, [pc, #192]	; (8000848 <MX_ADC3_Init+0x268>)
 8000788:	f001 fba2 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC3_Init+0x1b6>
  {
    Error_Handler();
 8000792:	f000 fd3c 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000796:	230b      	movs	r3, #11
 8000798:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800079a:	230a      	movs	r3, #10
 800079c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4619      	mov	r1, r3
 80007a2:	4829      	ldr	r0, [pc, #164]	; (8000848 <MX_ADC3_Init+0x268>)
 80007a4:	f001 fb94 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC3_Init+0x1d2>
  {
    Error_Handler();
 80007ae:	f000 fd2e 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007b2:	230c      	movs	r3, #12
 80007b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007b6:	230b      	movs	r3, #11
 80007b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	4822      	ldr	r0, [pc, #136]	; (8000848 <MX_ADC3_Init+0x268>)
 80007c0:	f001 fb86 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC3_Init+0x1ee>
  {
    Error_Handler();
 80007ca:	f000 fd20 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80007ce:	230d      	movs	r3, #13
 80007d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80007d2:	230c      	movs	r3, #12
 80007d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	481b      	ldr	r0, [pc, #108]	; (8000848 <MX_ADC3_Init+0x268>)
 80007dc:	f001 fb78 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC3_Init+0x20a>
  {
    Error_Handler();
 80007e6:	f000 fd12 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80007ea:	230e      	movs	r3, #14
 80007ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 80007ee:	230d      	movs	r3, #13
 80007f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4619      	mov	r1, r3
 80007f6:	4814      	ldr	r0, [pc, #80]	; (8000848 <MX_ADC3_Init+0x268>)
 80007f8:	f001 fb6a 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC3_Init+0x226>
  {
    Error_Handler();
 8000802:	f000 fd04 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000806:	230f      	movs	r3, #15
 8000808:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 800080a:	230e      	movs	r3, #14
 800080c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4619      	mov	r1, r3
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_ADC3_Init+0x268>)
 8000814:	f001 fb5c 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC3_Init+0x242>
  {
    Error_Handler();
 800081e:	f000 fcf6 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000822:	2310      	movs	r3, #16
 8000824:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000826:	230f      	movs	r3, #15
 8000828:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_ADC3_Init+0x268>)
 8000830:	f001 fb4e 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC3_Init+0x25e>
  {
    Error_Handler();
 800083a:	f000 fce8 	bl	800120e <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	; 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200001c8 	.word	0x200001c8
 800084c:	50000400 	.word	0x50000400

08000850 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
 8000864:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC4_Init 1 */

  /* USER CODE END ADC4_Init 1 */
  /** Common config
  */
  hadc4.Instance = ADC4;
 8000866:	4b52      	ldr	r3, [pc, #328]	; (80009b0 <MX_ADC4_Init+0x160>)
 8000868:	4a52      	ldr	r2, [pc, #328]	; (80009b4 <MX_ADC4_Init+0x164>)
 800086a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800086c:	4b50      	ldr	r3, [pc, #320]	; (80009b0 <MX_ADC4_Init+0x160>)
 800086e:	2200      	movs	r2, #0
 8000870:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000872:	4b4f      	ldr	r3, [pc, #316]	; (80009b0 <MX_ADC4_Init+0x160>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000878:	4b4d      	ldr	r3, [pc, #308]	; (80009b0 <MX_ADC4_Init+0x160>)
 800087a:	2201      	movs	r2, #1
 800087c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800087e:	4b4c      	ldr	r3, [pc, #304]	; (80009b0 <MX_ADC4_Init+0x160>)
 8000880:	2200      	movs	r2, #0
 8000882:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = ENABLE;
 8000884:	4b4a      	ldr	r3, [pc, #296]	; (80009b0 <MX_ADC4_Init+0x160>)
 8000886:	2201      	movs	r2, #1
 8000888:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.NbrOfDiscConversion = 1;
 800088c:	4b48      	ldr	r3, [pc, #288]	; (80009b0 <MX_ADC4_Init+0x160>)
 800088e:	2201      	movs	r2, #1
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000892:	4b47      	ldr	r3, [pc, #284]	; (80009b0 <MX_ADC4_Init+0x160>)
 8000894:	2200      	movs	r2, #0
 8000896:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000898:	4b45      	ldr	r3, [pc, #276]	; (80009b0 <MX_ADC4_Init+0x160>)
 800089a:	2201      	movs	r2, #1
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089e:	4b44      	ldr	r3, [pc, #272]	; (80009b0 <MX_ADC4_Init+0x160>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 7;
 80008a4:	4b42      	ldr	r3, [pc, #264]	; (80009b0 <MX_ADC4_Init+0x160>)
 80008a6:	2207      	movs	r2, #7
 80008a8:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80008aa:	4b41      	ldr	r3, [pc, #260]	; (80009b0 <MX_ADC4_Init+0x160>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b2:	4b3f      	ldr	r3, [pc, #252]	; (80009b0 <MX_ADC4_Init+0x160>)
 80008b4:	2204      	movs	r2, #4
 80008b6:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008b8:	4b3d      	ldr	r3, [pc, #244]	; (80009b0 <MX_ADC4_Init+0x160>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008be:	4b3c      	ldr	r3, [pc, #240]	; (80009b0 <MX_ADC4_Init+0x160>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80008c4:	483a      	ldr	r0, [pc, #232]	; (80009b0 <MX_ADC4_Init+0x160>)
 80008c6:	f000 ffed 	bl	80018a4 <HAL_ADC_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_ADC4_Init+0x84>
  {
    Error_Handler();
 80008d0:	f000 fc9d 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008d4:	2301      	movs	r3, #1
 80008d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008d8:	2301      	movs	r3, #1
 80008da:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80008ec:	463b      	mov	r3, r7
 80008ee:	4619      	mov	r1, r3
 80008f0:	482f      	ldr	r0, [pc, #188]	; (80009b0 <MX_ADC4_Init+0x160>)
 80008f2:	f001 faed 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC4_Init+0xb0>
  {
    Error_Handler();
 80008fc:	f000 fc87 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000900:	2302      	movs	r3, #2
 8000902:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000904:	2302      	movs	r3, #2
 8000906:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	4828      	ldr	r0, [pc, #160]	; (80009b0 <MX_ADC4_Init+0x160>)
 800090e:	f001 fadf 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC4_Init+0xcc>
  {
    Error_Handler();
 8000918:	f000 fc79 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800091c:	2303      	movs	r3, #3
 800091e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000920:	2303      	movs	r3, #3
 8000922:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000924:	463b      	mov	r3, r7
 8000926:	4619      	mov	r1, r3
 8000928:	4821      	ldr	r0, [pc, #132]	; (80009b0 <MX_ADC4_Init+0x160>)
 800092a:	f001 fad1 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC4_Init+0xe8>
  {
    Error_Handler();
 8000934:	f000 fc6b 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000938:	2304      	movs	r3, #4
 800093a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800093c:	2304      	movs	r3, #4
 800093e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000940:	463b      	mov	r3, r7
 8000942:	4619      	mov	r1, r3
 8000944:	481a      	ldr	r0, [pc, #104]	; (80009b0 <MX_ADC4_Init+0x160>)
 8000946:	f001 fac3 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_ADC4_Init+0x104>
  {
    Error_Handler();
 8000950:	f000 fc5d 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000954:	2305      	movs	r3, #5
 8000956:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000958:	2305      	movs	r3, #5
 800095a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	4619      	mov	r1, r3
 8000960:	4813      	ldr	r0, [pc, #76]	; (80009b0 <MX_ADC4_Init+0x160>)
 8000962:	f001 fab5 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC4_Init+0x120>
  {
    Error_Handler();
 800096c:	f000 fc4f 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000970:	230c      	movs	r3, #12
 8000972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000974:	2306      	movs	r3, #6
 8000976:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000978:	463b      	mov	r3, r7
 800097a:	4619      	mov	r1, r3
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <MX_ADC4_Init+0x160>)
 800097e:	f001 faa7 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_ADC4_Init+0x13c>
  {
    Error_Handler();
 8000988:	f000 fc41 	bl	800120e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800098c:	230d      	movs	r3, #13
 800098e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000990:	2307      	movs	r3, #7
 8000992:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_ADC4_Init+0x160>)
 800099a:	f001 fa99 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_ADC4_Init+0x158>
  {
    Error_Handler();
 80009a4:	f000 fc33 	bl	800120e <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000025c 	.word	0x2000025c
 80009b4:	50000500 	.word	0x50000500

080009b8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC34_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b098      	sub	sp, #96	; 0x60
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009d8:	f040 80a0 	bne.w	8000b1c <HAL_ADC_MspInit+0x164>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80009dc:	4b96      	ldr	r3, [pc, #600]	; (8000c38 <HAL_ADC_MspInit+0x280>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	4a95      	ldr	r2, [pc, #596]	; (8000c38 <HAL_ADC_MspInit+0x280>)
 80009e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80009e6:	4b94      	ldr	r3, [pc, #592]	; (8000c38 <HAL_ADC_MspInit+0x280>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d10b      	bne.n	8000a06 <HAL_ADC_MspInit+0x4e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009ee:	4b93      	ldr	r3, [pc, #588]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	4a92      	ldr	r2, [pc, #584]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	6153      	str	r3, [r2, #20]
 80009fa:	4b90      	ldr	r3, [pc, #576]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a06:	4b8d      	ldr	r3, [pc, #564]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	4a8c      	ldr	r2, [pc, #560]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000a0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a10:	6153      	str	r3, [r2, #20]
 8000a12:	4b8a      	ldr	r3, [pc, #552]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8000a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	4b87      	ldr	r3, [pc, #540]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	4a86      	ldr	r2, [pc, #536]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000a24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a28:	6153      	str	r3, [r2, #20]
 8000a2a:	4b84      	ldr	r3, [pc, #528]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a32:	643b      	str	r3, [r7, #64]	; 0x40
 8000a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b81      	ldr	r3, [pc, #516]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	4a80      	ldr	r2, [pc, #512]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a40:	6153      	str	r3, [r2, #20]
 8000a42:	4b7e      	ldr	r3, [pc, #504]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	4b7b      	ldr	r3, [pc, #492]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	4a7a      	ldr	r2, [pc, #488]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a58:	6153      	str	r3, [r2, #20]
 8000a5a:	4b78      	ldr	r3, [pc, #480]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a62:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB11     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000a66:	2314      	movs	r3, #20
 8000a68:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a76:	4619      	mov	r1, r3
 8000a78:	4871      	ldr	r0, [pc, #452]	; (8000c40 <HAL_ADC_MspInit+0x288>)
 8000a7a:	f002 f9ef 	bl	8002e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a7e:	230f      	movs	r3, #15
 8000a80:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a82:	2303      	movs	r3, #3
 8000a84:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a8e:	4619      	mov	r1, r3
 8000a90:	486c      	ldr	r0, [pc, #432]	; (8000c44 <HAL_ADC_MspInit+0x28c>)
 8000a92:	f002 f9e3 	bl	8002e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a96:	230f      	movs	r3, #15
 8000a98:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aac:	f002 f9d6 	bl	8002e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ab0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4860      	ldr	r0, [pc, #384]	; (8000c48 <HAL_ADC_MspInit+0x290>)
 8000ac6:	f002 f9c9 	bl	8002e5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000aca:	4b60      	ldr	r3, [pc, #384]	; (8000c4c <HAL_ADC_MspInit+0x294>)
 8000acc:	4a60      	ldr	r2, [pc, #384]	; (8000c50 <HAL_ADC_MspInit+0x298>)
 8000ace:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ad0:	4b5e      	ldr	r3, [pc, #376]	; (8000c4c <HAL_ADC_MspInit+0x294>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad6:	4b5d      	ldr	r3, [pc, #372]	; (8000c4c <HAL_ADC_MspInit+0x294>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000adc:	4b5b      	ldr	r3, [pc, #364]	; (8000c4c <HAL_ADC_MspInit+0x294>)
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ae2:	4b5a      	ldr	r3, [pc, #360]	; (8000c4c <HAL_ADC_MspInit+0x294>)
 8000ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ae8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000aea:	4b58      	ldr	r3, [pc, #352]	; (8000c4c <HAL_ADC_MspInit+0x294>)
 8000aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000af2:	4b56      	ldr	r3, [pc, #344]	; (8000c4c <HAL_ADC_MspInit+0x294>)
 8000af4:	2220      	movs	r2, #32
 8000af6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000af8:	4b54      	ldr	r3, [pc, #336]	; (8000c4c <HAL_ADC_MspInit+0x294>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000afe:	4853      	ldr	r0, [pc, #332]	; (8000c4c <HAL_ADC_MspInit+0x294>)
 8000b00:	f001 fff9 	bl	8002af6 <HAL_DMA_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_ADC_MspInit+0x156>
    {
      Error_Handler();
 8000b0a:	f000 fb80 	bl	800120e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a4e      	ldr	r2, [pc, #312]	; (8000c4c <HAL_ADC_MspInit+0x294>)
 8000b12:	639a      	str	r2, [r3, #56]	; 0x38
 8000b14:	4a4d      	ldr	r2, [pc, #308]	; (8000c4c <HAL_ADC_MspInit+0x294>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000b1a:	e1be      	b.n	8000e9a <HAL_ADC_MspInit+0x4e2>
  else if(adcHandle->Instance==ADC2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a4c      	ldr	r2, [pc, #304]	; (8000c54 <HAL_ADC_MspInit+0x29c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	f040 809c 	bne.w	8000c60 <HAL_ADC_MspInit+0x2a8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b28:	4b43      	ldr	r3, [pc, #268]	; (8000c38 <HAL_ADC_MspInit+0x280>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	4a42      	ldr	r2, [pc, #264]	; (8000c38 <HAL_ADC_MspInit+0x280>)
 8000b30:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b32:	4b41      	ldr	r3, [pc, #260]	; (8000c38 <HAL_ADC_MspInit+0x280>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d10b      	bne.n	8000b52 <HAL_ADC_MspInit+0x19a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b3a:	4b40      	ldr	r3, [pc, #256]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	4a3f      	ldr	r2, [pc, #252]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6153      	str	r3, [r2, #20]
 8000b46:	4b3d      	ldr	r3, [pc, #244]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8000b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b3a      	ldr	r3, [pc, #232]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	4a39      	ldr	r2, [pc, #228]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	6153      	str	r3, [r2, #20]
 8000b5e:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
 8000b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	4b34      	ldr	r3, [pc, #208]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	4a33      	ldr	r2, [pc, #204]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000b70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b74:	6153      	str	r3, [r2, #20]
 8000b76:	4b31      	ldr	r3, [pc, #196]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	4b2e      	ldr	r3, [pc, #184]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	4a2d      	ldr	r2, [pc, #180]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b8c:	6153      	str	r3, [r2, #20]
 8000b8e:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <HAL_ADC_MspInit+0x284>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b9a:	23f0      	movs	r3, #240	; 0xf0
 8000b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000baa:	4619      	mov	r1, r3
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb0:	f002 f954 	bl	8002e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bb4:	2330      	movs	r3, #48	; 0x30
 8000bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	481f      	ldr	r0, [pc, #124]	; (8000c44 <HAL_ADC_MspInit+0x28c>)
 8000bc8:	f002 f948 	bl	8002e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bdc:	4619      	mov	r1, r3
 8000bde:	481a      	ldr	r0, [pc, #104]	; (8000c48 <HAL_ADC_MspInit+0x290>)
 8000be0:	f002 f93c 	bl	8002e5c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <HAL_ADC_MspInit+0x2a0>)
 8000be6:	4a1d      	ldr	r2, [pc, #116]	; (8000c5c <HAL_ADC_MspInit+0x2a4>)
 8000be8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bea:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <HAL_ADC_MspInit+0x2a0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <HAL_ADC_MspInit+0x2a0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_ADC_MspInit+0x2a0>)
 8000bf8:	2280      	movs	r2, #128	; 0x80
 8000bfa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <HAL_ADC_MspInit+0x2a0>)
 8000bfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c02:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <HAL_ADC_MspInit+0x2a0>)
 8000c06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c0a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_ADC_MspInit+0x2a0>)
 8000c0e:	2220      	movs	r2, #32
 8000c10:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_ADC_MspInit+0x2a0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000c18:	480f      	ldr	r0, [pc, #60]	; (8000c58 <HAL_ADC_MspInit+0x2a0>)
 8000c1a:	f001 ff6c 	bl	8002af6 <HAL_DMA_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <HAL_ADC_MspInit+0x270>
      Error_Handler();
 8000c24:	f000 faf3 	bl	800120e <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <HAL_ADC_MspInit+0x2a0>)
 8000c2c:	639a      	str	r2, [r3, #56]	; 0x38
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_ADC_MspInit+0x2a0>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000c34:	e131      	b.n	8000e9a <HAL_ADC_MspInit+0x4e2>
 8000c36:	bf00      	nop
 8000c38:	2000008c 	.word	0x2000008c
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	48001400 	.word	0x48001400
 8000c44:	48000800 	.word	0x48000800
 8000c48:	48000400 	.word	0x48000400
 8000c4c:	20000218 	.word	0x20000218
 8000c50:	40020008 	.word	0x40020008
 8000c54:	50000100 	.word	0x50000100
 8000c58:	200002ac 	.word	0x200002ac
 8000c5c:	40020408 	.word	0x40020408
  else if(adcHandle->Instance==ADC3)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a8f      	ldr	r2, [pc, #572]	; (8000ea4 <HAL_ADC_MspInit+0x4ec>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	f040 8089 	bne.w	8000d7e <HAL_ADC_MspInit+0x3c6>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8000c6c:	4b8e      	ldr	r3, [pc, #568]	; (8000ea8 <HAL_ADC_MspInit+0x4f0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	3301      	adds	r3, #1
 8000c72:	4a8d      	ldr	r2, [pc, #564]	; (8000ea8 <HAL_ADC_MspInit+0x4f0>)
 8000c74:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000c76:	4b8c      	ldr	r3, [pc, #560]	; (8000ea8 <HAL_ADC_MspInit+0x4f0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d10b      	bne.n	8000c96 <HAL_ADC_MspInit+0x2de>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000c7e:	4b8b      	ldr	r3, [pc, #556]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	4a8a      	ldr	r2, [pc, #552]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000c84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c88:	6153      	str	r3, [r2, #20]
 8000c8a:	4b88      	ldr	r3, [pc, #544]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
 8000c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	4b85      	ldr	r3, [pc, #532]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	4a84      	ldr	r2, [pc, #528]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca0:	6153      	str	r3, [r2, #20]
 8000ca2:	4b82      	ldr	r3, [pc, #520]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000caa:	623b      	str	r3, [r7, #32]
 8000cac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cae:	4b7f      	ldr	r3, [pc, #508]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	4a7e      	ldr	r2, [pc, #504]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000cb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cb8:	6153      	str	r3, [r2, #20]
 8000cba:	4b7c      	ldr	r3, [pc, #496]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc2:	61fb      	str	r3, [r7, #28]
 8000cc4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	4b79      	ldr	r3, [pc, #484]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	4a78      	ldr	r2, [pc, #480]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000ccc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cd0:	6153      	str	r3, [r2, #20]
 8000cd2:	4b76      	ldr	r3, [pc, #472]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cda:	61bb      	str	r3, [r7, #24]
 8000cdc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8000cde:	f242 0303 	movw	r3, #8195	; 0x2003
 8000ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	486f      	ldr	r0, [pc, #444]	; (8000eb0 <HAL_ADC_MspInit+0x4f8>)
 8000cf4:	f002 f8b2 	bl	8002e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000cf8:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8000cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4869      	ldr	r0, [pc, #420]	; (8000eb4 <HAL_ADC_MspInit+0x4fc>)
 8000d0e:	f002 f8a5 	bl	8002e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000d12:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8000d16:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d24:	4619      	mov	r1, r3
 8000d26:	4864      	ldr	r0, [pc, #400]	; (8000eb8 <HAL_ADC_MspInit+0x500>)
 8000d28:	f002 f898 	bl	8002e5c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8000d2c:	4b63      	ldr	r3, [pc, #396]	; (8000ebc <HAL_ADC_MspInit+0x504>)
 8000d2e:	4a64      	ldr	r2, [pc, #400]	; (8000ec0 <HAL_ADC_MspInit+0x508>)
 8000d30:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d32:	4b62      	ldr	r3, [pc, #392]	; (8000ebc <HAL_ADC_MspInit+0x504>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d38:	4b60      	ldr	r3, [pc, #384]	; (8000ebc <HAL_ADC_MspInit+0x504>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000d3e:	4b5f      	ldr	r3, [pc, #380]	; (8000ebc <HAL_ADC_MspInit+0x504>)
 8000d40:	2280      	movs	r2, #128	; 0x80
 8000d42:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d44:	4b5d      	ldr	r3, [pc, #372]	; (8000ebc <HAL_ADC_MspInit+0x504>)
 8000d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d4a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d4c:	4b5b      	ldr	r3, [pc, #364]	; (8000ebc <HAL_ADC_MspInit+0x504>)
 8000d4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d52:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000d54:	4b59      	ldr	r3, [pc, #356]	; (8000ebc <HAL_ADC_MspInit+0x504>)
 8000d56:	2220      	movs	r2, #32
 8000d58:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000d5a:	4b58      	ldr	r3, [pc, #352]	; (8000ebc <HAL_ADC_MspInit+0x504>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000d60:	4856      	ldr	r0, [pc, #344]	; (8000ebc <HAL_ADC_MspInit+0x504>)
 8000d62:	f001 fec8 	bl	8002af6 <HAL_DMA_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_ADC_MspInit+0x3b8>
      Error_Handler();
 8000d6c:	f000 fa4f 	bl	800120e <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a52      	ldr	r2, [pc, #328]	; (8000ebc <HAL_ADC_MspInit+0x504>)
 8000d74:	639a      	str	r2, [r3, #56]	; 0x38
 8000d76:	4a51      	ldr	r2, [pc, #324]	; (8000ebc <HAL_ADC_MspInit+0x504>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000d7c:	e08d      	b.n	8000e9a <HAL_ADC_MspInit+0x4e2>
  else if(adcHandle->Instance==ADC4)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a50      	ldr	r2, [pc, #320]	; (8000ec4 <HAL_ADC_MspInit+0x50c>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	f040 8088 	bne.w	8000e9a <HAL_ADC_MspInit+0x4e2>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8000d8a:	4b47      	ldr	r3, [pc, #284]	; (8000ea8 <HAL_ADC_MspInit+0x4f0>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	4a45      	ldr	r2, [pc, #276]	; (8000ea8 <HAL_ADC_MspInit+0x4f0>)
 8000d92:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000d94:	4b44      	ldr	r3, [pc, #272]	; (8000ea8 <HAL_ADC_MspInit+0x4f0>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d10b      	bne.n	8000db4 <HAL_ADC_MspInit+0x3fc>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000d9c:	4b43      	ldr	r3, [pc, #268]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	4a42      	ldr	r2, [pc, #264]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000da2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000da6:	6153      	str	r3, [r2, #20]
 8000da8:	4b40      	ldr	r3, [pc, #256]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db4:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	4a3c      	ldr	r2, [pc, #240]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000dba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dbe:	6153      	str	r3, [r2, #20]
 8000dc0:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dcc:	4b37      	ldr	r3, [pc, #220]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	4a36      	ldr	r2, [pc, #216]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000dd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dd6:	6153      	str	r3, [r2, #20]
 8000dd8:	4b34      	ldr	r3, [pc, #208]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de4:	4b31      	ldr	r3, [pc, #196]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	4a30      	ldr	r2, [pc, #192]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000dea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000dee:	6153      	str	r3, [r2, #20]
 8000df0:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <HAL_ADC_MspInit+0x4f4>)
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000dfc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e00:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e02:	2303      	movs	r3, #3
 8000e04:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4828      	ldr	r0, [pc, #160]	; (8000eb4 <HAL_ADC_MspInit+0x4fc>)
 8000e12:	f002 f823 	bl	8002e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8000e16:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4821      	ldr	r0, [pc, #132]	; (8000eb0 <HAL_ADC_MspInit+0x4f8>)
 8000e2c:	f002 f816 	bl	8002e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e34:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e36:	2303      	movs	r3, #3
 8000e38:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e42:	4619      	mov	r1, r3
 8000e44:	481c      	ldr	r0, [pc, #112]	; (8000eb8 <HAL_ADC_MspInit+0x500>)
 8000e46:	f002 f809 	bl	8002e5c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8000e4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <HAL_ADC_MspInit+0x510>)
 8000e4c:	4a1f      	ldr	r2, [pc, #124]	; (8000ecc <HAL_ADC_MspInit+0x514>)
 8000e4e:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e50:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <HAL_ADC_MspInit+0x510>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <HAL_ADC_MspInit+0x510>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <HAL_ADC_MspInit+0x510>)
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_ADC_MspInit+0x510>)
 8000e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e68:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_ADC_MspInit+0x510>)
 8000e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e70:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <HAL_ADC_MspInit+0x510>)
 8000e74:	2220      	movs	r2, #32
 8000e76:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <HAL_ADC_MspInit+0x510>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000e7e:	4812      	ldr	r0, [pc, #72]	; (8000ec8 <HAL_ADC_MspInit+0x510>)
 8000e80:	f001 fe39 	bl	8002af6 <HAL_DMA_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_ADC_MspInit+0x4d6>
      Error_Handler();
 8000e8a:	f000 f9c0 	bl	800120e <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <HAL_ADC_MspInit+0x510>)
 8000e92:	639a      	str	r2, [r3, #56]	; 0x38
 8000e94:	4a0c      	ldr	r2, [pc, #48]	; (8000ec8 <HAL_ADC_MspInit+0x510>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000e9a:	bf00      	nop
 8000e9c:	3760      	adds	r7, #96	; 0x60
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	50000400 	.word	0x50000400
 8000ea8:	20000090 	.word	0x20000090
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	48000400 	.word	0x48000400
 8000eb4:	48001000 	.word	0x48001000
 8000eb8:	48000c00 	.word	0x48000c00
 8000ebc:	20000134 	.word	0x20000134
 8000ec0:	40020458 	.word	0x40020458
 8000ec4:	50000500 	.word	0x50000500
 8000ec8:	200000a0 	.word	0x200000a0
 8000ecc:	4002041c 	.word	0x4002041c

08000ed0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed6:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <MX_DMA_Init+0x90>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	4a21      	ldr	r2, [pc, #132]	; (8000f60 <MX_DMA_Init+0x90>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6153      	str	r3, [r2, #20]
 8000ee2:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <MX_DMA_Init+0x90>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eee:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <MX_DMA_Init+0x90>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <MX_DMA_Init+0x90>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	6153      	str	r3, [r2, #20]
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <MX_DMA_Init+0x90>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	200b      	movs	r0, #11
 8000f0c:	f001 fdbd 	bl	8002a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f10:	200b      	movs	r0, #11
 8000f12:	f001 fdd6 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	200d      	movs	r0, #13
 8000f1c:	f001 fdb5 	bl	8002a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f20:	200d      	movs	r0, #13
 8000f22:	f001 fdce 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2038      	movs	r0, #56	; 0x38
 8000f2c:	f001 fdad 	bl	8002a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000f30:	2038      	movs	r0, #56	; 0x38
 8000f32:	f001 fdc6 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2039      	movs	r0, #57	; 0x39
 8000f3c:	f001 fda5 	bl	8002a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000f40:	2039      	movs	r0, #57	; 0x39
 8000f42:	f001 fdbe 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	203c      	movs	r0, #60	; 0x3c
 8000f4c:	f001 fd9d 	bl	8002a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000f50:	203c      	movs	r0, #60	; 0x3c
 8000f52:	f001 fdb6 	bl	8002ac2 <HAL_NVIC_EnableIRQ>

}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000

08000f64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	4a26      	ldr	r2, [pc, #152]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000f70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f74:	6153      	str	r3, [r2, #20]
 8000f76:	4b24      	ldr	r3, [pc, #144]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	4a20      	ldr	r2, [pc, #128]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000f88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f8c:	6153      	str	r3, [r2, #20]
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	6153      	str	r3, [r2, #20]
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	4a14      	ldr	r2, [pc, #80]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fbc:	6153      	str	r3, [r2, #20]
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000fd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fd4:	6153      	str	r3, [r2, #20]
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	4a08      	ldr	r2, [pc, #32]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000fe8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fec:	6153      	str	r3, [r2, #20]
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]

}
 8000ffa:	bf00      	nop
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000

0800100c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2 , (uint8_t *)&ch, 1, 0xFFFF);
 8001014:	1d39      	adds	r1, r7, #4
 8001016:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800101a:	2201      	movs	r2, #1
 800101c:	4803      	ldr	r0, [pc, #12]	; (800102c <__io_putchar+0x20>)
 800101e:	f003 fd0a 	bl	8004a36 <HAL_UART_Transmit>
	return ch;
 8001022:	687b      	ldr	r3, [r7, #4]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000a84 	.word	0x20000a84

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001034:	f000 fb8e 	bl	8001754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001038:	f000 f886 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103c:	f7ff ff92 	bl	8000f64 <MX_GPIO_Init>
  MX_DMA_Init();
 8001040:	f7ff ff46 	bl	8000ed0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001044:	f000 f8e8 	bl	8001218 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001048:	f7ff f91a 	bl	8000280 <MX_ADC1_Init>
  MX_ADC2_Init();
 800104c:	f7ff fa14 	bl	8000478 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001050:	f7ff fac6 	bl	80005e0 <MX_ADC3_Init>
  MX_ADC4_Init();
 8001054:	f7ff fbfc 	bl	8000850 <MX_ADC4_Init>
  MX_USART2_UART_Init();
 8001058:	f000 fac0 	bl	80015dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


	
	printf(" \n" );
 800105c:	482a      	ldr	r0, [pc, #168]	; (8001108 <main+0xd8>)
 800105e:	f004 f975 	bl	800534c <puts>
	printf("F303 initialized ok\n" );
 8001062:	482a      	ldr	r0, [pc, #168]	; (800110c <main+0xdc>)
 8001064:	f004 f972 	bl	800534c <puts>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&uhADCxConvertedValue, 100);
 8001068:	2264      	movs	r2, #100	; 0x64
 800106a:	4929      	ldr	r1, [pc, #164]	; (8001110 <main+0xe0>)
 800106c:	4829      	ldr	r0, [pc, #164]	; (8001114 <main+0xe4>)
 800106e:	f000 fe13 	bl	8001c98 <HAL_ADC_Start_DMA>
		// 	ad7 += ADC_Value[i++];
		// 	ad8 += ADC_Value[i++];
		// 	ad9 += ADC_Value[i++];
		// 	ad10 += ADC_Value[i++];
		// 	ad11 += ADC_Value[i++];
		printf(" info:ADC1_chanel0_value=%ld \r\n", uhADCxConvertedValue[0] );
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <main+0xe0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4619      	mov	r1, r3
 8001078:	4827      	ldr	r0, [pc, #156]	; (8001118 <main+0xe8>)
 800107a:	f004 f8e1 	bl	8005240 <iprintf>
		printf(" info:ADC1_chanel1_value=%ld \r\n", uhADCxConvertedValue[1] );
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <main+0xe0>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	4619      	mov	r1, r3
 8001084:	4825      	ldr	r0, [pc, #148]	; (800111c <main+0xec>)
 8001086:	f004 f8db 	bl	8005240 <iprintf>
		printf(" info:ADC1_chanel2_value=%ld \r\n", uhADCxConvertedValue[2] );
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <main+0xe0>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	4619      	mov	r1, r3
 8001090:	4823      	ldr	r0, [pc, #140]	; (8001120 <main+0xf0>)
 8001092:	f004 f8d5 	bl	8005240 <iprintf>
		printf(" info:ADC1_chanel3_value=%ld \r\n", uhADCxConvertedValue[3] );
 8001096:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <main+0xe0>)
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	4619      	mov	r1, r3
 800109c:	4821      	ldr	r0, [pc, #132]	; (8001124 <main+0xf4>)
 800109e:	f004 f8cf 	bl	8005240 <iprintf>
		printf(" info:ADC1_chanel4_value=%ld \r\n", uhADCxConvertedValue[4] );
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <main+0xe0>)
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	4619      	mov	r1, r3
 80010a8:	481f      	ldr	r0, [pc, #124]	; (8001128 <main+0xf8>)
 80010aa:	f004 f8c9 	bl	8005240 <iprintf>
		printf(" info:ADC1_chanel5_value=%ld \r\n", uhADCxConvertedValue[5] );
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <main+0xe0>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4619      	mov	r1, r3
 80010b4:	481d      	ldr	r0, [pc, #116]	; (800112c <main+0xfc>)
 80010b6:	f004 f8c3 	bl	8005240 <iprintf>
		printf(" info:ADC1_chanel6_value=%ld \r\n", uhADCxConvertedValue[6] );
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <main+0xe0>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	4619      	mov	r1, r3
 80010c0:	481b      	ldr	r0, [pc, #108]	; (8001130 <main+0x100>)
 80010c2:	f004 f8bd 	bl	8005240 <iprintf>
		printf(" info:ADC1_chanel7_value=%ld \r\n", uhADCxConvertedValue[7] );
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <main+0xe0>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4619      	mov	r1, r3
 80010cc:	4819      	ldr	r0, [pc, #100]	; (8001134 <main+0x104>)
 80010ce:	f004 f8b7 	bl	8005240 <iprintf>
		printf(" info:ADC1_chanel8_value=%ld \r\n", uhADCxConvertedValue[8] );
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <main+0xe0>)
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	4619      	mov	r1, r3
 80010d8:	4817      	ldr	r0, [pc, #92]	; (8001138 <main+0x108>)
 80010da:	f004 f8b1 	bl	8005240 <iprintf>
		printf(" info:ADC1_chanel9_value=%ld \r\n", uhADCxConvertedValue[9] );
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <main+0xe0>)
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	4619      	mov	r1, r3
 80010e4:	4815      	ldr	r0, [pc, #84]	; (800113c <main+0x10c>)
 80010e6:	f004 f8ab 	bl	8005240 <iprintf>
		printf(" info:ADC1_chanel10_value=%ld \r\n", uhADCxConvertedValue[10] );
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <main+0xe0>)
 80010ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ee:	4619      	mov	r1, r3
 80010f0:	4813      	ldr	r0, [pc, #76]	; (8001140 <main+0x110>)
 80010f2:	f004 f8a5 	bl	8005240 <iprintf>
		printf("  \n" );
 80010f6:	4813      	ldr	r0, [pc, #76]	; (8001144 <main+0x114>)
 80010f8:	f004 f928 	bl	800534c <puts>
		HAL_Delay(1000);
 80010fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001100:	f000 fb8e 	bl	8001820 <HAL_Delay>
		printf(" info:ADC1_chanel0_value=%ld \r\n", uhADCxConvertedValue[0] );
 8001104:	e7b5      	b.n	8001072 <main+0x42>
 8001106:	bf00      	nop
 8001108:	080061f0 	.word	0x080061f0
 800110c:	080061f4 	.word	0x080061f4
 8001110:	20000894 	.word	0x20000894
 8001114:	20000178 	.word	0x20000178
 8001118:	08006208 	.word	0x08006208
 800111c:	08006228 	.word	0x08006228
 8001120:	08006248 	.word	0x08006248
 8001124:	08006268 	.word	0x08006268
 8001128:	08006288 	.word	0x08006288
 800112c:	080062a8 	.word	0x080062a8
 8001130:	080062c8 	.word	0x080062c8
 8001134:	080062e8 	.word	0x080062e8
 8001138:	08006308 	.word	0x08006308
 800113c:	08006328 	.word	0x08006328
 8001140:	08006348 	.word	0x08006348
 8001144:	0800636c 	.word	0x0800636c

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b0a6      	sub	sp, #152	; 0x98
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001152:	2228      	movs	r2, #40	; 0x28
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f004 f86a 	bl	8005230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2258      	movs	r2, #88	; 0x58
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f004 f85c 	bl	8005230 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001178:	2302      	movs	r3, #2
 800117a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117c:	2301      	movs	r3, #1
 800117e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001180:	2310      	movs	r3, #16
 8001182:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001186:	2302      	movs	r3, #2
 8001188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800118c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001190:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 ffe3 	bl	8003170 <HAL_RCC_OscConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80011b0:	f000 f82d 	bl	800120e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b4:	230f      	movs	r3, #15
 80011b6:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011b8:	2300      	movs	r3, #0
 80011ba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f002 fee4 	bl	8003f9c <HAL_RCC_ClockConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011da:	f000 f818 	bl	800120e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 80011de:	f44f 73c1 	mov.w	r3, #386	; 0x182
 80011e2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80011e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80011ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 f906 	bl	8004408 <HAL_RCCEx_PeriphCLKConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001202:	f000 f804 	bl	800120e <Error_Handler>
  }
}
 8001206:	bf00      	nop
 8001208:	3798      	adds	r7, #152	; 0x98
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001212:	b672      	cpsid	i
}
 8001214:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001216:	e7fe      	b.n	8001216 <Error_Handler+0x8>

08001218 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <MX_SPI1_Init+0x74>)
 800121e:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <MX_SPI1_Init+0x78>)
 8001220:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <MX_SPI1_Init+0x74>)
 8001224:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001228:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <MX_SPI1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <MX_SPI1_Init+0x74>)
 8001232:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001236:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_SPI1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <MX_SPI1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_SPI1_Init+0x74>)
 8001246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800124a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_SPI1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_SPI1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_SPI1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <MX_SPI1_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_SPI1_Init+0x74>)
 8001266:	2207      	movs	r2, #7
 8001268:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <MX_SPI1_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_SPI1_Init+0x74>)
 8001272:	2208      	movs	r2, #8
 8001274:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_SPI1_Init+0x74>)
 8001278:	f003 fae4 	bl	8004844 <HAL_SPI_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001282:	f7ff ffc4 	bl	800120e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200009dc 	.word	0x200009dc
 8001290:	40013000 	.word	0x40013000

08001294 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a2a      	ldr	r2, [pc, #168]	; (800135c <HAL_SPI_MspInit+0xc8>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d14d      	bne.n	8001352 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <HAL_SPI_MspInit+0xcc>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	4a29      	ldr	r2, [pc, #164]	; (8001360 <HAL_SPI_MspInit+0xcc>)
 80012bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012c0:	6193      	str	r3, [r2, #24]
 80012c2:	4b27      	ldr	r3, [pc, #156]	; (8001360 <HAL_SPI_MspInit+0xcc>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	4b24      	ldr	r3, [pc, #144]	; (8001360 <HAL_SPI_MspInit+0xcc>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	4a23      	ldr	r2, [pc, #140]	; (8001360 <HAL_SPI_MspInit+0xcc>)
 80012d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d8:	6153      	str	r3, [r2, #20]
 80012da:	4b21      	ldr	r3, [pc, #132]	; (8001360 <HAL_SPI_MspInit+0xcc>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80012e6:	2338      	movs	r3, #56	; 0x38
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012f6:	2305      	movs	r3, #5
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	4818      	ldr	r0, [pc, #96]	; (8001364 <HAL_SPI_MspInit+0xd0>)
 8001302:	f001 fdab 	bl	8002e5c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_SPI_MspInit+0xd4>)
 8001308:	4a18      	ldr	r2, [pc, #96]	; (800136c <HAL_SPI_MspInit+0xd8>)
 800130a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_SPI_MspInit+0xd4>)
 800130e:	2210      	movs	r2, #16
 8001310:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_SPI_MspInit+0xd4>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_SPI_MspInit+0xd4>)
 800131a:	2280      	movs	r2, #128	; 0x80
 800131c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_SPI_MspInit+0xd4>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_SPI_MspInit+0xd4>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_SPI_MspInit+0xd4>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <HAL_SPI_MspInit+0xd4>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001336:	480c      	ldr	r0, [pc, #48]	; (8001368 <HAL_SPI_MspInit+0xd4>)
 8001338:	f001 fbdd 	bl	8002af6 <HAL_DMA_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_SPI_MspInit+0xb2>
    {
      Error_Handler();
 8001342:	f7ff ff64 	bl	800120e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a07      	ldr	r2, [pc, #28]	; (8001368 <HAL_SPI_MspInit+0xd4>)
 800134a:	655a      	str	r2, [r3, #84]	; 0x54
 800134c:	4a06      	ldr	r2, [pc, #24]	; (8001368 <HAL_SPI_MspInit+0xd4>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001352:	bf00      	nop
 8001354:	3728      	adds	r7, #40	; 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40013000 	.word	0x40013000
 8001360:	40021000 	.word	0x40021000
 8001364:	48000400 	.word	0x48000400
 8001368:	20000a40 	.word	0x20000a40
 800136c:	40020030 	.word	0x40020030

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <HAL_MspInit+0x44>)
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <HAL_MspInit+0x44>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6193      	str	r3, [r2, #24]
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_MspInit+0x44>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_MspInit+0x44>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <HAL_MspInit+0x44>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	61d3      	str	r3, [r2, #28]
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_MspInit+0x44>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <NMI_Handler+0x4>

080013be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <MemManage_Handler+0x4>

080013ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001404:	f000 f9ec 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <DMA1_Channel1_IRQHandler+0x10>)
 8001412:	f001 fc16 	bl	8002c42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000218 	.word	0x20000218

08001420 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <DMA1_Channel3_IRQHandler+0x10>)
 8001426:	f001 fc0c 	bl	8002c42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000a40 	.word	0x20000a40

08001434 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <DMA2_Channel1_IRQHandler+0x10>)
 800143a:	f001 fc02 	bl	8002c42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200002ac 	.word	0x200002ac

08001448 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <DMA2_Channel2_IRQHandler+0x10>)
 800144e:	f001 fbf8 	bl	8002c42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200000a0 	.word	0x200000a0

0800145c <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <DMA2_Channel5_IRQHandler+0x10>)
 8001462:	f001 fbee 	bl	8002c42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000134 	.word	0x20000134

08001470 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	e00a      	b.n	8001498 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001482:	f3af 8000 	nop.w
 8001486:	4601      	mov	r1, r0
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	b2ca      	uxtb	r2, r1
 8001490:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	dbf0      	blt.n	8001482 <_read+0x12>
	}

return len;
 80014a0:	687b      	ldr	r3, [r7, #4]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	e009      	b.n	80014d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	60ba      	str	r2, [r7, #8]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fda1 	bl	800100c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf1      	blt.n	80014bc <_write+0x12>
	}
	return len;
 80014d8:	687b      	ldr	r3, [r7, #4]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_close>:

int _close(int file)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	return -1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800150a:	605a      	str	r2, [r3, #4]
	return 0;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <_isatty>:

int _isatty(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
	return 1;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
	return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001554:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <_sbrk+0x5c>)
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <_sbrk+0x60>)
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <_sbrk+0x64>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <_sbrk+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	429a      	cmp	r2, r3
 800157a:	d207      	bcs.n	800158c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800157c:	f003 fe2e 	bl	80051dc <__errno>
 8001580:	4603      	mov	r3, r0
 8001582:	220c      	movs	r2, #12
 8001584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800158a:	e009      	b.n	80015a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <_sbrk+0x64>)
 800159c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20010000 	.word	0x20010000
 80015ac:	00000400 	.word	0x00000400
 80015b0:	20000094 	.word	0x20000094
 80015b4:	20000b20 	.word	0x20000b20

080015b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <SystemInit+0x20>)
 80015be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <SystemInit+0x20>)
 80015c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_USART2_UART_Init+0x58>)
 80015e2:	4a15      	ldr	r2, [pc, #84]	; (8001638 <MX_USART2_UART_Init+0x5c>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <MX_USART2_UART_Init+0x58>)
 80015e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_USART2_UART_Init+0x58>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MX_USART2_UART_Init+0x58>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MX_USART2_UART_Init+0x58>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_USART2_UART_Init+0x58>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <MX_USART2_UART_Init+0x58>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_USART2_UART_Init+0x58>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <MX_USART2_UART_Init+0x58>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_USART2_UART_Init+0x58>)
 800161a:	2200      	movs	r2, #0
 800161c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800161e:	4805      	ldr	r0, [pc, #20]	; (8001634 <MX_USART2_UART_Init+0x58>)
 8001620:	f003 f9bb 	bl	800499a <HAL_UART_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800162a:	f7ff fdf0 	bl	800120e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000a84 	.word	0x20000a84
 8001638:	40004400 	.word	0x40004400

0800163c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a26      	ldr	r2, [pc, #152]	; (80016f4 <HAL_UART_MspInit+0xb8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d145      	bne.n	80016ea <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800165e:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <HAL_UART_MspInit+0xbc>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	4a25      	ldr	r2, [pc, #148]	; (80016f8 <HAL_UART_MspInit+0xbc>)
 8001664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001668:	61d3      	str	r3, [r2, #28]
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <HAL_UART_MspInit+0xbc>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <HAL_UART_MspInit+0xbc>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	4a1f      	ldr	r2, [pc, #124]	; (80016f8 <HAL_UART_MspInit+0xbc>)
 800167c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001680:	6153      	str	r3, [r2, #20]
 8001682:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <HAL_UART_MspInit+0xbc>)
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <HAL_UART_MspInit+0xbc>)
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	4a19      	ldr	r2, [pc, #100]	; (80016f8 <HAL_UART_MspInit+0xbc>)
 8001694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001698:	6153      	str	r3, [r2, #20]
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <HAL_UART_MspInit+0xbc>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b4:	2303      	movs	r3, #3
 80016b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b8:	2307      	movs	r3, #7
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c6:	f001 fbc9 	bl	8002e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016ca:	2320      	movs	r3, #32
 80016cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016da:	2307      	movs	r3, #7
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <HAL_UART_MspInit+0xc0>)
 80016e6:	f001 fbb9 	bl	8002e5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	; 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40004400 	.word	0x40004400
 80016f8:	40021000 	.word	0x40021000
 80016fc:	48000c00 	.word	0x48000c00

08001700 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001738 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001704:	480d      	ldr	r0, [pc, #52]	; (800173c <LoopForever+0x6>)
  ldr r1, =_edata
 8001706:	490e      	ldr	r1, [pc, #56]	; (8001740 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001708:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <LoopForever+0xe>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <LoopForever+0x12>)
  ldr r4, =_ebss
 800171c:	4c0b      	ldr	r4, [pc, #44]	; (800174c <LoopForever+0x16>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800172a:	f7ff ff45 	bl	80015b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172e:	f003 fd5b 	bl	80051e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001732:	f7ff fc7d 	bl	8001030 <main>

08001736 <LoopForever>:

LoopForever:
    b LoopForever
 8001736:	e7fe      	b.n	8001736 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001738:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800173c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001740:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001744:	08006448 	.word	0x08006448
  ldr r2, =_sbss
 8001748:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800174c:	20000b1c 	.word	0x20000b1c

08001750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001750:	e7fe      	b.n	8001750 <ADC1_2_IRQHandler>
	...

08001754 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_Init+0x28>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a07      	ldr	r2, [pc, #28]	; (800177c <HAL_Init+0x28>)
 800175e:	f043 0310 	orr.w	r3, r3, #16
 8001762:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001764:	2003      	movs	r0, #3
 8001766:	f001 f985 	bl	8002a74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176a:	2000      	movs	r0, #0
 800176c:	f000 f808 	bl	8001780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001770:	f7ff fdfe 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40022000 	.word	0x40022000

08001780 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_InitTick+0x54>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_InitTick+0x58>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f001 f99d 	bl	8002ade <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00e      	b.n	80017cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d80a      	bhi.n	80017ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017bc:	f001 f965 	bl	8002a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c0:	4a06      	ldr	r2, [pc, #24]	; (80017dc <HAL_InitTick+0x5c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000000 	.word	0x20000000
 80017d8:	20000008 	.word	0x20000008
 80017dc:	20000004 	.word	0x20000004

080017e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x20>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x24>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_IncTick+0x24>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000008 	.word	0x20000008
 8001804:	20000b08 	.word	0x20000b08

08001808 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;  
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_GetTick+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000b08 	.word	0x20000b08

08001820 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001828:	f7ff ffee 	bl	8001808 <HAL_GetTick>
 800182c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001838:	d005      	beq.n	8001846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_Delay+0x44>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001846:	bf00      	nop
 8001848:	f7ff ffde 	bl	8001808 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	429a      	cmp	r2, r3
 8001856:	d8f7      	bhi.n	8001848 <HAL_Delay+0x28>
  {
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000008 	.word	0x20000008

08001868 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b09a      	sub	sp, #104	; 0x68
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e1e3      	b.n	8001c8c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f003 0310 	and.w	r3, r3, #16
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d176      	bne.n	80019c4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d152      	bne.n	8001984 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff f85d 	bl	80009b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d13b      	bne.n	8001984 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 ff81 	bl	8002814 <ADC_Disable>
 8001912:	4603      	mov	r3, r0
 8001914:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	2b00      	cmp	r3, #0
 8001922:	d12f      	bne.n	8001984 <HAL_ADC_Init+0xe0>
 8001924:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001928:	2b00      	cmp	r3, #0
 800192a:	d12b      	bne.n	8001984 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001934:	f023 0302 	bic.w	r3, r3, #2
 8001938:	f043 0202 	orr.w	r2, r3, #2
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800194e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800195e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001960:	4b92      	ldr	r3, [pc, #584]	; (8001bac <HAL_ADC_Init+0x308>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a92      	ldr	r2, [pc, #584]	; (8001bb0 <HAL_ADC_Init+0x30c>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0c9a      	lsrs	r2, r3, #18
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001976:	e002      	b.n	800197e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	3b01      	subs	r3, #1
 800197c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f9      	bne.n	8001978 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d007      	beq.n	80019a2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800199c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019a0:	d110      	bne.n	80019c4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f023 0312 	bic.w	r3, r3, #18
 80019aa:	f043 0210 	orr.w	r2, r3, #16
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f043 0201 	orr.w	r2, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f040 8150 	bne.w	8001c72 <HAL_ADC_Init+0x3ce>
 80019d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 814b 	bne.w	8001c72 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f040 8143 	bne.w	8001c72 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019f4:	f043 0202 	orr.w	r2, r3, #2
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a04:	d004      	beq.n	8001a10 <HAL_ADC_Init+0x16c>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a6a      	ldr	r2, [pc, #424]	; (8001bb4 <HAL_ADC_Init+0x310>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d101      	bne.n	8001a14 <HAL_ADC_Init+0x170>
 8001a10:	4b69      	ldr	r3, [pc, #420]	; (8001bb8 <HAL_ADC_Init+0x314>)
 8001a12:	e000      	b.n	8001a16 <HAL_ADC_Init+0x172>
 8001a14:	4b69      	ldr	r3, [pc, #420]	; (8001bbc <HAL_ADC_Init+0x318>)
 8001a16:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a20:	d102      	bne.n	8001a28 <HAL_ADC_Init+0x184>
 8001a22:	4b64      	ldr	r3, [pc, #400]	; (8001bb4 <HAL_ADC_Init+0x310>)
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	e01a      	b.n	8001a5e <HAL_ADC_Init+0x1ba>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a61      	ldr	r2, [pc, #388]	; (8001bb4 <HAL_ADC_Init+0x310>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d103      	bne.n	8001a3a <HAL_ADC_Init+0x196>
 8001a32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	e011      	b.n	8001a5e <HAL_ADC_Init+0x1ba>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a60      	ldr	r2, [pc, #384]	; (8001bc0 <HAL_ADC_Init+0x31c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d102      	bne.n	8001a4a <HAL_ADC_Init+0x1a6>
 8001a44:	4b5f      	ldr	r3, [pc, #380]	; (8001bc4 <HAL_ADC_Init+0x320>)
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	e009      	b.n	8001a5e <HAL_ADC_Init+0x1ba>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a5d      	ldr	r2, [pc, #372]	; (8001bc4 <HAL_ADC_Init+0x320>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d102      	bne.n	8001a5a <HAL_ADC_Init+0x1b6>
 8001a54:	4b5a      	ldr	r3, [pc, #360]	; (8001bc0 <HAL_ADC_Init+0x31c>)
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	e001      	b.n	8001a5e <HAL_ADC_Init+0x1ba>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d108      	bne.n	8001a7e <HAL_ADC_Init+0x1da>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_Init+0x1da>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_ADC_Init+0x1dc>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d11c      	bne.n	8001abe <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a84:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d010      	beq.n	8001aac <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d107      	bne.n	8001aa6 <HAL_ADC_Init+0x202>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_Init+0x202>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <HAL_ADC_Init+0x204>
 8001aa6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d108      	bne.n	8001abe <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001abc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7e5b      	ldrb	r3, [r3, #25]
 8001ac2:	035b      	lsls	r3, r3, #13
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ac8:	2a01      	cmp	r2, #1
 8001aca:	d002      	beq.n	8001ad2 <HAL_ADC_Init+0x22e>
 8001acc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ad0:	e000      	b.n	8001ad4 <HAL_ADC_Init+0x230>
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d11b      	bne.n	8001b2a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	7e5b      	ldrb	r3, [r3, #25]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	3b01      	subs	r3, #1
 8001b00:	045a      	lsls	r2, r3, #17
 8001b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b04:	4313      	orrs	r3, r2
 8001b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0a:	663b      	str	r3, [r7, #96]	; 0x60
 8001b0c:	e00d      	b.n	8001b2a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001b16:	f043 0220 	orr.w	r2, r3, #32
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f043 0201 	orr.w	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d054      	beq.n	8001bdc <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a22      	ldr	r2, [pc, #136]	; (8001bc0 <HAL_ADC_Init+0x31c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d004      	beq.n	8001b46 <HAL_ADC_Init+0x2a2>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a20      	ldr	r2, [pc, #128]	; (8001bc4 <HAL_ADC_Init+0x320>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d140      	bne.n	8001bc8 <HAL_ADC_Init+0x324>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001b4e:	d02a      	beq.n	8001ba6 <HAL_ADC_Init+0x302>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b58:	d022      	beq.n	8001ba0 <HAL_ADC_Init+0x2fc>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001b62:	d01a      	beq.n	8001b9a <HAL_ADC_Init+0x2f6>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b68:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001b6c:	d012      	beq.n	8001b94 <HAL_ADC_Init+0x2f0>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001b76:	d00a      	beq.n	8001b8e <HAL_ADC_Init+0x2ea>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001b80:	d002      	beq.n	8001b88 <HAL_ADC_Init+0x2e4>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	e023      	b.n	8001bd0 <HAL_ADC_Init+0x32c>
 8001b88:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b8c:	e020      	b.n	8001bd0 <HAL_ADC_Init+0x32c>
 8001b8e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001b92:	e01d      	b.n	8001bd0 <HAL_ADC_Init+0x32c>
 8001b94:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001b98:	e01a      	b.n	8001bd0 <HAL_ADC_Init+0x32c>
 8001b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b9e:	e017      	b.n	8001bd0 <HAL_ADC_Init+0x32c>
 8001ba0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001ba4:	e014      	b.n	8001bd0 <HAL_ADC_Init+0x32c>
 8001ba6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001baa:	e011      	b.n	8001bd0 <HAL_ADC_Init+0x32c>
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	431bde83 	.word	0x431bde83
 8001bb4:	50000100 	.word	0x50000100
 8001bb8:	50000300 	.word	0x50000300
 8001bbc:	50000700 	.word	0x50000700
 8001bc0:	50000400 	.word	0x50000400
 8001bc4:	50000500 	.word	0x50000500
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d114      	bne.n	8001c14 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bf8:	f023 0302 	bic.w	r3, r3, #2
 8001bfc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7e1b      	ldrb	r3, [r3, #24]
 8001c02:	039a      	lsls	r2, r3, #14
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c10:	4313      	orrs	r3, r2
 8001c12:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <HAL_ADC_Init+0x3f0>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001c24:	430b      	orrs	r3, r1
 8001c26:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d10c      	bne.n	8001c4a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f023 010f 	bic.w	r1, r3, #15
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	1e5a      	subs	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30
 8001c48:	e007      	b.n	8001c5a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 020f 	bic.w	r2, r2, #15
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	f023 0303 	bic.w	r3, r3, #3
 8001c68:	f043 0201 	orr.w	r2, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	641a      	str	r2, [r3, #64]	; 0x40
 8001c70:	e00a      	b.n	8001c88 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f023 0312 	bic.w	r3, r3, #18
 8001c7a:	f043 0210 	orr.w	r2, r3, #16
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001c82:	2301      	movs	r3, #1
 8001c84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001c88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3768      	adds	r7, #104	; 0x68
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	fff0c007 	.word	0xfff0c007

08001c98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f040 80f7 	bne.w	8001ea6 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_Start_DMA+0x2e>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e0f2      	b.n	8001eac <HAL_ADC_Start_DMA+0x214>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd6:	d004      	beq.n	8001ce2 <HAL_ADC_Start_DMA+0x4a>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a75      	ldr	r2, [pc, #468]	; (8001eb4 <HAL_ADC_Start_DMA+0x21c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d109      	bne.n	8001cf6 <HAL_ADC_Start_DMA+0x5e>
 8001ce2:	4b75      	ldr	r3, [pc, #468]	; (8001eb8 <HAL_ADC_Start_DMA+0x220>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	bf0c      	ite	eq
 8001cee:	2301      	moveq	r3, #1
 8001cf0:	2300      	movne	r3, #0
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	e008      	b.n	8001d08 <HAL_ADC_Start_DMA+0x70>
 8001cf6:	4b71      	ldr	r3, [pc, #452]	; (8001ebc <HAL_ADC_Start_DMA+0x224>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 031f 	and.w	r3, r3, #31
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	bf0c      	ite	eq
 8001d02:	2301      	moveq	r3, #1
 8001d04:	2300      	movne	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 80c5 	beq.w	8001e98 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 fd22 	bl	8002758 <ADC_Enable>
 8001d14:	4603      	mov	r3, r0
 8001d16:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d18:	7dfb      	ldrb	r3, [r7, #23]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f040 80b7 	bne.w	8001e8e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d3c:	d004      	beq.n	8001d48 <HAL_ADC_Start_DMA+0xb0>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a5c      	ldr	r2, [pc, #368]	; (8001eb4 <HAL_ADC_Start_DMA+0x21c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d106      	bne.n	8001d56 <HAL_ADC_Start_DMA+0xbe>
 8001d48:	4b5b      	ldr	r3, [pc, #364]	; (8001eb8 <HAL_ADC_Start_DMA+0x220>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d010      	beq.n	8001d76 <HAL_ADC_Start_DMA+0xde>
 8001d54:	e005      	b.n	8001d62 <HAL_ADC_Start_DMA+0xca>
 8001d56:	4b59      	ldr	r3, [pc, #356]	; (8001ebc <HAL_ADC_Start_DMA+0x224>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d009      	beq.n	8001d76 <HAL_ADC_Start_DMA+0xde>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d6a:	d004      	beq.n	8001d76 <HAL_ADC_Start_DMA+0xde>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a53      	ldr	r2, [pc, #332]	; (8001ec0 <HAL_ADC_Start_DMA+0x228>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d115      	bne.n	8001da2 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d036      	beq.n	8001dfe <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001da0:	e02d      	b.n	8001dfe <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001db6:	d004      	beq.n	8001dc2 <HAL_ADC_Start_DMA+0x12a>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a3d      	ldr	r2, [pc, #244]	; (8001eb4 <HAL_ADC_Start_DMA+0x21c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d10a      	bne.n	8001dd8 <HAL_ADC_Start_DMA+0x140>
 8001dc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf14      	ite	ne
 8001dd0:	2301      	movne	r3, #1
 8001dd2:	2300      	moveq	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	e008      	b.n	8001dea <HAL_ADC_Start_DMA+0x152>
 8001dd8:	4b39      	ldr	r3, [pc, #228]	; (8001ec0 <HAL_ADC_Start_DMA+0x228>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bf14      	ite	ne
 8001de4:	2301      	movne	r3, #1
 8001de6:	2300      	moveq	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d007      	beq.n	8001dfe <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001df6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e0a:	d106      	bne.n	8001e1a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e10:	f023 0206 	bic.w	r2, r3, #6
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	645a      	str	r2, [r3, #68]	; 0x44
 8001e18:	e002      	b.n	8001e20 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2c:	4a25      	ldr	r2, [pc, #148]	; (8001ec4 <HAL_ADC_Start_DMA+0x22c>)
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e34:	4a24      	ldr	r2, [pc, #144]	; (8001ec8 <HAL_ADC_Start_DMA+0x230>)
 8001e36:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3c:	4a23      	ldr	r2, [pc, #140]	; (8001ecc <HAL_ADC_Start_DMA+0x234>)
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	221c      	movs	r2, #28
 8001e46:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0210 	orr.w	r2, r2, #16
 8001e56:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	3340      	adds	r3, #64	; 0x40
 8001e72:	4619      	mov	r1, r3
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f000 fe84 	bl	8002b84 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0204 	orr.w	r2, r2, #4
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	e00d      	b.n	8001eaa <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001e96:	e008      	b.n	8001eaa <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001ea4:	e001      	b.n	8001eaa <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	50000100 	.word	0x50000100
 8001eb8:	50000300 	.word	0x50000300
 8001ebc:	50000700 	.word	0x50000700
 8001ec0:	50000400 	.word	0x50000400
 8001ec4:	0800268d 	.word	0x0800268d
 8001ec8:	08002707 	.word	0x08002707
 8001ecc:	08002723 	.word	0x08002723

08001ed0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b09b      	sub	sp, #108	; 0x6c
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x22>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e2cb      	b.n	800248a <HAL_ADC_ConfigChannel+0x5ba>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f040 82af 	bne.w	8002468 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d81c      	bhi.n	8001f4c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	461a      	mov	r2, r3
 8001f26:	231f      	movs	r3, #31
 8001f28:	4093      	lsls	r3, r2
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	4019      	ands	r1, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	631a      	str	r2, [r3, #48]	; 0x30
 8001f4a:	e063      	b.n	8002014 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b09      	cmp	r3, #9
 8001f52:	d81e      	bhi.n	8001f92 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	3b1e      	subs	r3, #30
 8001f68:	221f      	movs	r2, #31
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	4019      	ands	r1, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	3b1e      	subs	r3, #30
 8001f84:	fa00 f203 	lsl.w	r2, r0, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	635a      	str	r2, [r3, #52]	; 0x34
 8001f90:	e040      	b.n	8002014 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b0e      	cmp	r3, #14
 8001f98:	d81e      	bhi.n	8001fd8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	3b3c      	subs	r3, #60	; 0x3c
 8001fae:	221f      	movs	r2, #31
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	4019      	ands	r1, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	3b3c      	subs	r3, #60	; 0x3c
 8001fca:	fa00 f203 	lsl.w	r2, r0, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	639a      	str	r2, [r3, #56]	; 0x38
 8001fd6:	e01d      	b.n	8002014 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	3b5a      	subs	r3, #90	; 0x5a
 8001fec:	221f      	movs	r2, #31
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	4019      	ands	r1, r3
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	6818      	ldr	r0, [r3, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	3b5a      	subs	r3, #90	; 0x5a
 8002008:	fa00 f203 	lsl.w	r2, r0, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 80e5 	bne.w	80021ee <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b09      	cmp	r3, #9
 800202a:	d91c      	bls.n	8002066 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6999      	ldr	r1, [r3, #24]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4613      	mov	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4413      	add	r3, r2
 800203c:	3b1e      	subs	r3, #30
 800203e:	2207      	movs	r2, #7
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	4019      	ands	r1, r3
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	6898      	ldr	r0, [r3, #8]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	3b1e      	subs	r3, #30
 8002058:	fa00 f203 	lsl.w	r2, r0, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	619a      	str	r2, [r3, #24]
 8002064:	e019      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6959      	ldr	r1, [r3, #20]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4613      	mov	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	2207      	movs	r2, #7
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	4019      	ands	r1, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	6898      	ldr	r0, [r3, #8]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	fa00 f203 	lsl.w	r2, r0, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	08db      	lsrs	r3, r3, #3
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d84f      	bhi.n	800215c <HAL_ADC_ConfigChannel+0x28c>
 80020bc:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <HAL_ADC_ConfigChannel+0x1f4>)
 80020be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c2:	bf00      	nop
 80020c4:	080020d5 	.word	0x080020d5
 80020c8:	080020f7 	.word	0x080020f7
 80020cc:	08002119 	.word	0x08002119
 80020d0:	0800213b 	.word	0x0800213b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020da:	4b9f      	ldr	r3, [pc, #636]	; (8002358 <HAL_ADC_ConfigChannel+0x488>)
 80020dc:	4013      	ands	r3, r2
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	0691      	lsls	r1, r2, #26
 80020e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020e6:	430a      	orrs	r2, r1
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020f2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020f4:	e07e      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020fc:	4b96      	ldr	r3, [pc, #600]	; (8002358 <HAL_ADC_ConfigChannel+0x488>)
 80020fe:	4013      	ands	r3, r2
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	0691      	lsls	r1, r2, #26
 8002106:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002108:	430a      	orrs	r2, r1
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002114:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002116:	e06d      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800211e:	4b8e      	ldr	r3, [pc, #568]	; (8002358 <HAL_ADC_ConfigChannel+0x488>)
 8002120:	4013      	ands	r3, r2
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	0691      	lsls	r1, r2, #26
 8002128:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800212a:	430a      	orrs	r2, r1
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002136:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002138:	e05c      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002140:	4b85      	ldr	r3, [pc, #532]	; (8002358 <HAL_ADC_ConfigChannel+0x488>)
 8002142:	4013      	ands	r3, r2
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	0691      	lsls	r1, r2, #26
 800214a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800214c:	430a      	orrs	r2, r1
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002158:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800215a:	e04b      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002162:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	069b      	lsls	r3, r3, #26
 800216c:	429a      	cmp	r2, r3
 800216e:	d107      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800217e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002186:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	069b      	lsls	r3, r3, #26
 8002190:	429a      	cmp	r2, r3
 8002192:	d107      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021a2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	069b      	lsls	r3, r3, #26
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d107      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021c6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	069b      	lsls	r3, r3, #26
 80021d8:	429a      	cmp	r2, r3
 80021da:	d10a      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021ea:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80021ec:	e001      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80021ee:	bf00      	nop
 80021f0:	e000      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80021f2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d108      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x344>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x344>
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <HAL_ADC_ConfigChannel+0x346>
 8002214:	2300      	movs	r3, #0
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 8131 	bne.w	800247e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d00f      	beq.n	8002244 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2201      	movs	r2, #1
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43da      	mvns	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	400a      	ands	r2, r1
 800223e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002242:	e049      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2201      	movs	r2, #1
 8002252:	409a      	lsls	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b09      	cmp	r3, #9
 8002264:	d91c      	bls.n	80022a0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6999      	ldr	r1, [r3, #24]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4613      	mov	r3, r2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4413      	add	r3, r2
 8002276:	3b1b      	subs	r3, #27
 8002278:	2207      	movs	r2, #7
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	4019      	ands	r1, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	6898      	ldr	r0, [r3, #8]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4613      	mov	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	3b1b      	subs	r3, #27
 8002292:	fa00 f203 	lsl.w	r2, r0, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	619a      	str	r2, [r3, #24]
 800229e:	e01b      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6959      	ldr	r1, [r3, #20]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	2207      	movs	r2, #7
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	4019      	ands	r1, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6898      	ldr	r0, [r3, #8]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	4613      	mov	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	fa00 f203 	lsl.w	r2, r0, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e0:	d004      	beq.n	80022ec <HAL_ADC_ConfigChannel+0x41c>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a1d      	ldr	r2, [pc, #116]	; (800235c <HAL_ADC_ConfigChannel+0x48c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d101      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x420>
 80022ec:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <HAL_ADC_ConfigChannel+0x490>)
 80022ee:	e000      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x422>
 80022f0:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <HAL_ADC_ConfigChannel+0x494>)
 80022f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b10      	cmp	r3, #16
 80022fa:	d105      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80022fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002304:	2b00      	cmp	r3, #0
 8002306:	d015      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800230c:	2b11      	cmp	r3, #17
 800230e:	d105      	bne.n	800231c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00b      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002320:	2b12      	cmp	r3, #18
 8002322:	f040 80ac 	bne.w	800247e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 80a5 	bne.w	800247e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800233c:	d102      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x474>
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <HAL_ADC_ConfigChannel+0x48c>)
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	e023      	b.n	800238c <HAL_ADC_ConfigChannel+0x4bc>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_ADC_ConfigChannel+0x48c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d10c      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x498>
 800234e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e01a      	b.n	800238c <HAL_ADC_ConfigChannel+0x4bc>
 8002356:	bf00      	nop
 8002358:	83fff000 	.word	0x83fff000
 800235c:	50000100 	.word	0x50000100
 8002360:	50000300 	.word	0x50000300
 8002364:	50000700 	.word	0x50000700
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a4a      	ldr	r2, [pc, #296]	; (8002498 <HAL_ADC_ConfigChannel+0x5c8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d102      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x4a8>
 8002372:	4b4a      	ldr	r3, [pc, #296]	; (800249c <HAL_ADC_ConfigChannel+0x5cc>)
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	e009      	b.n	800238c <HAL_ADC_ConfigChannel+0x4bc>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a47      	ldr	r2, [pc, #284]	; (800249c <HAL_ADC_ConfigChannel+0x5cc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d102      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x4b8>
 8002382:	4b45      	ldr	r3, [pc, #276]	; (8002498 <HAL_ADC_ConfigChannel+0x5c8>)
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	e001      	b.n	800238c <HAL_ADC_ConfigChannel+0x4bc>
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d108      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x4dc>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x4dc>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <HAL_ADC_ConfigChannel+0x4de>
 80023ac:	2300      	movs	r3, #0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d150      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023b2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d010      	beq.n	80023da <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d107      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x504>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x504>
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x506>
 80023d4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d13c      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b10      	cmp	r3, #16
 80023e0:	d11d      	bne.n	800241e <HAL_ADC_ConfigChannel+0x54e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ea:	d118      	bne.n	800241e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80023ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023f8:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <HAL_ADC_ConfigChannel+0x5d0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a29      	ldr	r2, [pc, #164]	; (80024a4 <HAL_ADC_ConfigChannel+0x5d4>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	0c9a      	lsrs	r2, r3, #18
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800240e:	e002      	b.n	8002416 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	3b01      	subs	r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f9      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800241c:	e02e      	b.n	800247c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b11      	cmp	r3, #17
 8002424:	d10b      	bne.n	800243e <HAL_ADC_ConfigChannel+0x56e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800242e:	d106      	bne.n	800243e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800243a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800243c:	e01e      	b.n	800247c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b12      	cmp	r3, #18
 8002444:	d11a      	bne.n	800247c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800244e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002450:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002452:	e013      	b.n	800247c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f043 0220 	orr.w	r2, r3, #32
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002466:	e00a      	b.n	800247e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f043 0220 	orr.w	r2, r3, #32
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800247a:	e000      	b.n	800247e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800247c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002486:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800248a:	4618      	mov	r0, r3
 800248c:	376c      	adds	r7, #108	; 0x6c
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	50000400 	.word	0x50000400
 800249c:	50000500 	.word	0x50000500
 80024a0:	20000000 	.word	0x20000000
 80024a4:	431bde83 	.word	0x431bde83

080024a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b099      	sub	sp, #100	; 0x64
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024c0:	d102      	bne.n	80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80024c2:	4b6d      	ldr	r3, [pc, #436]	; (8002678 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	e01a      	b.n	80024fe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a6a      	ldr	r2, [pc, #424]	; (8002678 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d103      	bne.n	80024da <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80024d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	e011      	b.n	80024fe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a67      	ldr	r2, [pc, #412]	; (800267c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d102      	bne.n	80024ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80024e4:	4b66      	ldr	r3, [pc, #408]	; (8002680 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	e009      	b.n	80024fe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a64      	ldr	r2, [pc, #400]	; (8002680 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d102      	bne.n	80024fa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80024f4:	4b61      	ldr	r3, [pc, #388]	; (800267c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	e001      	b.n	80024fe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0b0      	b.n	800266a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002512:	2302      	movs	r3, #2
 8002514:	e0a9      	b.n	800266a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	f040 808d 	bne.w	8002648 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	f040 8086 	bne.w	8002648 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002544:	d004      	beq.n	8002550 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a4b      	ldr	r2, [pc, #300]	; (8002678 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d101      	bne.n	8002554 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002550:	4b4c      	ldr	r3, [pc, #304]	; (8002684 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002552:	e000      	b.n	8002556 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002554:	4b4c      	ldr	r3, [pc, #304]	; (8002688 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002556:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d040      	beq.n	80025e2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002572:	035b      	lsls	r3, r3, #13
 8002574:	430b      	orrs	r3, r1
 8002576:	431a      	orrs	r2, r3
 8002578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800257a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b01      	cmp	r3, #1
 8002588:	d108      	bne.n	800259c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800259c:	2300      	movs	r3, #0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d15c      	bne.n	800265c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80025be:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d14b      	bne.n	800265c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80025c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025cc:	f023 030f 	bic.w	r3, r3, #15
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	6811      	ldr	r1, [r2, #0]
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	6892      	ldr	r2, [r2, #8]
 80025d8:	430a      	orrs	r2, r1
 80025da:	431a      	orrs	r2, r3
 80025dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025de:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80025e0:	e03c      	b.n	800265c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025ec:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d108      	bne.n	800260e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800260e:	2300      	movs	r3, #0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d123      	bne.n	800265c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d107      	bne.n	8002630 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002630:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002632:	2b00      	cmp	r3, #0
 8002634:	d112      	bne.n	800265c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800263e:	f023 030f 	bic.w	r3, r3, #15
 8002642:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002644:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002646:	e009      	b.n	800265c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f043 0220 	orr.w	r2, r3, #32
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800265a:	e000      	b.n	800265e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800265c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002666:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800266a:	4618      	mov	r0, r3
 800266c:	3764      	adds	r7, #100	; 0x64
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	50000100 	.word	0x50000100
 800267c:	50000400 	.word	0x50000400
 8002680:	50000500 	.word	0x50000500
 8002684:	50000300 	.word	0x50000300
 8002688:	50000700 	.word	0x50000700

0800268c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d126      	bne.n	80026f4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d115      	bne.n	80026ec <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d111      	bne.n	80026ec <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d105      	bne.n	80026ec <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f043 0201 	orr.w	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f7ff f8bb 	bl	8001868 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80026f2:	e004      	b.n	80026fe <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	4798      	blx	r3
}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f7ff f8b1 	bl	800187c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	f043 0204 	orr.w	r2, r3, #4
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f7ff f8a1 	bl	8001890 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	2b01      	cmp	r3, #1
 8002770:	d108      	bne.n	8002784 <ADC_Enable+0x2c>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <ADC_Enable+0x2c>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <ADC_Enable+0x2e>
 8002784:	2300      	movs	r3, #0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d13c      	bne.n	8002804 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	4b1f      	ldr	r3, [pc, #124]	; (8002810 <ADC_Enable+0xb8>)
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00d      	beq.n	80027b4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f043 0210 	orr.w	r2, r3, #16
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a8:	f043 0201 	orr.w	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e028      	b.n	8002806 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80027c4:	f7ff f820 	bl	8001808 <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027ca:	e014      	b.n	80027f6 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027cc:	f7ff f81c 	bl	8001808 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d90d      	bls.n	80027f6 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f043 0210 	orr.w	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	f043 0201 	orr.w	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e007      	b.n	8002806 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b01      	cmp	r3, #1
 8002802:	d1e3      	bne.n	80027cc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	8000003f 	.word	0x8000003f

08002814 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b01      	cmp	r3, #1
 800282c:	d108      	bne.n	8002840 <ADC_Disable+0x2c>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <ADC_Disable+0x2c>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <ADC_Disable+0x2e>
 8002840:	2300      	movs	r3, #0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d040      	beq.n	80028c8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 030d 	and.w	r3, r3, #13
 8002850:	2b01      	cmp	r3, #1
 8002852:	d10f      	bne.n	8002874 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0202 	orr.w	r2, r2, #2
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2203      	movs	r2, #3
 800286a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800286c:	f7fe ffcc 	bl	8001808 <HAL_GetTick>
 8002870:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002872:	e022      	b.n	80028ba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f043 0210 	orr.w	r2, r3, #16
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002884:	f043 0201 	orr.w	r2, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e01c      	b.n	80028ca <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002890:	f7fe ffba 	bl	8001808 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d90d      	bls.n	80028ba <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f043 0210 	orr.w	r2, r3, #16
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f043 0201 	orr.w	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e007      	b.n	80028ca <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d0e3      	beq.n	8002890 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f0:	4013      	ands	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002906:	4a04      	ldr	r2, [pc, #16]	; (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	60d3      	str	r3, [r2, #12]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <__NVIC_GetPriorityGrouping+0x18>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	f003 0307 	and.w	r3, r3, #7
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	2b00      	cmp	r3, #0
 8002948:	db0b      	blt.n	8002962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	f003 021f 	and.w	r2, r3, #31
 8002950:	4907      	ldr	r1, [pc, #28]	; (8002970 <__NVIC_EnableIRQ+0x38>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2001      	movs	r0, #1
 800295a:	fa00 f202 	lsl.w	r2, r0, r2
 800295e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	e000e100 	.word	0xe000e100

08002974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002984:	2b00      	cmp	r3, #0
 8002986:	db0a      	blt.n	800299e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	490c      	ldr	r1, [pc, #48]	; (80029c0 <__NVIC_SetPriority+0x4c>)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	0112      	lsls	r2, r2, #4
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	440b      	add	r3, r1
 8002998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800299c:	e00a      	b.n	80029b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4908      	ldr	r1, [pc, #32]	; (80029c4 <__NVIC_SetPriority+0x50>)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	3b04      	subs	r3, #4
 80029ac:	0112      	lsls	r2, r2, #4
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	440b      	add	r3, r1
 80029b2:	761a      	strb	r2, [r3, #24]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000e100 	.word	0xe000e100
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	; 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f1c3 0307 	rsb	r3, r3, #7
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	bf28      	it	cs
 80029e6:	2304      	movcs	r3, #4
 80029e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3304      	adds	r3, #4
 80029ee:	2b06      	cmp	r3, #6
 80029f0:	d902      	bls.n	80029f8 <NVIC_EncodePriority+0x30>
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3b03      	subs	r3, #3
 80029f6:	e000      	b.n	80029fa <NVIC_EncodePriority+0x32>
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43da      	mvns	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	4313      	orrs	r3, r2
         );
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3724      	adds	r7, #36	; 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a40:	d301      	bcc.n	8002a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a42:	2301      	movs	r3, #1
 8002a44:	e00f      	b.n	8002a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a46:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <SysTick_Config+0x40>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a4e:	210f      	movs	r1, #15
 8002a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a54:	f7ff ff8e 	bl	8002974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <SysTick_Config+0x40>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5e:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <SysTick_Config+0x40>)
 8002a60:	2207      	movs	r2, #7
 8002a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	e000e010 	.word	0xe000e010

08002a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ff29 	bl	80028d4 <__NVIC_SetPriorityGrouping>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	4603      	mov	r3, r0
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a9c:	f7ff ff3e 	bl	800291c <__NVIC_GetPriorityGrouping>
 8002aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	6978      	ldr	r0, [r7, #20]
 8002aa8:	f7ff ff8e 	bl	80029c8 <NVIC_EncodePriority>
 8002aac:	4602      	mov	r2, r0
 8002aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff5d 	bl	8002974 <__NVIC_SetPriority>
}
 8002aba:	bf00      	nop
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff31 	bl	8002938 <__NVIC_EnableIRQ>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff ffa2 	bl	8002a30 <SysTick_Config>
 8002aec:	4603      	mov	r3, r0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e037      	b.n	8002b7c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b22:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f940 	bl	8002de4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}  
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_DMA_Start_IT+0x20>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e04a      	b.n	8002c3a <HAL_DMA_Start_IT+0xb6>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d13a      	bne.n	8002c2c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f8d4 	bl	8002d88 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 020e 	orr.w	r2, r2, #14
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	e00f      	b.n	8002c1a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 020a 	orr.w	r2, r2, #10
 8002c08:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0204 	bic.w	r2, r2, #4
 8002c18:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0201 	orr.w	r2, r2, #1
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e005      	b.n	8002c38 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
 8002c36:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002c38:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	2204      	movs	r2, #4
 8002c60:	409a      	lsls	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d024      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x72>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01f      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d107      	bne.n	8002c92 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0204 	bic.w	r2, r2, #4
 8002c90:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9a:	2104      	movs	r1, #4
 8002c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d06a      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002cb2:	e065      	b.n	8002d80 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	2202      	movs	r2, #2
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d02c      	beq.n	8002d1e <HAL_DMA_IRQHandler+0xdc>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d027      	beq.n	8002d1e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10b      	bne.n	8002cf4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 020a 	bic.w	r2, r2, #10
 8002cea:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfc:	2102      	movs	r1, #2
 8002cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002d02:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d035      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002d1c:	e030      	b.n	8002d80 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	2208      	movs	r2, #8
 8002d24:	409a      	lsls	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d028      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x13e>
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d023      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 020e 	bic.w	r2, r2, #14
 8002d46:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d50:	2101      	movs	r1, #1
 8002d52:	fa01 f202 	lsl.w	r2, r1, r2
 8002d56:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	4798      	blx	r3
    }
  }
}  
 8002d7e:	e7ff      	b.n	8002d80 <HAL_DMA_IRQHandler+0x13e>
 8002d80:	bf00      	nop
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9e:	2101      	movs	r1, #1
 8002da0:	fa01 f202 	lsl.w	r2, r1, r2
 8002da4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b10      	cmp	r3, #16
 8002db4:	d108      	bne.n	8002dc8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dc6:	e007      	b.n	8002dd8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	60da      	str	r2, [r3, #12]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <DMA_CalcBaseAndBitshift+0x60>)
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d80f      	bhi.n	8002e18 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <DMA_CalcBaseAndBitshift+0x64>)
 8002e00:	4413      	add	r3, r2
 8002e02:	4a12      	ldr	r2, [pc, #72]	; (8002e4c <DMA_CalcBaseAndBitshift+0x68>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	009a      	lsls	r2, r3, #2
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a0f      	ldr	r2, [pc, #60]	; (8002e50 <DMA_CalcBaseAndBitshift+0x6c>)
 8002e14:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002e16:	e00e      	b.n	8002e36 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <DMA_CalcBaseAndBitshift+0x70>)
 8002e20:	4413      	add	r3, r2
 8002e22:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <DMA_CalcBaseAndBitshift+0x68>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	009a      	lsls	r2, r3, #2
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a09      	ldr	r2, [pc, #36]	; (8002e58 <DMA_CalcBaseAndBitshift+0x74>)
 8002e34:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40020407 	.word	0x40020407
 8002e48:	bffdfff8 	.word	0xbffdfff8
 8002e4c:	cccccccd 	.word	0xcccccccd
 8002e50:	40020000 	.word	0x40020000
 8002e54:	bffdfbf8 	.word	0xbffdfbf8
 8002e58:	40020400 	.word	0x40020400

08002e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e6a:	e160      	b.n	800312e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	2101      	movs	r1, #1
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 8152 	beq.w	8003128 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d00b      	beq.n	8002ea4 <HAL_GPIO_Init+0x48>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d007      	beq.n	8002ea4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e98:	2b11      	cmp	r3, #17
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b12      	cmp	r3, #18
 8002ea2:	d130      	bne.n	8002f06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	2203      	movs	r2, #3
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eda:	2201      	movs	r2, #1
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f003 0201 	and.w	r2, r3, #1
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	2203      	movs	r2, #3
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0xea>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b12      	cmp	r3, #18
 8002f44:	d123      	bne.n	8002f8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	08da      	lsrs	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3208      	adds	r2, #8
 8002f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	220f      	movs	r2, #15
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4013      	ands	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	08da      	lsrs	r2, r3, #3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3208      	adds	r2, #8
 8002f88:	6939      	ldr	r1, [r7, #16]
 8002f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	2203      	movs	r2, #3
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 0203 	and.w	r2, r3, #3
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80ac 	beq.w	8003128 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd0:	4b5e      	ldr	r3, [pc, #376]	; (800314c <HAL_GPIO_Init+0x2f0>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	4a5d      	ldr	r2, [pc, #372]	; (800314c <HAL_GPIO_Init+0x2f0>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	6193      	str	r3, [r2, #24]
 8002fdc:	4b5b      	ldr	r3, [pc, #364]	; (800314c <HAL_GPIO_Init+0x2f0>)
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fe8:	4a59      	ldr	r2, [pc, #356]	; (8003150 <HAL_GPIO_Init+0x2f4>)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	089b      	lsrs	r3, r3, #2
 8002fee:	3302      	adds	r3, #2
 8002ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	220f      	movs	r2, #15
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003012:	d025      	beq.n	8003060 <HAL_GPIO_Init+0x204>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a4f      	ldr	r2, [pc, #316]	; (8003154 <HAL_GPIO_Init+0x2f8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d01f      	beq.n	800305c <HAL_GPIO_Init+0x200>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a4e      	ldr	r2, [pc, #312]	; (8003158 <HAL_GPIO_Init+0x2fc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d019      	beq.n	8003058 <HAL_GPIO_Init+0x1fc>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a4d      	ldr	r2, [pc, #308]	; (800315c <HAL_GPIO_Init+0x300>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d013      	beq.n	8003054 <HAL_GPIO_Init+0x1f8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a4c      	ldr	r2, [pc, #304]	; (8003160 <HAL_GPIO_Init+0x304>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00d      	beq.n	8003050 <HAL_GPIO_Init+0x1f4>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a4b      	ldr	r2, [pc, #300]	; (8003164 <HAL_GPIO_Init+0x308>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <HAL_GPIO_Init+0x1f0>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a4a      	ldr	r2, [pc, #296]	; (8003168 <HAL_GPIO_Init+0x30c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d101      	bne.n	8003048 <HAL_GPIO_Init+0x1ec>
 8003044:	2306      	movs	r3, #6
 8003046:	e00c      	b.n	8003062 <HAL_GPIO_Init+0x206>
 8003048:	2307      	movs	r3, #7
 800304a:	e00a      	b.n	8003062 <HAL_GPIO_Init+0x206>
 800304c:	2305      	movs	r3, #5
 800304e:	e008      	b.n	8003062 <HAL_GPIO_Init+0x206>
 8003050:	2304      	movs	r3, #4
 8003052:	e006      	b.n	8003062 <HAL_GPIO_Init+0x206>
 8003054:	2303      	movs	r3, #3
 8003056:	e004      	b.n	8003062 <HAL_GPIO_Init+0x206>
 8003058:	2302      	movs	r3, #2
 800305a:	e002      	b.n	8003062 <HAL_GPIO_Init+0x206>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_GPIO_Init+0x206>
 8003060:	2300      	movs	r3, #0
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	f002 0203 	and.w	r2, r2, #3
 8003068:	0092      	lsls	r2, r2, #2
 800306a:	4093      	lsls	r3, r2
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003072:	4937      	ldr	r1, [pc, #220]	; (8003150 <HAL_GPIO_Init+0x2f4>)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	089b      	lsrs	r3, r3, #2
 8003078:	3302      	adds	r3, #2
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003080:	4b3a      	ldr	r3, [pc, #232]	; (800316c <HAL_GPIO_Init+0x310>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	43db      	mvns	r3, r3
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4013      	ands	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80030a4:	4a31      	ldr	r2, [pc, #196]	; (800316c <HAL_GPIO_Init+0x310>)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030aa:	4b30      	ldr	r3, [pc, #192]	; (800316c <HAL_GPIO_Init+0x310>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4013      	ands	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80030ce:	4a27      	ldr	r2, [pc, #156]	; (800316c <HAL_GPIO_Init+0x310>)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030d4:	4b25      	ldr	r3, [pc, #148]	; (800316c <HAL_GPIO_Init+0x310>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	43db      	mvns	r3, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80030f8:	4a1c      	ldr	r2, [pc, #112]	; (800316c <HAL_GPIO_Init+0x310>)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030fe:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_GPIO_Init+0x310>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003122:	4a12      	ldr	r2, [pc, #72]	; (800316c <HAL_GPIO_Init+0x310>)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	3301      	adds	r3, #1
 800312c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	f47f ae97 	bne.w	8002e6c <HAL_GPIO_Init+0x10>
  }
}
 800313e:	bf00      	nop
 8003140:	bf00      	nop
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	40021000 	.word	0x40021000
 8003150:	40010000 	.word	0x40010000
 8003154:	48000400 	.word	0x48000400
 8003158:	48000800 	.word	0x48000800
 800315c:	48000c00 	.word	0x48000c00
 8003160:	48001000 	.word	0x48001000
 8003164:	48001400 	.word	0x48001400
 8003168:	48001800 	.word	0x48001800
 800316c:	40010400 	.word	0x40010400

08003170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003176:	af00      	add	r7, sp, #0
 8003178:	1d3b      	adds	r3, r7, #4
 800317a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800317c:	1d3b      	adds	r3, r7, #4
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d102      	bne.n	800318a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	f000 bf01 	b.w	8003f8c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318a:	1d3b      	adds	r3, r7, #4
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 8160 	beq.w	800345a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800319a:	4bae      	ldr	r3, [pc, #696]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d00c      	beq.n	80031c0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031a6:	4bab      	ldr	r3, [pc, #684]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d159      	bne.n	8003266 <HAL_RCC_OscConfig+0xf6>
 80031b2:	4ba8      	ldr	r3, [pc, #672]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80031ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031be:	d152      	bne.n	8003266 <HAL_RCC_OscConfig+0xf6>
 80031c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031c4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031cc:	fa93 f3a3 	rbit	r3, r3
 80031d0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031d4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	fab3 f383 	clz	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d102      	bne.n	80031f2 <HAL_RCC_OscConfig+0x82>
 80031ec:	4b99      	ldr	r3, [pc, #612]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	e015      	b.n	800321e <HAL_RCC_OscConfig+0xae>
 80031f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031f6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800320a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800320e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003212:	fa93 f3a3 	rbit	r3, r3
 8003216:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800321a:	4b8e      	ldr	r3, [pc, #568]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003222:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003226:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800322a:	fa92 f2a2 	rbit	r2, r2
 800322e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003232:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003236:	fab2 f282 	clz	r2, r2
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	f042 0220 	orr.w	r2, r2, #32
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	f002 021f 	and.w	r2, r2, #31
 8003246:	2101      	movs	r1, #1
 8003248:	fa01 f202 	lsl.w	r2, r1, r2
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 8102 	beq.w	8003458 <HAL_RCC_OscConfig+0x2e8>
 8003254:	1d3b      	adds	r3, r7, #4
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f040 80fc 	bne.w	8003458 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f000 be93 	b.w	8003f8c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003266:	1d3b      	adds	r3, r7, #4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003270:	d106      	bne.n	8003280 <HAL_RCC_OscConfig+0x110>
 8003272:	4b78      	ldr	r3, [pc, #480]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a77      	ldr	r2, [pc, #476]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 8003278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e030      	b.n	80032e2 <HAL_RCC_OscConfig+0x172>
 8003280:	1d3b      	adds	r3, r7, #4
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x134>
 800328a:	4b72      	ldr	r3, [pc, #456]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a71      	ldr	r2, [pc, #452]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 8003290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	4b6f      	ldr	r3, [pc, #444]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a6e      	ldr	r2, [pc, #440]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 800329c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	e01e      	b.n	80032e2 <HAL_RCC_OscConfig+0x172>
 80032a4:	1d3b      	adds	r3, r7, #4
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032ae:	d10c      	bne.n	80032ca <HAL_RCC_OscConfig+0x15a>
 80032b0:	4b68      	ldr	r3, [pc, #416]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a67      	ldr	r2, [pc, #412]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 80032b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	4b65      	ldr	r3, [pc, #404]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a64      	ldr	r2, [pc, #400]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 80032c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	e00b      	b.n	80032e2 <HAL_RCC_OscConfig+0x172>
 80032ca:	4b62      	ldr	r3, [pc, #392]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a61      	ldr	r2, [pc, #388]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 80032d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	4b5f      	ldr	r3, [pc, #380]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a5e      	ldr	r2, [pc, #376]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 80032dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d059      	beq.n	80033a0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fe fa8c 	bl	8001808 <HAL_GetTick>
 80032f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f6:	f7fe fa87 	bl	8001808 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	; 0x64
 8003304:	d902      	bls.n	800330c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	f000 be40 	b.w	8003f8c <HAL_RCC_OscConfig+0xe1c>
 800330c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003310:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003320:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003324:	fab3 f383 	clz	r3, r3
 8003328:	b2db      	uxtb	r3, r3
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b01      	cmp	r3, #1
 8003336:	d102      	bne.n	800333e <HAL_RCC_OscConfig+0x1ce>
 8003338:	4b46      	ldr	r3, [pc, #280]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	e015      	b.n	800336a <HAL_RCC_OscConfig+0x1fa>
 800333e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003342:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003346:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003356:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800335a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800335e:	fa93 f3a3 	rbit	r3, r3
 8003362:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003366:	4b3b      	ldr	r3, [pc, #236]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800336e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003372:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003376:	fa92 f2a2 	rbit	r2, r2
 800337a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800337e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003382:	fab2 f282 	clz	r2, r2
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	f042 0220 	orr.w	r2, r2, #32
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	f002 021f 	and.w	r2, r2, #31
 8003392:	2101      	movs	r1, #1
 8003394:	fa01 f202 	lsl.w	r2, r1, r2
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0ab      	beq.n	80032f6 <HAL_RCC_OscConfig+0x186>
 800339e:	e05c      	b.n	800345a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fe fa32 	bl	8001808 <HAL_GetTick>
 80033a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a8:	e00a      	b.n	80033c0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033aa:	f7fe fa2d 	bl	8001808 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d902      	bls.n	80033c0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	f000 bde6 	b.w	8003f8c <HAL_RCC_OscConfig+0xe1c>
 80033c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033c4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80033cc:	fa93 f3a3 	rbit	r3, r3
 80033d0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80033d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d102      	bne.n	80033f2 <HAL_RCC_OscConfig+0x282>
 80033ec:	4b19      	ldr	r3, [pc, #100]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	e015      	b.n	800341e <HAL_RCC_OscConfig+0x2ae>
 80033f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033f6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80033fe:	fa93 f3a3 	rbit	r3, r3
 8003402:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003406:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800340a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800340e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800341a:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <HAL_RCC_OscConfig+0x2e4>)
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003422:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003426:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800342a:	fa92 f2a2 	rbit	r2, r2
 800342e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003432:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003436:	fab2 f282 	clz	r2, r2
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	f042 0220 	orr.w	r2, r2, #32
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	f002 021f 	and.w	r2, r2, #31
 8003446:	2101      	movs	r1, #1
 8003448:	fa01 f202 	lsl.w	r2, r1, r2
 800344c:	4013      	ands	r3, r2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1ab      	bne.n	80033aa <HAL_RCC_OscConfig+0x23a>
 8003452:	e002      	b.n	800345a <HAL_RCC_OscConfig+0x2ea>
 8003454:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345a:	1d3b      	adds	r3, r7, #4
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8170 	beq.w	800374a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800346a:	4bd0      	ldr	r3, [pc, #832]	; (80037ac <HAL_RCC_OscConfig+0x63c>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00c      	beq.n	8003490 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003476:	4bcd      	ldr	r3, [pc, #820]	; (80037ac <HAL_RCC_OscConfig+0x63c>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b08      	cmp	r3, #8
 8003480:	d16d      	bne.n	800355e <HAL_RCC_OscConfig+0x3ee>
 8003482:	4bca      	ldr	r3, [pc, #808]	; (80037ac <HAL_RCC_OscConfig+0x63c>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800348a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800348e:	d166      	bne.n	800355e <HAL_RCC_OscConfig+0x3ee>
 8003490:	2302      	movs	r3, #2
 8003492:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800349a:	fa93 f3a3 	rbit	r3, r3
 800349e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80034a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a6:	fab3 f383 	clz	r3, r3
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d102      	bne.n	80034c0 <HAL_RCC_OscConfig+0x350>
 80034ba:	4bbc      	ldr	r3, [pc, #752]	; (80037ac <HAL_RCC_OscConfig+0x63c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	e013      	b.n	80034e8 <HAL_RCC_OscConfig+0x378>
 80034c0:	2302      	movs	r3, #2
 80034c2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80034ca:	fa93 f3a3 	rbit	r3, r3
 80034ce:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80034d2:	2302      	movs	r3, #2
 80034d4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80034d8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80034dc:	fa93 f3a3 	rbit	r3, r3
 80034e0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80034e4:	4bb1      	ldr	r3, [pc, #708]	; (80037ac <HAL_RCC_OscConfig+0x63c>)
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	2202      	movs	r2, #2
 80034ea:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80034ee:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80034f2:	fa92 f2a2 	rbit	r2, r2
 80034f6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80034fa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80034fe:	fab2 f282 	clz	r2, r2
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	f042 0220 	orr.w	r2, r2, #32
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	f002 021f 	and.w	r2, r2, #31
 800350e:	2101      	movs	r1, #1
 8003510:	fa01 f202 	lsl.w	r2, r1, r2
 8003514:	4013      	ands	r3, r2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d007      	beq.n	800352a <HAL_RCC_OscConfig+0x3ba>
 800351a:	1d3b      	adds	r3, r7, #4
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d002      	beq.n	800352a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	f000 bd31 	b.w	8003f8c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352a:	4ba0      	ldr	r3, [pc, #640]	; (80037ac <HAL_RCC_OscConfig+0x63c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003532:	1d3b      	adds	r3, r7, #4
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	21f8      	movs	r1, #248	; 0xf8
 800353a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003542:	fa91 f1a1 	rbit	r1, r1
 8003546:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800354a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800354e:	fab1 f181 	clz	r1, r1
 8003552:	b2c9      	uxtb	r1, r1
 8003554:	408b      	lsls	r3, r1
 8003556:	4995      	ldr	r1, [pc, #596]	; (80037ac <HAL_RCC_OscConfig+0x63c>)
 8003558:	4313      	orrs	r3, r2
 800355a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355c:	e0f5      	b.n	800374a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800355e:	1d3b      	adds	r3, r7, #4
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8085 	beq.w	8003674 <HAL_RCC_OscConfig+0x504>
 800356a:	2301      	movs	r3, #1
 800356c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003570:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003574:	fa93 f3a3 	rbit	r3, r3
 8003578:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800357c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003580:	fab3 f383 	clz	r3, r3
 8003584:	b2db      	uxtb	r3, r3
 8003586:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800358a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	461a      	mov	r2, r3
 8003592:	2301      	movs	r3, #1
 8003594:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7fe f937 	bl	8001808 <HAL_GetTick>
 800359a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359e:	e00a      	b.n	80035b6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a0:	f7fe f932 	bl	8001808 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d902      	bls.n	80035b6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	f000 bceb 	b.w	8003f8c <HAL_RCC_OscConfig+0xe1c>
 80035b6:	2302      	movs	r3, #2
 80035b8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80035c0:	fa93 f3a3 	rbit	r3, r3
 80035c4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80035c8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035cc:	fab3 f383 	clz	r3, r3
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d102      	bne.n	80035e6 <HAL_RCC_OscConfig+0x476>
 80035e0:	4b72      	ldr	r3, [pc, #456]	; (80037ac <HAL_RCC_OscConfig+0x63c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	e013      	b.n	800360e <HAL_RCC_OscConfig+0x49e>
 80035e6:	2302      	movs	r3, #2
 80035e8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ec:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80035f0:	fa93 f3a3 	rbit	r3, r3
 80035f4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80035f8:	2302      	movs	r3, #2
 80035fa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80035fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800360a:	4b68      	ldr	r3, [pc, #416]	; (80037ac <HAL_RCC_OscConfig+0x63c>)
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	2202      	movs	r2, #2
 8003610:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003614:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003618:	fa92 f2a2 	rbit	r2, r2
 800361c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003620:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003624:	fab2 f282 	clz	r2, r2
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	f042 0220 	orr.w	r2, r2, #32
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	f002 021f 	and.w	r2, r2, #31
 8003634:	2101      	movs	r1, #1
 8003636:	fa01 f202 	lsl.w	r2, r1, r2
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0af      	beq.n	80035a0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003640:	4b5a      	ldr	r3, [pc, #360]	; (80037ac <HAL_RCC_OscConfig+0x63c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003648:	1d3b      	adds	r3, r7, #4
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	21f8      	movs	r1, #248	; 0xf8
 8003650:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003658:	fa91 f1a1 	rbit	r1, r1
 800365c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003660:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003664:	fab1 f181 	clz	r1, r1
 8003668:	b2c9      	uxtb	r1, r1
 800366a:	408b      	lsls	r3, r1
 800366c:	494f      	ldr	r1, [pc, #316]	; (80037ac <HAL_RCC_OscConfig+0x63c>)
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]
 8003672:	e06a      	b.n	800374a <HAL_RCC_OscConfig+0x5da>
 8003674:	2301      	movs	r3, #1
 8003676:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800367e:	fa93 f3a3 	rbit	r3, r3
 8003682:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003686:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	b2db      	uxtb	r3, r3
 8003690:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003694:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	461a      	mov	r2, r3
 800369c:	2300      	movs	r3, #0
 800369e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7fe f8b2 	bl	8001808 <HAL_GetTick>
 80036a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a8:	e00a      	b.n	80036c0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036aa:	f7fe f8ad 	bl	8001808 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d902      	bls.n	80036c0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	f000 bc66 	b.w	8003f8c <HAL_RCC_OscConfig+0xe1c>
 80036c0:	2302      	movs	r3, #2
 80036c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80036d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d102      	bne.n	80036f0 <HAL_RCC_OscConfig+0x580>
 80036ea:	4b30      	ldr	r3, [pc, #192]	; (80037ac <HAL_RCC_OscConfig+0x63c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	e013      	b.n	8003718 <HAL_RCC_OscConfig+0x5a8>
 80036f0:	2302      	movs	r3, #2
 80036f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036fa:	fa93 f3a3 	rbit	r3, r3
 80036fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003702:	2302      	movs	r3, #2
 8003704:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003708:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800370c:	fa93 f3a3 	rbit	r3, r3
 8003710:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003714:	4b25      	ldr	r3, [pc, #148]	; (80037ac <HAL_RCC_OscConfig+0x63c>)
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	2202      	movs	r2, #2
 800371a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800371e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003722:	fa92 f2a2 	rbit	r2, r2
 8003726:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800372a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800372e:	fab2 f282 	clz	r2, r2
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	f042 0220 	orr.w	r2, r2, #32
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	f002 021f 	and.w	r2, r2, #31
 800373e:	2101      	movs	r1, #1
 8003740:	fa01 f202 	lsl.w	r2, r1, r2
 8003744:	4013      	ands	r3, r2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1af      	bne.n	80036aa <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800374a:	1d3b      	adds	r3, r7, #4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80da 	beq.w	800390e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d069      	beq.n	8003838 <HAL_RCC_OscConfig+0x6c8>
 8003764:	2301      	movs	r3, #1
 8003766:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003776:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800377a:	fab3 f383 	clz	r3, r3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_RCC_OscConfig+0x640>)
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	461a      	mov	r2, r3
 800378a:	2301      	movs	r3, #1
 800378c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378e:	f7fe f83b 	bl	8001808 <HAL_GetTick>
 8003792:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003796:	e00d      	b.n	80037b4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003798:	f7fe f836 	bl	8001808 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d905      	bls.n	80037b4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e3ef      	b.n	8003f8c <HAL_RCC_OscConfig+0xe1c>
 80037ac:	40021000 	.word	0x40021000
 80037b0:	10908120 	.word	0x10908120
 80037b4:	2302      	movs	r3, #2
 80037b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037be:	fa93 f2a3 	rbit	r2, r3
 80037c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80037cc:	2202      	movs	r2, #2
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	fa93 f2a3 	rbit	r2, r3
 80037da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80037e4:	2202      	movs	r2, #2
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	fa93 f2a3 	rbit	r2, r3
 80037f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80037f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f8:	4ba4      	ldr	r3, [pc, #656]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 80037fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037fc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003800:	2102      	movs	r1, #2
 8003802:	6019      	str	r1, [r3, #0]
 8003804:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	fa93 f1a3 	rbit	r1, r3
 800380e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003812:	6019      	str	r1, [r3, #0]
  return result;
 8003814:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	fab3 f383 	clz	r3, r3
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003824:	b2db      	uxtb	r3, r3
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	2101      	movs	r1, #1
 800382c:	fa01 f303 	lsl.w	r3, r1, r3
 8003830:	4013      	ands	r3, r2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0b0      	beq.n	8003798 <HAL_RCC_OscConfig+0x628>
 8003836:	e06a      	b.n	800390e <HAL_RCC_OscConfig+0x79e>
 8003838:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	fa93 f2a3 	rbit	r2, r3
 800384a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800384e:	601a      	str	r2, [r3, #0]
  return result;
 8003850:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003854:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003856:	fab3 f383 	clz	r3, r3
 800385a:	b2db      	uxtb	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	4b8c      	ldr	r3, [pc, #560]	; (8003a90 <HAL_RCC_OscConfig+0x920>)
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	461a      	mov	r2, r3
 8003866:	2300      	movs	r3, #0
 8003868:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386a:	f7fd ffcd 	bl	8001808 <HAL_GetTick>
 800386e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003872:	e009      	b.n	8003888 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003874:	f7fd ffc8 	bl	8001808 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e381      	b.n	8003f8c <HAL_RCC_OscConfig+0xe1c>
 8003888:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800388c:	2202      	movs	r2, #2
 800388e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003890:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	fa93 f2a3 	rbit	r2, r3
 800389a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80038a4:	2202      	movs	r2, #2
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	fa93 f2a3 	rbit	r2, r3
 80038b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038bc:	2202      	movs	r2, #2
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	fa93 f2a3 	rbit	r2, r3
 80038ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80038ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d0:	4b6e      	ldr	r3, [pc, #440]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 80038d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80038d8:	2102      	movs	r1, #2
 80038da:	6019      	str	r1, [r3, #0]
 80038dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	fa93 f1a3 	rbit	r1, r3
 80038e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80038ea:	6019      	str	r1, [r3, #0]
  return result;
 80038ec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	f003 031f 	and.w	r3, r3, #31
 8003902:	2101      	movs	r1, #1
 8003904:	fa01 f303 	lsl.w	r3, r1, r3
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1b2      	bne.n	8003874 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800390e:	1d3b      	adds	r3, r7, #4
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 8157 	beq.w	8003bcc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800391e:	2300      	movs	r3, #0
 8003920:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003924:	4b59      	ldr	r3, [pc, #356]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d112      	bne.n	8003956 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003930:	4b56      	ldr	r3, [pc, #344]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	4a55      	ldr	r2, [pc, #340]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 8003936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393a:	61d3      	str	r3, [r2, #28]
 800393c:	4b53      	ldr	r3, [pc, #332]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003944:	f107 030c 	add.w	r3, r7, #12
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	f107 030c 	add.w	r3, r7, #12
 800394e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003950:	2301      	movs	r3, #1
 8003952:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003956:	4b4f      	ldr	r3, [pc, #316]	; (8003a94 <HAL_RCC_OscConfig+0x924>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d11a      	bne.n	8003998 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003962:	4b4c      	ldr	r3, [pc, #304]	; (8003a94 <HAL_RCC_OscConfig+0x924>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a4b      	ldr	r2, [pc, #300]	; (8003a94 <HAL_RCC_OscConfig+0x924>)
 8003968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396e:	f7fd ff4b 	bl	8001808 <HAL_GetTick>
 8003972:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003976:	e009      	b.n	800398c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003978:	f7fd ff46 	bl	8001808 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b64      	cmp	r3, #100	; 0x64
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e2ff      	b.n	8003f8c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398c:	4b41      	ldr	r3, [pc, #260]	; (8003a94 <HAL_RCC_OscConfig+0x924>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0ef      	beq.n	8003978 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003998:	1d3b      	adds	r3, r7, #4
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d106      	bne.n	80039b0 <HAL_RCC_OscConfig+0x840>
 80039a2:	4b3a      	ldr	r3, [pc, #232]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	4a39      	ldr	r2, [pc, #228]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	6213      	str	r3, [r2, #32]
 80039ae:	e02f      	b.n	8003a10 <HAL_RCC_OscConfig+0x8a0>
 80039b0:	1d3b      	adds	r3, r7, #4
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x864>
 80039ba:	4b34      	ldr	r3, [pc, #208]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	4a33      	ldr	r2, [pc, #204]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	6213      	str	r3, [r2, #32]
 80039c6:	4b31      	ldr	r3, [pc, #196]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	4a30      	ldr	r2, [pc, #192]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 80039cc:	f023 0304 	bic.w	r3, r3, #4
 80039d0:	6213      	str	r3, [r2, #32]
 80039d2:	e01d      	b.n	8003a10 <HAL_RCC_OscConfig+0x8a0>
 80039d4:	1d3b      	adds	r3, r7, #4
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b05      	cmp	r3, #5
 80039dc:	d10c      	bne.n	80039f8 <HAL_RCC_OscConfig+0x888>
 80039de:	4b2b      	ldr	r3, [pc, #172]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	4a2a      	ldr	r2, [pc, #168]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 80039e4:	f043 0304 	orr.w	r3, r3, #4
 80039e8:	6213      	str	r3, [r2, #32]
 80039ea:	4b28      	ldr	r3, [pc, #160]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	4a27      	ldr	r2, [pc, #156]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	6213      	str	r3, [r2, #32]
 80039f6:	e00b      	b.n	8003a10 <HAL_RCC_OscConfig+0x8a0>
 80039f8:	4b24      	ldr	r3, [pc, #144]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	4a23      	ldr	r2, [pc, #140]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 80039fe:	f023 0301 	bic.w	r3, r3, #1
 8003a02:	6213      	str	r3, [r2, #32]
 8003a04:	4b21      	ldr	r3, [pc, #132]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	4a20      	ldr	r2, [pc, #128]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 8003a0a:	f023 0304 	bic.w	r3, r3, #4
 8003a0e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a10:	1d3b      	adds	r3, r7, #4
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d06a      	beq.n	8003af0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1a:	f7fd fef5 	bl	8001808 <HAL_GetTick>
 8003a1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a22:	e00b      	b.n	8003a3c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a24:	f7fd fef0 	bl	8001808 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e2a7      	b.n	8003f8c <HAL_RCC_OscConfig+0xe1c>
 8003a3c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003a40:	2202      	movs	r2, #2
 8003a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	fa93 f2a3 	rbit	r2, r3
 8003a4e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003a58:	2202      	movs	r2, #2
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	fa93 f2a3 	rbit	r2, r3
 8003a66:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003a6a:	601a      	str	r2, [r3, #0]
  return result;
 8003a6c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003a70:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f043 0302 	orr.w	r3, r3, #2
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d108      	bne.n	8003a98 <HAL_RCC_OscConfig+0x928>
 8003a86:	4b01      	ldr	r3, [pc, #4]	; (8003a8c <HAL_RCC_OscConfig+0x91c>)
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	e013      	b.n	8003ab4 <HAL_RCC_OscConfig+0x944>
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	10908120 	.word	0x10908120
 8003a94:	40007000 	.word	0x40007000
 8003a98:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	fa93 f2a3 	rbit	r2, r3
 8003aaa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	4bc0      	ldr	r3, [pc, #768]	; (8003db4 <HAL_RCC_OscConfig+0xc44>)
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003ab8:	2102      	movs	r1, #2
 8003aba:	6011      	str	r1, [r2, #0]
 8003abc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003ac0:	6812      	ldr	r2, [r2, #0]
 8003ac2:	fa92 f1a2 	rbit	r1, r2
 8003ac6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003aca:	6011      	str	r1, [r2, #0]
  return result;
 8003acc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003ad0:	6812      	ldr	r2, [r2, #0]
 8003ad2:	fab2 f282 	clz	r2, r2
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	f002 021f 	and.w	r2, r2, #31
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d09a      	beq.n	8003a24 <HAL_RCC_OscConfig+0x8b4>
 8003aee:	e063      	b.n	8003bb8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af0:	f7fd fe8a 	bl	8001808 <HAL_GetTick>
 8003af4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af8:	e00b      	b.n	8003b12 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003afa:	f7fd fe85 	bl	8001808 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e23c      	b.n	8003f8c <HAL_RCC_OscConfig+0xe1c>
 8003b12:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003b16:	2202      	movs	r2, #2
 8003b18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	fa93 f2a3 	rbit	r2, r3
 8003b24:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003b2e:	2202      	movs	r2, #2
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	fa93 f2a3 	rbit	r2, r3
 8003b3c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003b40:	601a      	str	r2, [r3, #0]
  return result;
 8003b42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003b46:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b48:	fab3 f383 	clz	r3, r3
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f043 0302 	orr.w	r3, r3, #2
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d102      	bne.n	8003b62 <HAL_RCC_OscConfig+0x9f2>
 8003b5c:	4b95      	ldr	r3, [pc, #596]	; (8003db4 <HAL_RCC_OscConfig+0xc44>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	e00d      	b.n	8003b7e <HAL_RCC_OscConfig+0xa0e>
 8003b62:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003b66:	2202      	movs	r2, #2
 8003b68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	fa93 f2a3 	rbit	r2, r3
 8003b74:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	4b8e      	ldr	r3, [pc, #568]	; (8003db4 <HAL_RCC_OscConfig+0xc44>)
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003b82:	2102      	movs	r1, #2
 8003b84:	6011      	str	r1, [r2, #0]
 8003b86:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	fa92 f1a2 	rbit	r1, r2
 8003b90:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003b94:	6011      	str	r1, [r2, #0]
  return result;
 8003b96:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	fab2 f282 	clz	r2, r2
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	f002 021f 	and.w	r2, r2, #31
 8003bac:	2101      	movs	r1, #1
 8003bae:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1a0      	bne.n	8003afa <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bb8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d105      	bne.n	8003bcc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc0:	4b7c      	ldr	r3, [pc, #496]	; (8003db4 <HAL_RCC_OscConfig+0xc44>)
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	4a7b      	ldr	r2, [pc, #492]	; (8003db4 <HAL_RCC_OscConfig+0xc44>)
 8003bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bcc:	1d3b      	adds	r3, r7, #4
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 81d9 	beq.w	8003f8a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bd8:	4b76      	ldr	r3, [pc, #472]	; (8003db4 <HAL_RCC_OscConfig+0xc44>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 030c 	and.w	r3, r3, #12
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	f000 81a6 	beq.w	8003f32 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003be6:	1d3b      	adds	r3, r7, #4
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	f040 811e 	bne.w	8003e2e <HAL_RCC_OscConfig+0xcbe>
 8003bf2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003bf6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	fa93 f2a3 	rbit	r2, r3
 8003c06:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c0a:	601a      	str	r2, [r3, #0]
  return result;
 8003c0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c10:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c12:	fab3 f383 	clz	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	461a      	mov	r2, r3
 8003c24:	2300      	movs	r3, #0
 8003c26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7fd fdee 	bl	8001808 <HAL_GetTick>
 8003c2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c30:	e009      	b.n	8003c46 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c32:	f7fd fde9 	bl	8001808 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e1a2      	b.n	8003f8c <HAL_RCC_OscConfig+0xe1c>
 8003c46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c50:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	fa93 f2a3 	rbit	r2, r3
 8003c5a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003c5e:	601a      	str	r2, [r3, #0]
  return result;
 8003c60:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003c64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c66:	fab3 f383 	clz	r3, r3
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d102      	bne.n	8003c80 <HAL_RCC_OscConfig+0xb10>
 8003c7a:	4b4e      	ldr	r3, [pc, #312]	; (8003db4 <HAL_RCC_OscConfig+0xc44>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	e01b      	b.n	8003cb8 <HAL_RCC_OscConfig+0xb48>
 8003c80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003c84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	fa93 f2a3 	rbit	r2, r3
 8003c94:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003c9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	fa93 f2a3 	rbit	r2, r3
 8003cae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	4b3f      	ldr	r3, [pc, #252]	; (8003db4 <HAL_RCC_OscConfig+0xc44>)
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003cbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003cc0:	6011      	str	r1, [r2, #0]
 8003cc2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	fa92 f1a2 	rbit	r1, r2
 8003ccc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003cd0:	6011      	str	r1, [r2, #0]
  return result;
 8003cd2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	fab2 f282 	clz	r2, r2
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	f042 0220 	orr.w	r2, r2, #32
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	f002 021f 	and.w	r2, r2, #31
 8003ce8:	2101      	movs	r1, #1
 8003cea:	fa01 f202 	lsl.w	r2, r1, r2
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d19e      	bne.n	8003c32 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cf4:	4b2f      	ldr	r3, [pc, #188]	; (8003db4 <HAL_RCC_OscConfig+0xc44>)
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	f023 020f 	bic.w	r2, r3, #15
 8003cfc:	1d3b      	adds	r3, r7, #4
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	492c      	ldr	r1, [pc, #176]	; (8003db4 <HAL_RCC_OscConfig+0xc44>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003d08:	4b2a      	ldr	r3, [pc, #168]	; (8003db4 <HAL_RCC_OscConfig+0xc44>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003d10:	1d3b      	adds	r3, r7, #4
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6a19      	ldr	r1, [r3, #32]
 8003d16:	1d3b      	adds	r3, r7, #4
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	4925      	ldr	r1, [pc, #148]	; (8003db4 <HAL_RCC_OscConfig+0xc44>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
 8003d24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003d28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	fa93 f2a3 	rbit	r2, r3
 8003d38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d3c:	601a      	str	r2, [r3, #0]
  return result;
 8003d3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d42:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d44:	fab3 f383 	clz	r3, r3
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	461a      	mov	r2, r3
 8003d56:	2301      	movs	r3, #1
 8003d58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5a:	f7fd fd55 	bl	8001808 <HAL_GetTick>
 8003d5e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d62:	e009      	b.n	8003d78 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fd fd50 	bl	8001808 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e109      	b.n	8003f8c <HAL_RCC_OscConfig+0xe1c>
 8003d78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	fa93 f2a3 	rbit	r2, r3
 8003d8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d90:	601a      	str	r2, [r3, #0]
  return result;
 8003d92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d98:	fab3 f383 	clz	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d105      	bne.n	8003db8 <HAL_RCC_OscConfig+0xc48>
 8003dac:	4b01      	ldr	r3, [pc, #4]	; (8003db4 <HAL_RCC_OscConfig+0xc44>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	e01e      	b.n	8003df0 <HAL_RCC_OscConfig+0xc80>
 8003db2:	bf00      	nop
 8003db4:	40021000 	.word	0x40021000
 8003db8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	fa93 f2a3 	rbit	r2, r3
 8003dcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003dd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	fa93 f2a3 	rbit	r2, r3
 8003de6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	4b6a      	ldr	r3, [pc, #424]	; (8003f98 <HAL_RCC_OscConfig+0xe28>)
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003df4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003df8:	6011      	str	r1, [r2, #0]
 8003dfa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	fa92 f1a2 	rbit	r1, r2
 8003e04:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e08:	6011      	str	r1, [r2, #0]
  return result;
 8003e0a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	fab2 f282 	clz	r2, r2
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	f042 0220 	orr.w	r2, r2, #32
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	f002 021f 	and.w	r2, r2, #31
 8003e20:	2101      	movs	r1, #1
 8003e22:	fa01 f202 	lsl.w	r2, r1, r2
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d09b      	beq.n	8003d64 <HAL_RCC_OscConfig+0xbf4>
 8003e2c:	e0ad      	b.n	8003f8a <HAL_RCC_OscConfig+0xe1a>
 8003e2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	fa93 f2a3 	rbit	r2, r3
 8003e42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e46:	601a      	str	r2, [r3, #0]
  return result;
 8003e48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e4c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4e:	fab3 f383 	clz	r3, r3
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	461a      	mov	r2, r3
 8003e60:	2300      	movs	r3, #0
 8003e62:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e64:	f7fd fcd0 	bl	8001808 <HAL_GetTick>
 8003e68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e6c:	e009      	b.n	8003e82 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e6e:	f7fd fccb 	bl	8001808 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e084      	b.n	8003f8c <HAL_RCC_OscConfig+0xe1c>
 8003e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	fa93 f2a3 	rbit	r2, r3
 8003e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e9a:	601a      	str	r2, [r3, #0]
  return result;
 8003e9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ea0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea2:	fab3 f383 	clz	r3, r3
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d102      	bne.n	8003ebc <HAL_RCC_OscConfig+0xd4c>
 8003eb6:	4b38      	ldr	r3, [pc, #224]	; (8003f98 <HAL_RCC_OscConfig+0xe28>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	e01b      	b.n	8003ef4 <HAL_RCC_OscConfig+0xd84>
 8003ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ec0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	fa93 f2a3 	rbit	r2, r3
 8003ed0:	f107 0320 	add.w	r3, r7, #32
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	f107 031c 	add.w	r3, r7, #28
 8003eda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	f107 031c 	add.w	r3, r7, #28
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	fa93 f2a3 	rbit	r2, r3
 8003eea:	f107 0318 	add.w	r3, r7, #24
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	4b29      	ldr	r3, [pc, #164]	; (8003f98 <HAL_RCC_OscConfig+0xe28>)
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	f107 0214 	add.w	r2, r7, #20
 8003ef8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003efc:	6011      	str	r1, [r2, #0]
 8003efe:	f107 0214 	add.w	r2, r7, #20
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	fa92 f1a2 	rbit	r1, r2
 8003f08:	f107 0210 	add.w	r2, r7, #16
 8003f0c:	6011      	str	r1, [r2, #0]
  return result;
 8003f0e:	f107 0210 	add.w	r2, r7, #16
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	fab2 f282 	clz	r2, r2
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	f042 0220 	orr.w	r2, r2, #32
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	f002 021f 	and.w	r2, r2, #31
 8003f24:	2101      	movs	r1, #1
 8003f26:	fa01 f202 	lsl.w	r2, r1, r2
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d19e      	bne.n	8003e6e <HAL_RCC_OscConfig+0xcfe>
 8003f30:	e02b      	b.n	8003f8a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f32:	1d3b      	adds	r3, r7, #4
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e025      	b.n	8003f8c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f40:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <HAL_RCC_OscConfig+0xe28>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003f48:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <HAL_RCC_OscConfig+0xe28>)
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f54:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003f58:	1d3b      	adds	r3, r7, #4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d111      	bne.n	8003f86 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003f62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f6a:	1d3b      	adds	r3, r7, #4
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d108      	bne.n	8003f86 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003f74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f78:	f003 020f 	and.w	r2, r3, #15
 8003f7c:	1d3b      	adds	r3, r7, #4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d001      	beq.n	8003f8a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40021000 	.word	0x40021000

08003f9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b09e      	sub	sp, #120	; 0x78
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e162      	b.n	800427a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb4:	4b90      	ldr	r3, [pc, #576]	; (80041f8 <HAL_RCC_ClockConfig+0x25c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d910      	bls.n	8003fe4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc2:	4b8d      	ldr	r3, [pc, #564]	; (80041f8 <HAL_RCC_ClockConfig+0x25c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f023 0207 	bic.w	r2, r3, #7
 8003fca:	498b      	ldr	r1, [pc, #556]	; (80041f8 <HAL_RCC_ClockConfig+0x25c>)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd2:	4b89      	ldr	r3, [pc, #548]	; (80041f8 <HAL_RCC_ClockConfig+0x25c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e14a      	b.n	800427a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff0:	4b82      	ldr	r3, [pc, #520]	; (80041fc <HAL_RCC_ClockConfig+0x260>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	497f      	ldr	r1, [pc, #508]	; (80041fc <HAL_RCC_ClockConfig+0x260>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 80dc 	beq.w	80041c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d13c      	bne.n	8004092 <HAL_RCC_ClockConfig+0xf6>
 8004018:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800401c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004020:	fa93 f3a3 	rbit	r3, r3
 8004024:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004028:	fab3 f383 	clz	r3, r3
 800402c:	b2db      	uxtb	r3, r3
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d102      	bne.n	8004042 <HAL_RCC_ClockConfig+0xa6>
 800403c:	4b6f      	ldr	r3, [pc, #444]	; (80041fc <HAL_RCC_ClockConfig+0x260>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	e00f      	b.n	8004062 <HAL_RCC_ClockConfig+0xc6>
 8004042:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004046:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004048:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800404a:	fa93 f3a3 	rbit	r3, r3
 800404e:	667b      	str	r3, [r7, #100]	; 0x64
 8004050:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004054:	663b      	str	r3, [r7, #96]	; 0x60
 8004056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004058:	fa93 f3a3 	rbit	r3, r3
 800405c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800405e:	4b67      	ldr	r3, [pc, #412]	; (80041fc <HAL_RCC_ClockConfig+0x260>)
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004066:	65ba      	str	r2, [r7, #88]	; 0x58
 8004068:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800406a:	fa92 f2a2 	rbit	r2, r2
 800406e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004070:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004072:	fab2 f282 	clz	r2, r2
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	f042 0220 	orr.w	r2, r2, #32
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	f002 021f 	and.w	r2, r2, #31
 8004082:	2101      	movs	r1, #1
 8004084:	fa01 f202 	lsl.w	r2, r1, r2
 8004088:	4013      	ands	r3, r2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d17b      	bne.n	8004186 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e0f3      	b.n	800427a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d13c      	bne.n	8004114 <HAL_RCC_ClockConfig+0x178>
 800409a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800409e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a2:	fa93 f3a3 	rbit	r3, r3
 80040a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80040a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040aa:	fab3 f383 	clz	r3, r3
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	095b      	lsrs	r3, r3, #5
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d102      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x128>
 80040be:	4b4f      	ldr	r3, [pc, #316]	; (80041fc <HAL_RCC_ClockConfig+0x260>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	e00f      	b.n	80040e4 <HAL_RCC_ClockConfig+0x148>
 80040c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040cc:	fa93 f3a3 	rbit	r3, r3
 80040d0:	647b      	str	r3, [r7, #68]	; 0x44
 80040d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040d6:	643b      	str	r3, [r7, #64]	; 0x40
 80040d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040e0:	4b46      	ldr	r3, [pc, #280]	; (80041fc <HAL_RCC_ClockConfig+0x260>)
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80040ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040ec:	fa92 f2a2 	rbit	r2, r2
 80040f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80040f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040f4:	fab2 f282 	clz	r2, r2
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	f042 0220 	orr.w	r2, r2, #32
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	f002 021f 	and.w	r2, r2, #31
 8004104:	2101      	movs	r1, #1
 8004106:	fa01 f202 	lsl.w	r2, r1, r2
 800410a:	4013      	ands	r3, r2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d13a      	bne.n	8004186 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0b2      	b.n	800427a <HAL_RCC_ClockConfig+0x2de>
 8004114:	2302      	movs	r3, #2
 8004116:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	fa93 f3a3 	rbit	r3, r3
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004122:	fab3 f383 	clz	r3, r3
 8004126:	b2db      	uxtb	r3, r3
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	b2db      	uxtb	r3, r3
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b01      	cmp	r3, #1
 8004134:	d102      	bne.n	800413c <HAL_RCC_ClockConfig+0x1a0>
 8004136:	4b31      	ldr	r3, [pc, #196]	; (80041fc <HAL_RCC_ClockConfig+0x260>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	e00d      	b.n	8004158 <HAL_RCC_ClockConfig+0x1bc>
 800413c:	2302      	movs	r3, #2
 800413e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	fa93 f3a3 	rbit	r3, r3
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
 8004148:	2302      	movs	r3, #2
 800414a:	623b      	str	r3, [r7, #32]
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	fa93 f3a3 	rbit	r3, r3
 8004152:	61fb      	str	r3, [r7, #28]
 8004154:	4b29      	ldr	r3, [pc, #164]	; (80041fc <HAL_RCC_ClockConfig+0x260>)
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	2202      	movs	r2, #2
 800415a:	61ba      	str	r2, [r7, #24]
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	fa92 f2a2 	rbit	r2, r2
 8004162:	617a      	str	r2, [r7, #20]
  return result;
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	fab2 f282 	clz	r2, r2
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	f042 0220 	orr.w	r2, r2, #32
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	f002 021f 	and.w	r2, r2, #31
 8004176:	2101      	movs	r1, #1
 8004178:	fa01 f202 	lsl.w	r2, r1, r2
 800417c:	4013      	ands	r3, r2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e079      	b.n	800427a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004186:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <HAL_RCC_ClockConfig+0x260>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f023 0203 	bic.w	r2, r3, #3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	491a      	ldr	r1, [pc, #104]	; (80041fc <HAL_RCC_ClockConfig+0x260>)
 8004194:	4313      	orrs	r3, r2
 8004196:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004198:	f7fd fb36 	bl	8001808 <HAL_GetTick>
 800419c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	e00a      	b.n	80041b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a0:	f7fd fb32 	bl	8001808 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e061      	b.n	800427a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	4b11      	ldr	r3, [pc, #68]	; (80041fc <HAL_RCC_ClockConfig+0x260>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 020c 	and.w	r2, r3, #12
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d1eb      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <HAL_RCC_ClockConfig+0x25c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d214      	bcs.n	8004200 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d6:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <HAL_RCC_ClockConfig+0x25c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f023 0207 	bic.w	r2, r3, #7
 80041de:	4906      	ldr	r1, [pc, #24]	; (80041f8 <HAL_RCC_ClockConfig+0x25c>)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e6:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <HAL_RCC_ClockConfig+0x25c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d005      	beq.n	8004200 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e040      	b.n	800427a <HAL_RCC_ClockConfig+0x2de>
 80041f8:	40022000 	.word	0x40022000
 80041fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800420c:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <HAL_RCC_ClockConfig+0x2e8>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	491a      	ldr	r1, [pc, #104]	; (8004284 <HAL_RCC_ClockConfig+0x2e8>)
 800421a:	4313      	orrs	r3, r2
 800421c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800422a:	4b16      	ldr	r3, [pc, #88]	; (8004284 <HAL_RCC_ClockConfig+0x2e8>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4912      	ldr	r1, [pc, #72]	; (8004284 <HAL_RCC_ClockConfig+0x2e8>)
 800423a:	4313      	orrs	r3, r2
 800423c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800423e:	f000 f829 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 8004242:	4601      	mov	r1, r0
 8004244:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <HAL_RCC_ClockConfig+0x2e8>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800424c:	22f0      	movs	r2, #240	; 0xf0
 800424e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	fa92 f2a2 	rbit	r2, r2
 8004256:	60fa      	str	r2, [r7, #12]
  return result;
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	fab2 f282 	clz	r2, r2
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	40d3      	lsrs	r3, r2
 8004262:	4a09      	ldr	r2, [pc, #36]	; (8004288 <HAL_RCC_ClockConfig+0x2ec>)
 8004264:	5cd3      	ldrb	r3, [r2, r3]
 8004266:	fa21 f303 	lsr.w	r3, r1, r3
 800426a:	4a08      	ldr	r2, [pc, #32]	; (800428c <HAL_RCC_ClockConfig+0x2f0>)
 800426c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800426e:	4b08      	ldr	r3, [pc, #32]	; (8004290 <HAL_RCC_ClockConfig+0x2f4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f7fd fa84 	bl	8001780 <HAL_InitTick>
  
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3778      	adds	r7, #120	; 0x78
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40021000 	.word	0x40021000
 8004288:	08006370 	.word	0x08006370
 800428c:	20000000 	.word	0x20000000
 8004290:	20000004 	.word	0x20000004

08004294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004294:	b480      	push	{r7}
 8004296:	b08b      	sub	sp, #44	; 0x2c
 8004298:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	2300      	movs	r3, #0
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	2300      	movs	r3, #0
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80042ae:	4b2a      	ldr	r3, [pc, #168]	; (8004358 <HAL_RCC_GetSysClockFreq+0xc4>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d002      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x30>
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d003      	beq.n	80042ca <HAL_RCC_GetSysClockFreq+0x36>
 80042c2:	e03f      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042c4:	4b25      	ldr	r3, [pc, #148]	; (800435c <HAL_RCC_GetSysClockFreq+0xc8>)
 80042c6:	623b      	str	r3, [r7, #32]
      break;
 80042c8:	e03f      	b.n	800434a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80042d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80042d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	fa92 f2a2 	rbit	r2, r2
 80042dc:	607a      	str	r2, [r7, #4]
  return result;
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	fab2 f282 	clz	r2, r2
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	40d3      	lsrs	r3, r2
 80042e8:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <HAL_RCC_GetSysClockFreq+0xcc>)
 80042ea:	5cd3      	ldrb	r3, [r2, r3]
 80042ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80042ee:	4b1a      	ldr	r3, [pc, #104]	; (8004358 <HAL_RCC_GetSysClockFreq+0xc4>)
 80042f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	220f      	movs	r2, #15
 80042f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	fa92 f2a2 	rbit	r2, r2
 8004300:	60fa      	str	r2, [r7, #12]
  return result;
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	fab2 f282 	clz	r2, r2
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	40d3      	lsrs	r3, r2
 800430c:	4a15      	ldr	r2, [pc, #84]	; (8004364 <HAL_RCC_GetSysClockFreq+0xd0>)
 800430e:	5cd3      	ldrb	r3, [r2, r3]
 8004310:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800431c:	4a0f      	ldr	r2, [pc, #60]	; (800435c <HAL_RCC_GetSysClockFreq+0xc8>)
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	fbb2 f2f3 	udiv	r2, r2, r3
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
 800432c:	e007      	b.n	800433e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800432e:	4a0b      	ldr	r2, [pc, #44]	; (800435c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	fbb2 f2f3 	udiv	r2, r2, r3
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	fb02 f303 	mul.w	r3, r2, r3
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	623b      	str	r3, [r7, #32]
      break;
 8004342:	e002      	b.n	800434a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004346:	623b      	str	r3, [r7, #32]
      break;
 8004348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800434a:	6a3b      	ldr	r3, [r7, #32]
}
 800434c:	4618      	mov	r0, r3
 800434e:	372c      	adds	r7, #44	; 0x2c
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	40021000 	.word	0x40021000
 800435c:	007a1200 	.word	0x007a1200
 8004360:	08006388 	.word	0x08006388
 8004364:	08006398 	.word	0x08006398

08004368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800436c:	4b03      	ldr	r3, [pc, #12]	; (800437c <HAL_RCC_GetHCLKFreq+0x14>)
 800436e:	681b      	ldr	r3, [r3, #0]
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	20000000 	.word	0x20000000

08004380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004386:	f7ff ffef 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 800438a:	4601      	mov	r1, r0
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004394:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004398:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	fa92 f2a2 	rbit	r2, r2
 80043a0:	603a      	str	r2, [r7, #0]
  return result;
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	fab2 f282 	clz	r2, r2
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	40d3      	lsrs	r3, r2
 80043ac:	4a04      	ldr	r2, [pc, #16]	; (80043c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80043ae:	5cd3      	ldrb	r3, [r2, r3]
 80043b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40021000 	.word	0x40021000
 80043c0:	08006380 	.word	0x08006380

080043c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80043ca:	f7ff ffcd 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 80043ce:	4601      	mov	r1, r0
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80043d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80043dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	fa92 f2a2 	rbit	r2, r2
 80043e4:	603a      	str	r2, [r7, #0]
  return result;
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	fab2 f282 	clz	r2, r2
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	40d3      	lsrs	r3, r2
 80043f0:	4a04      	ldr	r2, [pc, #16]	; (8004404 <HAL_RCC_GetPCLK2Freq+0x40>)
 80043f2:	5cd3      	ldrb	r3, [r2, r3]
 80043f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80043f8:	4618      	mov	r0, r3
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40021000 	.word	0x40021000
 8004404:	08006380 	.word	0x08006380

08004408 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b092      	sub	sp, #72	; 0x48
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004418:	2300      	movs	r3, #0
 800441a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 80d4 	beq.w	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800442c:	4b4e      	ldr	r3, [pc, #312]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10e      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004438:	4b4b      	ldr	r3, [pc, #300]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	4a4a      	ldr	r2, [pc, #296]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800443e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004442:	61d3      	str	r3, [r2, #28]
 8004444:	4b48      	ldr	r3, [pc, #288]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004450:	2301      	movs	r3, #1
 8004452:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004456:	4b45      	ldr	r3, [pc, #276]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445e:	2b00      	cmp	r3, #0
 8004460:	d118      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004462:	4b42      	ldr	r3, [pc, #264]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a41      	ldr	r2, [pc, #260]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800446c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800446e:	f7fd f9cb 	bl	8001808 <HAL_GetTick>
 8004472:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004474:	e008      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004476:	f7fd f9c7 	bl	8001808 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b64      	cmp	r3, #100	; 0x64
 8004482:	d901      	bls.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e1d6      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004488:	4b38      	ldr	r3, [pc, #224]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0f0      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004494:	4b34      	ldr	r3, [pc, #208]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800449e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 8084 	beq.w	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d07c      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044b4:	4b2c      	ldr	r3, [pc, #176]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	fa93 f3a3 	rbit	r3, r3
 80044ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80044cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044ce:	fab3 f383 	clz	r3, r3
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	461a      	mov	r2, r3
 80044d6:	4b26      	ldr	r3, [pc, #152]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044d8:	4413      	add	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	461a      	mov	r2, r3
 80044de:	2301      	movs	r3, #1
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ea:	fa93 f3a3 	rbit	r3, r3
 80044ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80044f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044f2:	fab3 f383 	clz	r3, r3
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	4b1d      	ldr	r3, [pc, #116]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	461a      	mov	r2, r3
 8004502:	2300      	movs	r3, #0
 8004504:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004506:	4a18      	ldr	r2, [pc, #96]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800450a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800450c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d04b      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004516:	f7fd f977 	bl	8001808 <HAL_GetTick>
 800451a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451c:	e00a      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451e:	f7fd f973 	bl	8001808 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	f241 3288 	movw	r2, #5000	; 0x1388
 800452c:	4293      	cmp	r3, r2
 800452e:	d901      	bls.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e180      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004534:	2302      	movs	r3, #2
 8004536:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453a:	fa93 f3a3 	rbit	r3, r3
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
 8004540:	2302      	movs	r3, #2
 8004542:	623b      	str	r3, [r7, #32]
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	fa93 f3a3 	rbit	r3, r3
 800454a:	61fb      	str	r3, [r7, #28]
  return result;
 800454c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454e:	fab3 f383 	clz	r3, r3
 8004552:	b2db      	uxtb	r3, r3
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	b2db      	uxtb	r3, r3
 8004558:	f043 0302 	orr.w	r3, r3, #2
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d108      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004562:	4b01      	ldr	r3, [pc, #4]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	e00d      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004568:	40021000 	.word	0x40021000
 800456c:	40007000 	.word	0x40007000
 8004570:	10908100 	.word	0x10908100
 8004574:	2302      	movs	r3, #2
 8004576:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	fa93 f3a3 	rbit	r3, r3
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	4ba0      	ldr	r3, [pc, #640]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	2202      	movs	r2, #2
 8004586:	613a      	str	r2, [r7, #16]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	fa92 f2a2 	rbit	r2, r2
 800458e:	60fa      	str	r2, [r7, #12]
  return result;
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	fab2 f282 	clz	r2, r2
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	f002 021f 	and.w	r2, r2, #31
 80045a2:	2101      	movs	r1, #1
 80045a4:	fa01 f202 	lsl.w	r2, r1, r2
 80045a8:	4013      	ands	r3, r2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0b7      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80045ae:	4b95      	ldr	r3, [pc, #596]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	4992      	ldr	r1, [pc, #584]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d105      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c8:	4b8e      	ldr	r3, [pc, #568]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	4a8d      	ldr	r2, [pc, #564]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045e0:	4b88      	ldr	r3, [pc, #544]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	f023 0203 	bic.w	r2, r3, #3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4985      	ldr	r1, [pc, #532]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d008      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045fe:	4b81      	ldr	r3, [pc, #516]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	497e      	ldr	r1, [pc, #504]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800460c:	4313      	orrs	r3, r2
 800460e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d008      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800461c:	4b79      	ldr	r3, [pc, #484]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	4976      	ldr	r1, [pc, #472]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800462a:	4313      	orrs	r3, r2
 800462c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d008      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800463a:	4b72      	ldr	r3, [pc, #456]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	f023 0210 	bic.w	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	496f      	ldr	r1, [pc, #444]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004648:	4313      	orrs	r3, r2
 800464a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004658:	4b6a      	ldr	r3, [pc, #424]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004664:	4967      	ldr	r1, [pc, #412]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004666:	4313      	orrs	r3, r2
 8004668:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	d008      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004676:	4b63      	ldr	r3, [pc, #396]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	f023 0220 	bic.w	r2, r3, #32
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	4960      	ldr	r1, [pc, #384]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004684:	4313      	orrs	r3, r2
 8004686:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004694:	4b5b      	ldr	r3, [pc, #364]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	4958      	ldr	r1, [pc, #352]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046b2:	4b54      	ldr	r3, [pc, #336]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	4951      	ldr	r1, [pc, #324]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046d0:	4b4c      	ldr	r3, [pc, #304]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	4949      	ldr	r1, [pc, #292]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d008      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046ee:	4b45      	ldr	r3, [pc, #276]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	4942      	ldr	r1, [pc, #264]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800470c:	4b3d      	ldr	r3, [pc, #244]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	493a      	ldr	r1, [pc, #232]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800471a:	4313      	orrs	r3, r2
 800471c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004726:	2b00      	cmp	r3, #0
 8004728:	d008      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800472a:	4b36      	ldr	r3, [pc, #216]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	4933      	ldr	r1, [pc, #204]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004738:	4313      	orrs	r3, r2
 800473a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004748:	4b2e      	ldr	r3, [pc, #184]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004754:	492b      	ldr	r1, [pc, #172]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004756:	4313      	orrs	r3, r2
 8004758:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d008      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004766:	4b27      	ldr	r3, [pc, #156]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	4924      	ldr	r1, [pc, #144]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004774:	4313      	orrs	r3, r2
 8004776:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d008      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004784:	4b1f      	ldr	r3, [pc, #124]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	491c      	ldr	r1, [pc, #112]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004792:	4313      	orrs	r3, r2
 8004794:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d008      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80047a2:	4b18      	ldr	r3, [pc, #96]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	4915      	ldr	r1, [pc, #84]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80047c0:	4b10      	ldr	r3, [pc, #64]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047cc:	490d      	ldr	r1, [pc, #52]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d008      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80047de:	4b09      	ldr	r3, [pc, #36]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ea:	4906      	ldr	r1, [pc, #24]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00c      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80047fc:	4b01      	ldr	r3, [pc, #4]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	e002      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004802:	bf00      	nop
 8004804:	40021000 	.word	0x40021000
 8004808:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004810:	490b      	ldr	r1, [pc, #44]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004812:	4313      	orrs	r3, r2
 8004814:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d008      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004822:	4b07      	ldr	r3, [pc, #28]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482e:	4904      	ldr	r1, [pc, #16]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004830:	4313      	orrs	r3, r2
 8004832:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3748      	adds	r7, #72	; 0x48
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40021000 	.word	0x40021000

08004844 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e09d      	b.n	8004992 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	2b00      	cmp	r3, #0
 800485c:	d108      	bne.n	8004870 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004866:	d009      	beq.n	800487c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	61da      	str	r2, [r3, #28]
 800486e:	e005      	b.n	800487c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fc fcfc 	bl	8001294 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048bc:	d902      	bls.n	80048c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	e002      	b.n	80048ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80048d2:	d007      	beq.n	80048e4 <HAL_SPI_Init+0xa0>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048dc:	d002      	beq.n	80048e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004926:	ea42 0103 	orr.w	r1, r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	0c1b      	lsrs	r3, r3, #16
 8004940:	f003 0204 	and.w	r2, r3, #4
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	f003 0310 	and.w	r3, r3, #16
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004960:	ea42 0103 	orr.w	r1, r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69da      	ldr	r2, [r3, #28]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004980:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e040      	b.n	8004a2e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d106      	bne.n	80049c2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7fc fe3d 	bl	800163c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2224      	movs	r2, #36	; 0x24
 80049c6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0201 	bic.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f8c1 	bl	8004b60 <UART_SetConfig>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e022      	b.n	8004a2e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fa8b 	bl	8004f0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0201 	orr.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fb12 	bl	8005050 <UART_CheckIdleState>
 8004a2c:	4603      	mov	r3, r0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b08a      	sub	sp, #40	; 0x28
 8004a3a:	af02      	add	r7, sp, #8
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	603b      	str	r3, [r7, #0]
 8004a42:	4613      	mov	r3, r2
 8004a44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	f040 8082 	bne.w	8004b54 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_UART_Transmit+0x26>
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e07a      	b.n	8004b56 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_UART_Transmit+0x38>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e073      	b.n	8004b56 <HAL_UART_Transmit+0x120>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2221      	movs	r2, #33	; 0x21
 8004a82:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a84:	f7fc fec0 	bl	8001808 <HAL_GetTick>
 8004a88:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	88fa      	ldrh	r2, [r7, #6]
 8004a8e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	88fa      	ldrh	r2, [r7, #6]
 8004a96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa2:	d108      	bne.n	8004ab6 <HAL_UART_Transmit+0x80>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d104      	bne.n	8004ab6 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	61bb      	str	r3, [r7, #24]
 8004ab4:	e003      	b.n	8004abe <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004ac6:	e02d      	b.n	8004b24 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2180      	movs	r1, #128	; 0x80
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 fb05 	bl	80050e2 <UART_WaitOnFlagUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e039      	b.n	8004b56 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10b      	bne.n	8004b00 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	881a      	ldrh	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004af4:	b292      	uxth	r2, r2
 8004af6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	3302      	adds	r3, #2
 8004afc:	61bb      	str	r3, [r7, #24]
 8004afe:	e008      	b.n	8004b12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	781a      	ldrb	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	b292      	uxth	r2, r2
 8004b0a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1cb      	bne.n	8004ac8 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2200      	movs	r2, #0
 8004b38:	2140      	movs	r1, #64	; 0x40
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fad1 	bl	80050e2 <UART_WaitOnFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e005      	b.n	8004b56 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	e000      	b.n	8004b56 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004b54:	2302      	movs	r3, #2
  }
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3720      	adds	r7, #32
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	4bab      	ldr	r3, [pc, #684]	; (8004e38 <UART_SetConfig+0x2d8>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6812      	ldr	r2, [r2, #0]
 8004b92:	6979      	ldr	r1, [r7, #20]
 8004b94:	430b      	orrs	r3, r1
 8004b96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a99      	ldr	r2, [pc, #612]	; (8004e3c <UART_SetConfig+0x2dc>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d120      	bne.n	8004c1e <UART_SetConfig+0xbe>
 8004bdc:	4b98      	ldr	r3, [pc, #608]	; (8004e40 <UART_SetConfig+0x2e0>)
 8004bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be0:	f003 0303 	and.w	r3, r3, #3
 8004be4:	2b03      	cmp	r3, #3
 8004be6:	d817      	bhi.n	8004c18 <UART_SetConfig+0xb8>
 8004be8:	a201      	add	r2, pc, #4	; (adr r2, 8004bf0 <UART_SetConfig+0x90>)
 8004bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bee:	bf00      	nop
 8004bf0:	08004c01 	.word	0x08004c01
 8004bf4:	08004c0d 	.word	0x08004c0d
 8004bf8:	08004c13 	.word	0x08004c13
 8004bfc:	08004c07 	.word	0x08004c07
 8004c00:	2301      	movs	r3, #1
 8004c02:	77fb      	strb	r3, [r7, #31]
 8004c04:	e0b5      	b.n	8004d72 <UART_SetConfig+0x212>
 8004c06:	2302      	movs	r3, #2
 8004c08:	77fb      	strb	r3, [r7, #31]
 8004c0a:	e0b2      	b.n	8004d72 <UART_SetConfig+0x212>
 8004c0c:	2304      	movs	r3, #4
 8004c0e:	77fb      	strb	r3, [r7, #31]
 8004c10:	e0af      	b.n	8004d72 <UART_SetConfig+0x212>
 8004c12:	2308      	movs	r3, #8
 8004c14:	77fb      	strb	r3, [r7, #31]
 8004c16:	e0ac      	b.n	8004d72 <UART_SetConfig+0x212>
 8004c18:	2310      	movs	r3, #16
 8004c1a:	77fb      	strb	r3, [r7, #31]
 8004c1c:	e0a9      	b.n	8004d72 <UART_SetConfig+0x212>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a88      	ldr	r2, [pc, #544]	; (8004e44 <UART_SetConfig+0x2e4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d124      	bne.n	8004c72 <UART_SetConfig+0x112>
 8004c28:	4b85      	ldr	r3, [pc, #532]	; (8004e40 <UART_SetConfig+0x2e0>)
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c34:	d011      	beq.n	8004c5a <UART_SetConfig+0xfa>
 8004c36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c3a:	d817      	bhi.n	8004c6c <UART_SetConfig+0x10c>
 8004c3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c40:	d011      	beq.n	8004c66 <UART_SetConfig+0x106>
 8004c42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c46:	d811      	bhi.n	8004c6c <UART_SetConfig+0x10c>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <UART_SetConfig+0xf4>
 8004c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c50:	d006      	beq.n	8004c60 <UART_SetConfig+0x100>
 8004c52:	e00b      	b.n	8004c6c <UART_SetConfig+0x10c>
 8004c54:	2300      	movs	r3, #0
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	e08b      	b.n	8004d72 <UART_SetConfig+0x212>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	77fb      	strb	r3, [r7, #31]
 8004c5e:	e088      	b.n	8004d72 <UART_SetConfig+0x212>
 8004c60:	2304      	movs	r3, #4
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	e085      	b.n	8004d72 <UART_SetConfig+0x212>
 8004c66:	2308      	movs	r3, #8
 8004c68:	77fb      	strb	r3, [r7, #31]
 8004c6a:	e082      	b.n	8004d72 <UART_SetConfig+0x212>
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	77fb      	strb	r3, [r7, #31]
 8004c70:	e07f      	b.n	8004d72 <UART_SetConfig+0x212>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a74      	ldr	r2, [pc, #464]	; (8004e48 <UART_SetConfig+0x2e8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d124      	bne.n	8004cc6 <UART_SetConfig+0x166>
 8004c7c:	4b70      	ldr	r3, [pc, #448]	; (8004e40 <UART_SetConfig+0x2e0>)
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c80:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004c84:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c88:	d011      	beq.n	8004cae <UART_SetConfig+0x14e>
 8004c8a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c8e:	d817      	bhi.n	8004cc0 <UART_SetConfig+0x160>
 8004c90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c94:	d011      	beq.n	8004cba <UART_SetConfig+0x15a>
 8004c96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c9a:	d811      	bhi.n	8004cc0 <UART_SetConfig+0x160>
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <UART_SetConfig+0x148>
 8004ca0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ca4:	d006      	beq.n	8004cb4 <UART_SetConfig+0x154>
 8004ca6:	e00b      	b.n	8004cc0 <UART_SetConfig+0x160>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	77fb      	strb	r3, [r7, #31]
 8004cac:	e061      	b.n	8004d72 <UART_SetConfig+0x212>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	77fb      	strb	r3, [r7, #31]
 8004cb2:	e05e      	b.n	8004d72 <UART_SetConfig+0x212>
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	77fb      	strb	r3, [r7, #31]
 8004cb8:	e05b      	b.n	8004d72 <UART_SetConfig+0x212>
 8004cba:	2308      	movs	r3, #8
 8004cbc:	77fb      	strb	r3, [r7, #31]
 8004cbe:	e058      	b.n	8004d72 <UART_SetConfig+0x212>
 8004cc0:	2310      	movs	r3, #16
 8004cc2:	77fb      	strb	r3, [r7, #31]
 8004cc4:	e055      	b.n	8004d72 <UART_SetConfig+0x212>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a60      	ldr	r2, [pc, #384]	; (8004e4c <UART_SetConfig+0x2ec>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d124      	bne.n	8004d1a <UART_SetConfig+0x1ba>
 8004cd0:	4b5b      	ldr	r3, [pc, #364]	; (8004e40 <UART_SetConfig+0x2e0>)
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004cd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cdc:	d011      	beq.n	8004d02 <UART_SetConfig+0x1a2>
 8004cde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ce2:	d817      	bhi.n	8004d14 <UART_SetConfig+0x1b4>
 8004ce4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ce8:	d011      	beq.n	8004d0e <UART_SetConfig+0x1ae>
 8004cea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cee:	d811      	bhi.n	8004d14 <UART_SetConfig+0x1b4>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <UART_SetConfig+0x19c>
 8004cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cf8:	d006      	beq.n	8004d08 <UART_SetConfig+0x1a8>
 8004cfa:	e00b      	b.n	8004d14 <UART_SetConfig+0x1b4>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	77fb      	strb	r3, [r7, #31]
 8004d00:	e037      	b.n	8004d72 <UART_SetConfig+0x212>
 8004d02:	2302      	movs	r3, #2
 8004d04:	77fb      	strb	r3, [r7, #31]
 8004d06:	e034      	b.n	8004d72 <UART_SetConfig+0x212>
 8004d08:	2304      	movs	r3, #4
 8004d0a:	77fb      	strb	r3, [r7, #31]
 8004d0c:	e031      	b.n	8004d72 <UART_SetConfig+0x212>
 8004d0e:	2308      	movs	r3, #8
 8004d10:	77fb      	strb	r3, [r7, #31]
 8004d12:	e02e      	b.n	8004d72 <UART_SetConfig+0x212>
 8004d14:	2310      	movs	r3, #16
 8004d16:	77fb      	strb	r3, [r7, #31]
 8004d18:	e02b      	b.n	8004d72 <UART_SetConfig+0x212>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a4c      	ldr	r2, [pc, #304]	; (8004e50 <UART_SetConfig+0x2f0>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d124      	bne.n	8004d6e <UART_SetConfig+0x20e>
 8004d24:	4b46      	ldr	r3, [pc, #280]	; (8004e40 <UART_SetConfig+0x2e0>)
 8004d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d28:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004d2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d30:	d011      	beq.n	8004d56 <UART_SetConfig+0x1f6>
 8004d32:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d36:	d817      	bhi.n	8004d68 <UART_SetConfig+0x208>
 8004d38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d3c:	d011      	beq.n	8004d62 <UART_SetConfig+0x202>
 8004d3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d42:	d811      	bhi.n	8004d68 <UART_SetConfig+0x208>
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <UART_SetConfig+0x1f0>
 8004d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d4c:	d006      	beq.n	8004d5c <UART_SetConfig+0x1fc>
 8004d4e:	e00b      	b.n	8004d68 <UART_SetConfig+0x208>
 8004d50:	2300      	movs	r3, #0
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	e00d      	b.n	8004d72 <UART_SetConfig+0x212>
 8004d56:	2302      	movs	r3, #2
 8004d58:	77fb      	strb	r3, [r7, #31]
 8004d5a:	e00a      	b.n	8004d72 <UART_SetConfig+0x212>
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	77fb      	strb	r3, [r7, #31]
 8004d60:	e007      	b.n	8004d72 <UART_SetConfig+0x212>
 8004d62:	2308      	movs	r3, #8
 8004d64:	77fb      	strb	r3, [r7, #31]
 8004d66:	e004      	b.n	8004d72 <UART_SetConfig+0x212>
 8004d68:	2310      	movs	r3, #16
 8004d6a:	77fb      	strb	r3, [r7, #31]
 8004d6c:	e001      	b.n	8004d72 <UART_SetConfig+0x212>
 8004d6e:	2310      	movs	r3, #16
 8004d70:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d7a:	d16d      	bne.n	8004e58 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8004d7c:	7ffb      	ldrb	r3, [r7, #31]
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d827      	bhi.n	8004dd2 <UART_SetConfig+0x272>
 8004d82:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <UART_SetConfig+0x228>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004dad 	.word	0x08004dad
 8004d8c:	08004db5 	.word	0x08004db5
 8004d90:	08004dbd 	.word	0x08004dbd
 8004d94:	08004dd3 	.word	0x08004dd3
 8004d98:	08004dc3 	.word	0x08004dc3
 8004d9c:	08004dd3 	.word	0x08004dd3
 8004da0:	08004dd3 	.word	0x08004dd3
 8004da4:	08004dd3 	.word	0x08004dd3
 8004da8:	08004dcb 	.word	0x08004dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dac:	f7ff fae8 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 8004db0:	61b8      	str	r0, [r7, #24]
        break;
 8004db2:	e013      	b.n	8004ddc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004db4:	f7ff fb06 	bl	80043c4 <HAL_RCC_GetPCLK2Freq>
 8004db8:	61b8      	str	r0, [r7, #24]
        break;
 8004dba:	e00f      	b.n	8004ddc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dbc:	4b25      	ldr	r3, [pc, #148]	; (8004e54 <UART_SetConfig+0x2f4>)
 8004dbe:	61bb      	str	r3, [r7, #24]
        break;
 8004dc0:	e00c      	b.n	8004ddc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dc2:	f7ff fa67 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 8004dc6:	61b8      	str	r0, [r7, #24]
        break;
 8004dc8:	e008      	b.n	8004ddc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dce:	61bb      	str	r3, [r7, #24]
        break;
 8004dd0:	e004      	b.n	8004ddc <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	77bb      	strb	r3, [r7, #30]
        break;
 8004dda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 8086 	beq.w	8004ef0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	005a      	lsls	r2, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	085b      	lsrs	r3, r3, #1
 8004dee:	441a      	add	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2b0f      	cmp	r3, #15
 8004e00:	d916      	bls.n	8004e30 <UART_SetConfig+0x2d0>
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e08:	d212      	bcs.n	8004e30 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f023 030f 	bic.w	r3, r3, #15
 8004e12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	085b      	lsrs	r3, r3, #1
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	89fb      	ldrh	r3, [r7, #14]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	89fa      	ldrh	r2, [r7, #14]
 8004e2c:	60da      	str	r2, [r3, #12]
 8004e2e:	e05f      	b.n	8004ef0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	77bb      	strb	r3, [r7, #30]
 8004e34:	e05c      	b.n	8004ef0 <UART_SetConfig+0x390>
 8004e36:	bf00      	nop
 8004e38:	efff69f3 	.word	0xefff69f3
 8004e3c:	40013800 	.word	0x40013800
 8004e40:	40021000 	.word	0x40021000
 8004e44:	40004400 	.word	0x40004400
 8004e48:	40004800 	.word	0x40004800
 8004e4c:	40004c00 	.word	0x40004c00
 8004e50:	40005000 	.word	0x40005000
 8004e54:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e58:	7ffb      	ldrb	r3, [r7, #31]
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d827      	bhi.n	8004eae <UART_SetConfig+0x34e>
 8004e5e:	a201      	add	r2, pc, #4	; (adr r2, 8004e64 <UART_SetConfig+0x304>)
 8004e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e64:	08004e89 	.word	0x08004e89
 8004e68:	08004e91 	.word	0x08004e91
 8004e6c:	08004e99 	.word	0x08004e99
 8004e70:	08004eaf 	.word	0x08004eaf
 8004e74:	08004e9f 	.word	0x08004e9f
 8004e78:	08004eaf 	.word	0x08004eaf
 8004e7c:	08004eaf 	.word	0x08004eaf
 8004e80:	08004eaf 	.word	0x08004eaf
 8004e84:	08004ea7 	.word	0x08004ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e88:	f7ff fa7a 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 8004e8c:	61b8      	str	r0, [r7, #24]
        break;
 8004e8e:	e013      	b.n	8004eb8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e90:	f7ff fa98 	bl	80043c4 <HAL_RCC_GetPCLK2Freq>
 8004e94:	61b8      	str	r0, [r7, #24]
        break;
 8004e96:	e00f      	b.n	8004eb8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e98:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <UART_SetConfig+0x3a8>)
 8004e9a:	61bb      	str	r3, [r7, #24]
        break;
 8004e9c:	e00c      	b.n	8004eb8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e9e:	f7ff f9f9 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 8004ea2:	61b8      	str	r0, [r7, #24]
        break;
 8004ea4:	e008      	b.n	8004eb8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eaa:	61bb      	str	r3, [r7, #24]
        break;
 8004eac:	e004      	b.n	8004eb8 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	77bb      	strb	r3, [r7, #30]
        break;
 8004eb6:	bf00      	nop
    }

    if (pclk != 0U)
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d018      	beq.n	8004ef0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	085a      	lsrs	r2, r3, #1
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	441a      	add	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b0f      	cmp	r3, #15
 8004ed8:	d908      	bls.n	8004eec <UART_SetConfig+0x38c>
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee0:	d204      	bcs.n	8004eec <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	60da      	str	r2, [r3, #12]
 8004eea:	e001      	b.n	8004ef0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004efc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3720      	adds	r7, #32
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	007a1200 	.word	0x007a1200

08004f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	f003 0310 	and.w	r3, r3, #16
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01a      	beq.n	8005022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800500a:	d10a      	bne.n	8005022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	605a      	str	r2, [r3, #4]
  }
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af02      	add	r7, sp, #8
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005060:	f7fc fbd2 	bl	8001808 <HAL_GetTick>
 8005064:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b08      	cmp	r3, #8
 8005072:	d10e      	bne.n	8005092 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005074:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f82d 	bl	80050e2 <UART_WaitOnFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e023      	b.n	80050da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b04      	cmp	r3, #4
 800509e:	d10e      	bne.n	80050be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f817 	bl	80050e2 <UART_WaitOnFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e00d      	b.n	80050da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	603b      	str	r3, [r7, #0]
 80050ee:	4613      	mov	r3, r2
 80050f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f2:	e05e      	b.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050fa:	d05a      	beq.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fc:	f7fc fb84 	bl	8001808 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	429a      	cmp	r2, r3
 800510a:	d302      	bcc.n	8005112 <UART_WaitOnFlagUntilTimeout+0x30>
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d11b      	bne.n	800514a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005120:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0201 	bic.w	r2, r2, #1
 8005130:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2220      	movs	r2, #32
 8005136:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e043      	b.n	80051d2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d02c      	beq.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005166:	d124      	bne.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005170:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005180:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0201 	bic.w	r2, r2, #1
 8005190:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e00f      	b.n	80051d2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69da      	ldr	r2, [r3, #28]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4013      	ands	r3, r2
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	429a      	cmp	r2, r3
 80051c0:	bf0c      	ite	eq
 80051c2:	2301      	moveq	r3, #1
 80051c4:	2300      	movne	r3, #0
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	461a      	mov	r2, r3
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d091      	beq.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <__errno>:
 80051dc:	4b01      	ldr	r3, [pc, #4]	; (80051e4 <__errno+0x8>)
 80051de:	6818      	ldr	r0, [r3, #0]
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	2000000c 	.word	0x2000000c

080051e8 <__libc_init_array>:
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	4d0d      	ldr	r5, [pc, #52]	; (8005220 <__libc_init_array+0x38>)
 80051ec:	4c0d      	ldr	r4, [pc, #52]	; (8005224 <__libc_init_array+0x3c>)
 80051ee:	1b64      	subs	r4, r4, r5
 80051f0:	10a4      	asrs	r4, r4, #2
 80051f2:	2600      	movs	r6, #0
 80051f4:	42a6      	cmp	r6, r4
 80051f6:	d109      	bne.n	800520c <__libc_init_array+0x24>
 80051f8:	4d0b      	ldr	r5, [pc, #44]	; (8005228 <__libc_init_array+0x40>)
 80051fa:	4c0c      	ldr	r4, [pc, #48]	; (800522c <__libc_init_array+0x44>)
 80051fc:	f000 ffec 	bl	80061d8 <_init>
 8005200:	1b64      	subs	r4, r4, r5
 8005202:	10a4      	asrs	r4, r4, #2
 8005204:	2600      	movs	r6, #0
 8005206:	42a6      	cmp	r6, r4
 8005208:	d105      	bne.n	8005216 <__libc_init_array+0x2e>
 800520a:	bd70      	pop	{r4, r5, r6, pc}
 800520c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005210:	4798      	blx	r3
 8005212:	3601      	adds	r6, #1
 8005214:	e7ee      	b.n	80051f4 <__libc_init_array+0xc>
 8005216:	f855 3b04 	ldr.w	r3, [r5], #4
 800521a:	4798      	blx	r3
 800521c:	3601      	adds	r6, #1
 800521e:	e7f2      	b.n	8005206 <__libc_init_array+0x1e>
 8005220:	08006440 	.word	0x08006440
 8005224:	08006440 	.word	0x08006440
 8005228:	08006440 	.word	0x08006440
 800522c:	08006444 	.word	0x08006444

08005230 <memset>:
 8005230:	4402      	add	r2, r0
 8005232:	4603      	mov	r3, r0
 8005234:	4293      	cmp	r3, r2
 8005236:	d100      	bne.n	800523a <memset+0xa>
 8005238:	4770      	bx	lr
 800523a:	f803 1b01 	strb.w	r1, [r3], #1
 800523e:	e7f9      	b.n	8005234 <memset+0x4>

08005240 <iprintf>:
 8005240:	b40f      	push	{r0, r1, r2, r3}
 8005242:	4b0a      	ldr	r3, [pc, #40]	; (800526c <iprintf+0x2c>)
 8005244:	b513      	push	{r0, r1, r4, lr}
 8005246:	681c      	ldr	r4, [r3, #0]
 8005248:	b124      	cbz	r4, 8005254 <iprintf+0x14>
 800524a:	69a3      	ldr	r3, [r4, #24]
 800524c:	b913      	cbnz	r3, 8005254 <iprintf+0x14>
 800524e:	4620      	mov	r0, r4
 8005250:	f000 fa5e 	bl	8005710 <__sinit>
 8005254:	ab05      	add	r3, sp, #20
 8005256:	9a04      	ldr	r2, [sp, #16]
 8005258:	68a1      	ldr	r1, [r4, #8]
 800525a:	9301      	str	r3, [sp, #4]
 800525c:	4620      	mov	r0, r4
 800525e:	f000 fc2f 	bl	8005ac0 <_vfiprintf_r>
 8005262:	b002      	add	sp, #8
 8005264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005268:	b004      	add	sp, #16
 800526a:	4770      	bx	lr
 800526c:	2000000c 	.word	0x2000000c

08005270 <_puts_r>:
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	460e      	mov	r6, r1
 8005274:	4605      	mov	r5, r0
 8005276:	b118      	cbz	r0, 8005280 <_puts_r+0x10>
 8005278:	6983      	ldr	r3, [r0, #24]
 800527a:	b90b      	cbnz	r3, 8005280 <_puts_r+0x10>
 800527c:	f000 fa48 	bl	8005710 <__sinit>
 8005280:	69ab      	ldr	r3, [r5, #24]
 8005282:	68ac      	ldr	r4, [r5, #8]
 8005284:	b913      	cbnz	r3, 800528c <_puts_r+0x1c>
 8005286:	4628      	mov	r0, r5
 8005288:	f000 fa42 	bl	8005710 <__sinit>
 800528c:	4b2c      	ldr	r3, [pc, #176]	; (8005340 <_puts_r+0xd0>)
 800528e:	429c      	cmp	r4, r3
 8005290:	d120      	bne.n	80052d4 <_puts_r+0x64>
 8005292:	686c      	ldr	r4, [r5, #4]
 8005294:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005296:	07db      	lsls	r3, r3, #31
 8005298:	d405      	bmi.n	80052a6 <_puts_r+0x36>
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	0598      	lsls	r0, r3, #22
 800529e:	d402      	bmi.n	80052a6 <_puts_r+0x36>
 80052a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052a2:	f000 fad3 	bl	800584c <__retarget_lock_acquire_recursive>
 80052a6:	89a3      	ldrh	r3, [r4, #12]
 80052a8:	0719      	lsls	r1, r3, #28
 80052aa:	d51d      	bpl.n	80052e8 <_puts_r+0x78>
 80052ac:	6923      	ldr	r3, [r4, #16]
 80052ae:	b1db      	cbz	r3, 80052e8 <_puts_r+0x78>
 80052b0:	3e01      	subs	r6, #1
 80052b2:	68a3      	ldr	r3, [r4, #8]
 80052b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052b8:	3b01      	subs	r3, #1
 80052ba:	60a3      	str	r3, [r4, #8]
 80052bc:	bb39      	cbnz	r1, 800530e <_puts_r+0x9e>
 80052be:	2b00      	cmp	r3, #0
 80052c0:	da38      	bge.n	8005334 <_puts_r+0xc4>
 80052c2:	4622      	mov	r2, r4
 80052c4:	210a      	movs	r1, #10
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 f848 	bl	800535c <__swbuf_r>
 80052cc:	3001      	adds	r0, #1
 80052ce:	d011      	beq.n	80052f4 <_puts_r+0x84>
 80052d0:	250a      	movs	r5, #10
 80052d2:	e011      	b.n	80052f8 <_puts_r+0x88>
 80052d4:	4b1b      	ldr	r3, [pc, #108]	; (8005344 <_puts_r+0xd4>)
 80052d6:	429c      	cmp	r4, r3
 80052d8:	d101      	bne.n	80052de <_puts_r+0x6e>
 80052da:	68ac      	ldr	r4, [r5, #8]
 80052dc:	e7da      	b.n	8005294 <_puts_r+0x24>
 80052de:	4b1a      	ldr	r3, [pc, #104]	; (8005348 <_puts_r+0xd8>)
 80052e0:	429c      	cmp	r4, r3
 80052e2:	bf08      	it	eq
 80052e4:	68ec      	ldreq	r4, [r5, #12]
 80052e6:	e7d5      	b.n	8005294 <_puts_r+0x24>
 80052e8:	4621      	mov	r1, r4
 80052ea:	4628      	mov	r0, r5
 80052ec:	f000 f888 	bl	8005400 <__swsetup_r>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	d0dd      	beq.n	80052b0 <_puts_r+0x40>
 80052f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80052f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052fa:	07da      	lsls	r2, r3, #31
 80052fc:	d405      	bmi.n	800530a <_puts_r+0x9a>
 80052fe:	89a3      	ldrh	r3, [r4, #12]
 8005300:	059b      	lsls	r3, r3, #22
 8005302:	d402      	bmi.n	800530a <_puts_r+0x9a>
 8005304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005306:	f000 faa2 	bl	800584e <__retarget_lock_release_recursive>
 800530a:	4628      	mov	r0, r5
 800530c:	bd70      	pop	{r4, r5, r6, pc}
 800530e:	2b00      	cmp	r3, #0
 8005310:	da04      	bge.n	800531c <_puts_r+0xac>
 8005312:	69a2      	ldr	r2, [r4, #24]
 8005314:	429a      	cmp	r2, r3
 8005316:	dc06      	bgt.n	8005326 <_puts_r+0xb6>
 8005318:	290a      	cmp	r1, #10
 800531a:	d004      	beq.n	8005326 <_puts_r+0xb6>
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	6022      	str	r2, [r4, #0]
 8005322:	7019      	strb	r1, [r3, #0]
 8005324:	e7c5      	b.n	80052b2 <_puts_r+0x42>
 8005326:	4622      	mov	r2, r4
 8005328:	4628      	mov	r0, r5
 800532a:	f000 f817 	bl	800535c <__swbuf_r>
 800532e:	3001      	adds	r0, #1
 8005330:	d1bf      	bne.n	80052b2 <_puts_r+0x42>
 8005332:	e7df      	b.n	80052f4 <_puts_r+0x84>
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	250a      	movs	r5, #10
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	6022      	str	r2, [r4, #0]
 800533c:	701d      	strb	r5, [r3, #0]
 800533e:	e7db      	b.n	80052f8 <_puts_r+0x88>
 8005340:	080063cc 	.word	0x080063cc
 8005344:	080063ec 	.word	0x080063ec
 8005348:	080063ac 	.word	0x080063ac

0800534c <puts>:
 800534c:	4b02      	ldr	r3, [pc, #8]	; (8005358 <puts+0xc>)
 800534e:	4601      	mov	r1, r0
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	f7ff bf8d 	b.w	8005270 <_puts_r>
 8005356:	bf00      	nop
 8005358:	2000000c 	.word	0x2000000c

0800535c <__swbuf_r>:
 800535c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535e:	460e      	mov	r6, r1
 8005360:	4614      	mov	r4, r2
 8005362:	4605      	mov	r5, r0
 8005364:	b118      	cbz	r0, 800536e <__swbuf_r+0x12>
 8005366:	6983      	ldr	r3, [r0, #24]
 8005368:	b90b      	cbnz	r3, 800536e <__swbuf_r+0x12>
 800536a:	f000 f9d1 	bl	8005710 <__sinit>
 800536e:	4b21      	ldr	r3, [pc, #132]	; (80053f4 <__swbuf_r+0x98>)
 8005370:	429c      	cmp	r4, r3
 8005372:	d12b      	bne.n	80053cc <__swbuf_r+0x70>
 8005374:	686c      	ldr	r4, [r5, #4]
 8005376:	69a3      	ldr	r3, [r4, #24]
 8005378:	60a3      	str	r3, [r4, #8]
 800537a:	89a3      	ldrh	r3, [r4, #12]
 800537c:	071a      	lsls	r2, r3, #28
 800537e:	d52f      	bpl.n	80053e0 <__swbuf_r+0x84>
 8005380:	6923      	ldr	r3, [r4, #16]
 8005382:	b36b      	cbz	r3, 80053e0 <__swbuf_r+0x84>
 8005384:	6923      	ldr	r3, [r4, #16]
 8005386:	6820      	ldr	r0, [r4, #0]
 8005388:	1ac0      	subs	r0, r0, r3
 800538a:	6963      	ldr	r3, [r4, #20]
 800538c:	b2f6      	uxtb	r6, r6
 800538e:	4283      	cmp	r3, r0
 8005390:	4637      	mov	r7, r6
 8005392:	dc04      	bgt.n	800539e <__swbuf_r+0x42>
 8005394:	4621      	mov	r1, r4
 8005396:	4628      	mov	r0, r5
 8005398:	f000 f926 	bl	80055e8 <_fflush_r>
 800539c:	bb30      	cbnz	r0, 80053ec <__swbuf_r+0x90>
 800539e:	68a3      	ldr	r3, [r4, #8]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	60a3      	str	r3, [r4, #8]
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	6022      	str	r2, [r4, #0]
 80053aa:	701e      	strb	r6, [r3, #0]
 80053ac:	6963      	ldr	r3, [r4, #20]
 80053ae:	3001      	adds	r0, #1
 80053b0:	4283      	cmp	r3, r0
 80053b2:	d004      	beq.n	80053be <__swbuf_r+0x62>
 80053b4:	89a3      	ldrh	r3, [r4, #12]
 80053b6:	07db      	lsls	r3, r3, #31
 80053b8:	d506      	bpl.n	80053c8 <__swbuf_r+0x6c>
 80053ba:	2e0a      	cmp	r6, #10
 80053bc:	d104      	bne.n	80053c8 <__swbuf_r+0x6c>
 80053be:	4621      	mov	r1, r4
 80053c0:	4628      	mov	r0, r5
 80053c2:	f000 f911 	bl	80055e8 <_fflush_r>
 80053c6:	b988      	cbnz	r0, 80053ec <__swbuf_r+0x90>
 80053c8:	4638      	mov	r0, r7
 80053ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053cc:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <__swbuf_r+0x9c>)
 80053ce:	429c      	cmp	r4, r3
 80053d0:	d101      	bne.n	80053d6 <__swbuf_r+0x7a>
 80053d2:	68ac      	ldr	r4, [r5, #8]
 80053d4:	e7cf      	b.n	8005376 <__swbuf_r+0x1a>
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <__swbuf_r+0xa0>)
 80053d8:	429c      	cmp	r4, r3
 80053da:	bf08      	it	eq
 80053dc:	68ec      	ldreq	r4, [r5, #12]
 80053de:	e7ca      	b.n	8005376 <__swbuf_r+0x1a>
 80053e0:	4621      	mov	r1, r4
 80053e2:	4628      	mov	r0, r5
 80053e4:	f000 f80c 	bl	8005400 <__swsetup_r>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d0cb      	beq.n	8005384 <__swbuf_r+0x28>
 80053ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80053f0:	e7ea      	b.n	80053c8 <__swbuf_r+0x6c>
 80053f2:	bf00      	nop
 80053f4:	080063cc 	.word	0x080063cc
 80053f8:	080063ec 	.word	0x080063ec
 80053fc:	080063ac 	.word	0x080063ac

08005400 <__swsetup_r>:
 8005400:	4b32      	ldr	r3, [pc, #200]	; (80054cc <__swsetup_r+0xcc>)
 8005402:	b570      	push	{r4, r5, r6, lr}
 8005404:	681d      	ldr	r5, [r3, #0]
 8005406:	4606      	mov	r6, r0
 8005408:	460c      	mov	r4, r1
 800540a:	b125      	cbz	r5, 8005416 <__swsetup_r+0x16>
 800540c:	69ab      	ldr	r3, [r5, #24]
 800540e:	b913      	cbnz	r3, 8005416 <__swsetup_r+0x16>
 8005410:	4628      	mov	r0, r5
 8005412:	f000 f97d 	bl	8005710 <__sinit>
 8005416:	4b2e      	ldr	r3, [pc, #184]	; (80054d0 <__swsetup_r+0xd0>)
 8005418:	429c      	cmp	r4, r3
 800541a:	d10f      	bne.n	800543c <__swsetup_r+0x3c>
 800541c:	686c      	ldr	r4, [r5, #4]
 800541e:	89a3      	ldrh	r3, [r4, #12]
 8005420:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005424:	0719      	lsls	r1, r3, #28
 8005426:	d42c      	bmi.n	8005482 <__swsetup_r+0x82>
 8005428:	06dd      	lsls	r5, r3, #27
 800542a:	d411      	bmi.n	8005450 <__swsetup_r+0x50>
 800542c:	2309      	movs	r3, #9
 800542e:	6033      	str	r3, [r6, #0]
 8005430:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005434:	81a3      	strh	r3, [r4, #12]
 8005436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800543a:	e03e      	b.n	80054ba <__swsetup_r+0xba>
 800543c:	4b25      	ldr	r3, [pc, #148]	; (80054d4 <__swsetup_r+0xd4>)
 800543e:	429c      	cmp	r4, r3
 8005440:	d101      	bne.n	8005446 <__swsetup_r+0x46>
 8005442:	68ac      	ldr	r4, [r5, #8]
 8005444:	e7eb      	b.n	800541e <__swsetup_r+0x1e>
 8005446:	4b24      	ldr	r3, [pc, #144]	; (80054d8 <__swsetup_r+0xd8>)
 8005448:	429c      	cmp	r4, r3
 800544a:	bf08      	it	eq
 800544c:	68ec      	ldreq	r4, [r5, #12]
 800544e:	e7e6      	b.n	800541e <__swsetup_r+0x1e>
 8005450:	0758      	lsls	r0, r3, #29
 8005452:	d512      	bpl.n	800547a <__swsetup_r+0x7a>
 8005454:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005456:	b141      	cbz	r1, 800546a <__swsetup_r+0x6a>
 8005458:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800545c:	4299      	cmp	r1, r3
 800545e:	d002      	beq.n	8005466 <__swsetup_r+0x66>
 8005460:	4630      	mov	r0, r6
 8005462:	f000 fa59 	bl	8005918 <_free_r>
 8005466:	2300      	movs	r3, #0
 8005468:	6363      	str	r3, [r4, #52]	; 0x34
 800546a:	89a3      	ldrh	r3, [r4, #12]
 800546c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005470:	81a3      	strh	r3, [r4, #12]
 8005472:	2300      	movs	r3, #0
 8005474:	6063      	str	r3, [r4, #4]
 8005476:	6923      	ldr	r3, [r4, #16]
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	89a3      	ldrh	r3, [r4, #12]
 800547c:	f043 0308 	orr.w	r3, r3, #8
 8005480:	81a3      	strh	r3, [r4, #12]
 8005482:	6923      	ldr	r3, [r4, #16]
 8005484:	b94b      	cbnz	r3, 800549a <__swsetup_r+0x9a>
 8005486:	89a3      	ldrh	r3, [r4, #12]
 8005488:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800548c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005490:	d003      	beq.n	800549a <__swsetup_r+0x9a>
 8005492:	4621      	mov	r1, r4
 8005494:	4630      	mov	r0, r6
 8005496:	f000 f9ff 	bl	8005898 <__smakebuf_r>
 800549a:	89a0      	ldrh	r0, [r4, #12]
 800549c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054a0:	f010 0301 	ands.w	r3, r0, #1
 80054a4:	d00a      	beq.n	80054bc <__swsetup_r+0xbc>
 80054a6:	2300      	movs	r3, #0
 80054a8:	60a3      	str	r3, [r4, #8]
 80054aa:	6963      	ldr	r3, [r4, #20]
 80054ac:	425b      	negs	r3, r3
 80054ae:	61a3      	str	r3, [r4, #24]
 80054b0:	6923      	ldr	r3, [r4, #16]
 80054b2:	b943      	cbnz	r3, 80054c6 <__swsetup_r+0xc6>
 80054b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054b8:	d1ba      	bne.n	8005430 <__swsetup_r+0x30>
 80054ba:	bd70      	pop	{r4, r5, r6, pc}
 80054bc:	0781      	lsls	r1, r0, #30
 80054be:	bf58      	it	pl
 80054c0:	6963      	ldrpl	r3, [r4, #20]
 80054c2:	60a3      	str	r3, [r4, #8]
 80054c4:	e7f4      	b.n	80054b0 <__swsetup_r+0xb0>
 80054c6:	2000      	movs	r0, #0
 80054c8:	e7f7      	b.n	80054ba <__swsetup_r+0xba>
 80054ca:	bf00      	nop
 80054cc:	2000000c 	.word	0x2000000c
 80054d0:	080063cc 	.word	0x080063cc
 80054d4:	080063ec 	.word	0x080063ec
 80054d8:	080063ac 	.word	0x080063ac

080054dc <__sflush_r>:
 80054dc:	898a      	ldrh	r2, [r1, #12]
 80054de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e2:	4605      	mov	r5, r0
 80054e4:	0710      	lsls	r0, r2, #28
 80054e6:	460c      	mov	r4, r1
 80054e8:	d458      	bmi.n	800559c <__sflush_r+0xc0>
 80054ea:	684b      	ldr	r3, [r1, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	dc05      	bgt.n	80054fc <__sflush_r+0x20>
 80054f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	dc02      	bgt.n	80054fc <__sflush_r+0x20>
 80054f6:	2000      	movs	r0, #0
 80054f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054fe:	2e00      	cmp	r6, #0
 8005500:	d0f9      	beq.n	80054f6 <__sflush_r+0x1a>
 8005502:	2300      	movs	r3, #0
 8005504:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005508:	682f      	ldr	r7, [r5, #0]
 800550a:	602b      	str	r3, [r5, #0]
 800550c:	d032      	beq.n	8005574 <__sflush_r+0x98>
 800550e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	075a      	lsls	r2, r3, #29
 8005514:	d505      	bpl.n	8005522 <__sflush_r+0x46>
 8005516:	6863      	ldr	r3, [r4, #4]
 8005518:	1ac0      	subs	r0, r0, r3
 800551a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800551c:	b10b      	cbz	r3, 8005522 <__sflush_r+0x46>
 800551e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005520:	1ac0      	subs	r0, r0, r3
 8005522:	2300      	movs	r3, #0
 8005524:	4602      	mov	r2, r0
 8005526:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005528:	6a21      	ldr	r1, [r4, #32]
 800552a:	4628      	mov	r0, r5
 800552c:	47b0      	blx	r6
 800552e:	1c43      	adds	r3, r0, #1
 8005530:	89a3      	ldrh	r3, [r4, #12]
 8005532:	d106      	bne.n	8005542 <__sflush_r+0x66>
 8005534:	6829      	ldr	r1, [r5, #0]
 8005536:	291d      	cmp	r1, #29
 8005538:	d82c      	bhi.n	8005594 <__sflush_r+0xb8>
 800553a:	4a2a      	ldr	r2, [pc, #168]	; (80055e4 <__sflush_r+0x108>)
 800553c:	40ca      	lsrs	r2, r1
 800553e:	07d6      	lsls	r6, r2, #31
 8005540:	d528      	bpl.n	8005594 <__sflush_r+0xb8>
 8005542:	2200      	movs	r2, #0
 8005544:	6062      	str	r2, [r4, #4]
 8005546:	04d9      	lsls	r1, r3, #19
 8005548:	6922      	ldr	r2, [r4, #16]
 800554a:	6022      	str	r2, [r4, #0]
 800554c:	d504      	bpl.n	8005558 <__sflush_r+0x7c>
 800554e:	1c42      	adds	r2, r0, #1
 8005550:	d101      	bne.n	8005556 <__sflush_r+0x7a>
 8005552:	682b      	ldr	r3, [r5, #0]
 8005554:	b903      	cbnz	r3, 8005558 <__sflush_r+0x7c>
 8005556:	6560      	str	r0, [r4, #84]	; 0x54
 8005558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800555a:	602f      	str	r7, [r5, #0]
 800555c:	2900      	cmp	r1, #0
 800555e:	d0ca      	beq.n	80054f6 <__sflush_r+0x1a>
 8005560:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005564:	4299      	cmp	r1, r3
 8005566:	d002      	beq.n	800556e <__sflush_r+0x92>
 8005568:	4628      	mov	r0, r5
 800556a:	f000 f9d5 	bl	8005918 <_free_r>
 800556e:	2000      	movs	r0, #0
 8005570:	6360      	str	r0, [r4, #52]	; 0x34
 8005572:	e7c1      	b.n	80054f8 <__sflush_r+0x1c>
 8005574:	6a21      	ldr	r1, [r4, #32]
 8005576:	2301      	movs	r3, #1
 8005578:	4628      	mov	r0, r5
 800557a:	47b0      	blx	r6
 800557c:	1c41      	adds	r1, r0, #1
 800557e:	d1c7      	bne.n	8005510 <__sflush_r+0x34>
 8005580:	682b      	ldr	r3, [r5, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0c4      	beq.n	8005510 <__sflush_r+0x34>
 8005586:	2b1d      	cmp	r3, #29
 8005588:	d001      	beq.n	800558e <__sflush_r+0xb2>
 800558a:	2b16      	cmp	r3, #22
 800558c:	d101      	bne.n	8005592 <__sflush_r+0xb6>
 800558e:	602f      	str	r7, [r5, #0]
 8005590:	e7b1      	b.n	80054f6 <__sflush_r+0x1a>
 8005592:	89a3      	ldrh	r3, [r4, #12]
 8005594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005598:	81a3      	strh	r3, [r4, #12]
 800559a:	e7ad      	b.n	80054f8 <__sflush_r+0x1c>
 800559c:	690f      	ldr	r7, [r1, #16]
 800559e:	2f00      	cmp	r7, #0
 80055a0:	d0a9      	beq.n	80054f6 <__sflush_r+0x1a>
 80055a2:	0793      	lsls	r3, r2, #30
 80055a4:	680e      	ldr	r6, [r1, #0]
 80055a6:	bf08      	it	eq
 80055a8:	694b      	ldreq	r3, [r1, #20]
 80055aa:	600f      	str	r7, [r1, #0]
 80055ac:	bf18      	it	ne
 80055ae:	2300      	movne	r3, #0
 80055b0:	eba6 0807 	sub.w	r8, r6, r7
 80055b4:	608b      	str	r3, [r1, #8]
 80055b6:	f1b8 0f00 	cmp.w	r8, #0
 80055ba:	dd9c      	ble.n	80054f6 <__sflush_r+0x1a>
 80055bc:	6a21      	ldr	r1, [r4, #32]
 80055be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055c0:	4643      	mov	r3, r8
 80055c2:	463a      	mov	r2, r7
 80055c4:	4628      	mov	r0, r5
 80055c6:	47b0      	blx	r6
 80055c8:	2800      	cmp	r0, #0
 80055ca:	dc06      	bgt.n	80055da <__sflush_r+0xfe>
 80055cc:	89a3      	ldrh	r3, [r4, #12]
 80055ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055d2:	81a3      	strh	r3, [r4, #12]
 80055d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055d8:	e78e      	b.n	80054f8 <__sflush_r+0x1c>
 80055da:	4407      	add	r7, r0
 80055dc:	eba8 0800 	sub.w	r8, r8, r0
 80055e0:	e7e9      	b.n	80055b6 <__sflush_r+0xda>
 80055e2:	bf00      	nop
 80055e4:	20400001 	.word	0x20400001

080055e8 <_fflush_r>:
 80055e8:	b538      	push	{r3, r4, r5, lr}
 80055ea:	690b      	ldr	r3, [r1, #16]
 80055ec:	4605      	mov	r5, r0
 80055ee:	460c      	mov	r4, r1
 80055f0:	b913      	cbnz	r3, 80055f8 <_fflush_r+0x10>
 80055f2:	2500      	movs	r5, #0
 80055f4:	4628      	mov	r0, r5
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	b118      	cbz	r0, 8005602 <_fflush_r+0x1a>
 80055fa:	6983      	ldr	r3, [r0, #24]
 80055fc:	b90b      	cbnz	r3, 8005602 <_fflush_r+0x1a>
 80055fe:	f000 f887 	bl	8005710 <__sinit>
 8005602:	4b14      	ldr	r3, [pc, #80]	; (8005654 <_fflush_r+0x6c>)
 8005604:	429c      	cmp	r4, r3
 8005606:	d11b      	bne.n	8005640 <_fflush_r+0x58>
 8005608:	686c      	ldr	r4, [r5, #4]
 800560a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0ef      	beq.n	80055f2 <_fflush_r+0xa>
 8005612:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005614:	07d0      	lsls	r0, r2, #31
 8005616:	d404      	bmi.n	8005622 <_fflush_r+0x3a>
 8005618:	0599      	lsls	r1, r3, #22
 800561a:	d402      	bmi.n	8005622 <_fflush_r+0x3a>
 800561c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800561e:	f000 f915 	bl	800584c <__retarget_lock_acquire_recursive>
 8005622:	4628      	mov	r0, r5
 8005624:	4621      	mov	r1, r4
 8005626:	f7ff ff59 	bl	80054dc <__sflush_r>
 800562a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800562c:	07da      	lsls	r2, r3, #31
 800562e:	4605      	mov	r5, r0
 8005630:	d4e0      	bmi.n	80055f4 <_fflush_r+0xc>
 8005632:	89a3      	ldrh	r3, [r4, #12]
 8005634:	059b      	lsls	r3, r3, #22
 8005636:	d4dd      	bmi.n	80055f4 <_fflush_r+0xc>
 8005638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800563a:	f000 f908 	bl	800584e <__retarget_lock_release_recursive>
 800563e:	e7d9      	b.n	80055f4 <_fflush_r+0xc>
 8005640:	4b05      	ldr	r3, [pc, #20]	; (8005658 <_fflush_r+0x70>)
 8005642:	429c      	cmp	r4, r3
 8005644:	d101      	bne.n	800564a <_fflush_r+0x62>
 8005646:	68ac      	ldr	r4, [r5, #8]
 8005648:	e7df      	b.n	800560a <_fflush_r+0x22>
 800564a:	4b04      	ldr	r3, [pc, #16]	; (800565c <_fflush_r+0x74>)
 800564c:	429c      	cmp	r4, r3
 800564e:	bf08      	it	eq
 8005650:	68ec      	ldreq	r4, [r5, #12]
 8005652:	e7da      	b.n	800560a <_fflush_r+0x22>
 8005654:	080063cc 	.word	0x080063cc
 8005658:	080063ec 	.word	0x080063ec
 800565c:	080063ac 	.word	0x080063ac

08005660 <std>:
 8005660:	2300      	movs	r3, #0
 8005662:	b510      	push	{r4, lr}
 8005664:	4604      	mov	r4, r0
 8005666:	e9c0 3300 	strd	r3, r3, [r0]
 800566a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800566e:	6083      	str	r3, [r0, #8]
 8005670:	8181      	strh	r1, [r0, #12]
 8005672:	6643      	str	r3, [r0, #100]	; 0x64
 8005674:	81c2      	strh	r2, [r0, #14]
 8005676:	6183      	str	r3, [r0, #24]
 8005678:	4619      	mov	r1, r3
 800567a:	2208      	movs	r2, #8
 800567c:	305c      	adds	r0, #92	; 0x5c
 800567e:	f7ff fdd7 	bl	8005230 <memset>
 8005682:	4b05      	ldr	r3, [pc, #20]	; (8005698 <std+0x38>)
 8005684:	6263      	str	r3, [r4, #36]	; 0x24
 8005686:	4b05      	ldr	r3, [pc, #20]	; (800569c <std+0x3c>)
 8005688:	62a3      	str	r3, [r4, #40]	; 0x28
 800568a:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <std+0x40>)
 800568c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800568e:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <std+0x44>)
 8005690:	6224      	str	r4, [r4, #32]
 8005692:	6323      	str	r3, [r4, #48]	; 0x30
 8005694:	bd10      	pop	{r4, pc}
 8005696:	bf00      	nop
 8005698:	08006069 	.word	0x08006069
 800569c:	0800608b 	.word	0x0800608b
 80056a0:	080060c3 	.word	0x080060c3
 80056a4:	080060e7 	.word	0x080060e7

080056a8 <_cleanup_r>:
 80056a8:	4901      	ldr	r1, [pc, #4]	; (80056b0 <_cleanup_r+0x8>)
 80056aa:	f000 b8af 	b.w	800580c <_fwalk_reent>
 80056ae:	bf00      	nop
 80056b0:	080055e9 	.word	0x080055e9

080056b4 <__sfmoreglue>:
 80056b4:	b570      	push	{r4, r5, r6, lr}
 80056b6:	1e4a      	subs	r2, r1, #1
 80056b8:	2568      	movs	r5, #104	; 0x68
 80056ba:	4355      	muls	r5, r2
 80056bc:	460e      	mov	r6, r1
 80056be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056c2:	f000 f979 	bl	80059b8 <_malloc_r>
 80056c6:	4604      	mov	r4, r0
 80056c8:	b140      	cbz	r0, 80056dc <__sfmoreglue+0x28>
 80056ca:	2100      	movs	r1, #0
 80056cc:	e9c0 1600 	strd	r1, r6, [r0]
 80056d0:	300c      	adds	r0, #12
 80056d2:	60a0      	str	r0, [r4, #8]
 80056d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056d8:	f7ff fdaa 	bl	8005230 <memset>
 80056dc:	4620      	mov	r0, r4
 80056de:	bd70      	pop	{r4, r5, r6, pc}

080056e0 <__sfp_lock_acquire>:
 80056e0:	4801      	ldr	r0, [pc, #4]	; (80056e8 <__sfp_lock_acquire+0x8>)
 80056e2:	f000 b8b3 	b.w	800584c <__retarget_lock_acquire_recursive>
 80056e6:	bf00      	nop
 80056e8:	20000b14 	.word	0x20000b14

080056ec <__sfp_lock_release>:
 80056ec:	4801      	ldr	r0, [pc, #4]	; (80056f4 <__sfp_lock_release+0x8>)
 80056ee:	f000 b8ae 	b.w	800584e <__retarget_lock_release_recursive>
 80056f2:	bf00      	nop
 80056f4:	20000b14 	.word	0x20000b14

080056f8 <__sinit_lock_acquire>:
 80056f8:	4801      	ldr	r0, [pc, #4]	; (8005700 <__sinit_lock_acquire+0x8>)
 80056fa:	f000 b8a7 	b.w	800584c <__retarget_lock_acquire_recursive>
 80056fe:	bf00      	nop
 8005700:	20000b0f 	.word	0x20000b0f

08005704 <__sinit_lock_release>:
 8005704:	4801      	ldr	r0, [pc, #4]	; (800570c <__sinit_lock_release+0x8>)
 8005706:	f000 b8a2 	b.w	800584e <__retarget_lock_release_recursive>
 800570a:	bf00      	nop
 800570c:	20000b0f 	.word	0x20000b0f

08005710 <__sinit>:
 8005710:	b510      	push	{r4, lr}
 8005712:	4604      	mov	r4, r0
 8005714:	f7ff fff0 	bl	80056f8 <__sinit_lock_acquire>
 8005718:	69a3      	ldr	r3, [r4, #24]
 800571a:	b11b      	cbz	r3, 8005724 <__sinit+0x14>
 800571c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005720:	f7ff bff0 	b.w	8005704 <__sinit_lock_release>
 8005724:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005728:	6523      	str	r3, [r4, #80]	; 0x50
 800572a:	4b13      	ldr	r3, [pc, #76]	; (8005778 <__sinit+0x68>)
 800572c:	4a13      	ldr	r2, [pc, #76]	; (800577c <__sinit+0x6c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	62a2      	str	r2, [r4, #40]	; 0x28
 8005732:	42a3      	cmp	r3, r4
 8005734:	bf04      	itt	eq
 8005736:	2301      	moveq	r3, #1
 8005738:	61a3      	streq	r3, [r4, #24]
 800573a:	4620      	mov	r0, r4
 800573c:	f000 f820 	bl	8005780 <__sfp>
 8005740:	6060      	str	r0, [r4, #4]
 8005742:	4620      	mov	r0, r4
 8005744:	f000 f81c 	bl	8005780 <__sfp>
 8005748:	60a0      	str	r0, [r4, #8]
 800574a:	4620      	mov	r0, r4
 800574c:	f000 f818 	bl	8005780 <__sfp>
 8005750:	2200      	movs	r2, #0
 8005752:	60e0      	str	r0, [r4, #12]
 8005754:	2104      	movs	r1, #4
 8005756:	6860      	ldr	r0, [r4, #4]
 8005758:	f7ff ff82 	bl	8005660 <std>
 800575c:	68a0      	ldr	r0, [r4, #8]
 800575e:	2201      	movs	r2, #1
 8005760:	2109      	movs	r1, #9
 8005762:	f7ff ff7d 	bl	8005660 <std>
 8005766:	68e0      	ldr	r0, [r4, #12]
 8005768:	2202      	movs	r2, #2
 800576a:	2112      	movs	r1, #18
 800576c:	f7ff ff78 	bl	8005660 <std>
 8005770:	2301      	movs	r3, #1
 8005772:	61a3      	str	r3, [r4, #24]
 8005774:	e7d2      	b.n	800571c <__sinit+0xc>
 8005776:	bf00      	nop
 8005778:	080063a8 	.word	0x080063a8
 800577c:	080056a9 	.word	0x080056a9

08005780 <__sfp>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	4607      	mov	r7, r0
 8005784:	f7ff ffac 	bl	80056e0 <__sfp_lock_acquire>
 8005788:	4b1e      	ldr	r3, [pc, #120]	; (8005804 <__sfp+0x84>)
 800578a:	681e      	ldr	r6, [r3, #0]
 800578c:	69b3      	ldr	r3, [r6, #24]
 800578e:	b913      	cbnz	r3, 8005796 <__sfp+0x16>
 8005790:	4630      	mov	r0, r6
 8005792:	f7ff ffbd 	bl	8005710 <__sinit>
 8005796:	3648      	adds	r6, #72	; 0x48
 8005798:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800579c:	3b01      	subs	r3, #1
 800579e:	d503      	bpl.n	80057a8 <__sfp+0x28>
 80057a0:	6833      	ldr	r3, [r6, #0]
 80057a2:	b30b      	cbz	r3, 80057e8 <__sfp+0x68>
 80057a4:	6836      	ldr	r6, [r6, #0]
 80057a6:	e7f7      	b.n	8005798 <__sfp+0x18>
 80057a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057ac:	b9d5      	cbnz	r5, 80057e4 <__sfp+0x64>
 80057ae:	4b16      	ldr	r3, [pc, #88]	; (8005808 <__sfp+0x88>)
 80057b0:	60e3      	str	r3, [r4, #12]
 80057b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057b6:	6665      	str	r5, [r4, #100]	; 0x64
 80057b8:	f000 f847 	bl	800584a <__retarget_lock_init_recursive>
 80057bc:	f7ff ff96 	bl	80056ec <__sfp_lock_release>
 80057c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80057c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057c8:	6025      	str	r5, [r4, #0]
 80057ca:	61a5      	str	r5, [r4, #24]
 80057cc:	2208      	movs	r2, #8
 80057ce:	4629      	mov	r1, r5
 80057d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057d4:	f7ff fd2c 	bl	8005230 <memset>
 80057d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057e0:	4620      	mov	r0, r4
 80057e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057e4:	3468      	adds	r4, #104	; 0x68
 80057e6:	e7d9      	b.n	800579c <__sfp+0x1c>
 80057e8:	2104      	movs	r1, #4
 80057ea:	4638      	mov	r0, r7
 80057ec:	f7ff ff62 	bl	80056b4 <__sfmoreglue>
 80057f0:	4604      	mov	r4, r0
 80057f2:	6030      	str	r0, [r6, #0]
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d1d5      	bne.n	80057a4 <__sfp+0x24>
 80057f8:	f7ff ff78 	bl	80056ec <__sfp_lock_release>
 80057fc:	230c      	movs	r3, #12
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	e7ee      	b.n	80057e0 <__sfp+0x60>
 8005802:	bf00      	nop
 8005804:	080063a8 	.word	0x080063a8
 8005808:	ffff0001 	.word	0xffff0001

0800580c <_fwalk_reent>:
 800580c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005810:	4606      	mov	r6, r0
 8005812:	4688      	mov	r8, r1
 8005814:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005818:	2700      	movs	r7, #0
 800581a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800581e:	f1b9 0901 	subs.w	r9, r9, #1
 8005822:	d505      	bpl.n	8005830 <_fwalk_reent+0x24>
 8005824:	6824      	ldr	r4, [r4, #0]
 8005826:	2c00      	cmp	r4, #0
 8005828:	d1f7      	bne.n	800581a <_fwalk_reent+0xe>
 800582a:	4638      	mov	r0, r7
 800582c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005830:	89ab      	ldrh	r3, [r5, #12]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d907      	bls.n	8005846 <_fwalk_reent+0x3a>
 8005836:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800583a:	3301      	adds	r3, #1
 800583c:	d003      	beq.n	8005846 <_fwalk_reent+0x3a>
 800583e:	4629      	mov	r1, r5
 8005840:	4630      	mov	r0, r6
 8005842:	47c0      	blx	r8
 8005844:	4307      	orrs	r7, r0
 8005846:	3568      	adds	r5, #104	; 0x68
 8005848:	e7e9      	b.n	800581e <_fwalk_reent+0x12>

0800584a <__retarget_lock_init_recursive>:
 800584a:	4770      	bx	lr

0800584c <__retarget_lock_acquire_recursive>:
 800584c:	4770      	bx	lr

0800584e <__retarget_lock_release_recursive>:
 800584e:	4770      	bx	lr

08005850 <__swhatbuf_r>:
 8005850:	b570      	push	{r4, r5, r6, lr}
 8005852:	460e      	mov	r6, r1
 8005854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005858:	2900      	cmp	r1, #0
 800585a:	b096      	sub	sp, #88	; 0x58
 800585c:	4614      	mov	r4, r2
 800585e:	461d      	mov	r5, r3
 8005860:	da07      	bge.n	8005872 <__swhatbuf_r+0x22>
 8005862:	2300      	movs	r3, #0
 8005864:	602b      	str	r3, [r5, #0]
 8005866:	89b3      	ldrh	r3, [r6, #12]
 8005868:	061a      	lsls	r2, r3, #24
 800586a:	d410      	bmi.n	800588e <__swhatbuf_r+0x3e>
 800586c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005870:	e00e      	b.n	8005890 <__swhatbuf_r+0x40>
 8005872:	466a      	mov	r2, sp
 8005874:	f000 fc5e 	bl	8006134 <_fstat_r>
 8005878:	2800      	cmp	r0, #0
 800587a:	dbf2      	blt.n	8005862 <__swhatbuf_r+0x12>
 800587c:	9a01      	ldr	r2, [sp, #4]
 800587e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005882:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005886:	425a      	negs	r2, r3
 8005888:	415a      	adcs	r2, r3
 800588a:	602a      	str	r2, [r5, #0]
 800588c:	e7ee      	b.n	800586c <__swhatbuf_r+0x1c>
 800588e:	2340      	movs	r3, #64	; 0x40
 8005890:	2000      	movs	r0, #0
 8005892:	6023      	str	r3, [r4, #0]
 8005894:	b016      	add	sp, #88	; 0x58
 8005896:	bd70      	pop	{r4, r5, r6, pc}

08005898 <__smakebuf_r>:
 8005898:	898b      	ldrh	r3, [r1, #12]
 800589a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800589c:	079d      	lsls	r5, r3, #30
 800589e:	4606      	mov	r6, r0
 80058a0:	460c      	mov	r4, r1
 80058a2:	d507      	bpl.n	80058b4 <__smakebuf_r+0x1c>
 80058a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	6123      	str	r3, [r4, #16]
 80058ac:	2301      	movs	r3, #1
 80058ae:	6163      	str	r3, [r4, #20]
 80058b0:	b002      	add	sp, #8
 80058b2:	bd70      	pop	{r4, r5, r6, pc}
 80058b4:	ab01      	add	r3, sp, #4
 80058b6:	466a      	mov	r2, sp
 80058b8:	f7ff ffca 	bl	8005850 <__swhatbuf_r>
 80058bc:	9900      	ldr	r1, [sp, #0]
 80058be:	4605      	mov	r5, r0
 80058c0:	4630      	mov	r0, r6
 80058c2:	f000 f879 	bl	80059b8 <_malloc_r>
 80058c6:	b948      	cbnz	r0, 80058dc <__smakebuf_r+0x44>
 80058c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058cc:	059a      	lsls	r2, r3, #22
 80058ce:	d4ef      	bmi.n	80058b0 <__smakebuf_r+0x18>
 80058d0:	f023 0303 	bic.w	r3, r3, #3
 80058d4:	f043 0302 	orr.w	r3, r3, #2
 80058d8:	81a3      	strh	r3, [r4, #12]
 80058da:	e7e3      	b.n	80058a4 <__smakebuf_r+0xc>
 80058dc:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <__smakebuf_r+0x7c>)
 80058de:	62b3      	str	r3, [r6, #40]	; 0x28
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	6020      	str	r0, [r4, #0]
 80058e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e8:	81a3      	strh	r3, [r4, #12]
 80058ea:	9b00      	ldr	r3, [sp, #0]
 80058ec:	6163      	str	r3, [r4, #20]
 80058ee:	9b01      	ldr	r3, [sp, #4]
 80058f0:	6120      	str	r0, [r4, #16]
 80058f2:	b15b      	cbz	r3, 800590c <__smakebuf_r+0x74>
 80058f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058f8:	4630      	mov	r0, r6
 80058fa:	f000 fc2d 	bl	8006158 <_isatty_r>
 80058fe:	b128      	cbz	r0, 800590c <__smakebuf_r+0x74>
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	f023 0303 	bic.w	r3, r3, #3
 8005906:	f043 0301 	orr.w	r3, r3, #1
 800590a:	81a3      	strh	r3, [r4, #12]
 800590c:	89a0      	ldrh	r0, [r4, #12]
 800590e:	4305      	orrs	r5, r0
 8005910:	81a5      	strh	r5, [r4, #12]
 8005912:	e7cd      	b.n	80058b0 <__smakebuf_r+0x18>
 8005914:	080056a9 	.word	0x080056a9

08005918 <_free_r>:
 8005918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800591a:	2900      	cmp	r1, #0
 800591c:	d048      	beq.n	80059b0 <_free_r+0x98>
 800591e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005922:	9001      	str	r0, [sp, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	f1a1 0404 	sub.w	r4, r1, #4
 800592a:	bfb8      	it	lt
 800592c:	18e4      	addlt	r4, r4, r3
 800592e:	f000 fc35 	bl	800619c <__malloc_lock>
 8005932:	4a20      	ldr	r2, [pc, #128]	; (80059b4 <_free_r+0x9c>)
 8005934:	9801      	ldr	r0, [sp, #4]
 8005936:	6813      	ldr	r3, [r2, #0]
 8005938:	4615      	mov	r5, r2
 800593a:	b933      	cbnz	r3, 800594a <_free_r+0x32>
 800593c:	6063      	str	r3, [r4, #4]
 800593e:	6014      	str	r4, [r2, #0]
 8005940:	b003      	add	sp, #12
 8005942:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005946:	f000 bc2f 	b.w	80061a8 <__malloc_unlock>
 800594a:	42a3      	cmp	r3, r4
 800594c:	d90b      	bls.n	8005966 <_free_r+0x4e>
 800594e:	6821      	ldr	r1, [r4, #0]
 8005950:	1862      	adds	r2, r4, r1
 8005952:	4293      	cmp	r3, r2
 8005954:	bf04      	itt	eq
 8005956:	681a      	ldreq	r2, [r3, #0]
 8005958:	685b      	ldreq	r3, [r3, #4]
 800595a:	6063      	str	r3, [r4, #4]
 800595c:	bf04      	itt	eq
 800595e:	1852      	addeq	r2, r2, r1
 8005960:	6022      	streq	r2, [r4, #0]
 8005962:	602c      	str	r4, [r5, #0]
 8005964:	e7ec      	b.n	8005940 <_free_r+0x28>
 8005966:	461a      	mov	r2, r3
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	b10b      	cbz	r3, 8005970 <_free_r+0x58>
 800596c:	42a3      	cmp	r3, r4
 800596e:	d9fa      	bls.n	8005966 <_free_r+0x4e>
 8005970:	6811      	ldr	r1, [r2, #0]
 8005972:	1855      	adds	r5, r2, r1
 8005974:	42a5      	cmp	r5, r4
 8005976:	d10b      	bne.n	8005990 <_free_r+0x78>
 8005978:	6824      	ldr	r4, [r4, #0]
 800597a:	4421      	add	r1, r4
 800597c:	1854      	adds	r4, r2, r1
 800597e:	42a3      	cmp	r3, r4
 8005980:	6011      	str	r1, [r2, #0]
 8005982:	d1dd      	bne.n	8005940 <_free_r+0x28>
 8005984:	681c      	ldr	r4, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	6053      	str	r3, [r2, #4]
 800598a:	4421      	add	r1, r4
 800598c:	6011      	str	r1, [r2, #0]
 800598e:	e7d7      	b.n	8005940 <_free_r+0x28>
 8005990:	d902      	bls.n	8005998 <_free_r+0x80>
 8005992:	230c      	movs	r3, #12
 8005994:	6003      	str	r3, [r0, #0]
 8005996:	e7d3      	b.n	8005940 <_free_r+0x28>
 8005998:	6825      	ldr	r5, [r4, #0]
 800599a:	1961      	adds	r1, r4, r5
 800599c:	428b      	cmp	r3, r1
 800599e:	bf04      	itt	eq
 80059a0:	6819      	ldreq	r1, [r3, #0]
 80059a2:	685b      	ldreq	r3, [r3, #4]
 80059a4:	6063      	str	r3, [r4, #4]
 80059a6:	bf04      	itt	eq
 80059a8:	1949      	addeq	r1, r1, r5
 80059aa:	6021      	streq	r1, [r4, #0]
 80059ac:	6054      	str	r4, [r2, #4]
 80059ae:	e7c7      	b.n	8005940 <_free_r+0x28>
 80059b0:	b003      	add	sp, #12
 80059b2:	bd30      	pop	{r4, r5, pc}
 80059b4:	20000098 	.word	0x20000098

080059b8 <_malloc_r>:
 80059b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ba:	1ccd      	adds	r5, r1, #3
 80059bc:	f025 0503 	bic.w	r5, r5, #3
 80059c0:	3508      	adds	r5, #8
 80059c2:	2d0c      	cmp	r5, #12
 80059c4:	bf38      	it	cc
 80059c6:	250c      	movcc	r5, #12
 80059c8:	2d00      	cmp	r5, #0
 80059ca:	4606      	mov	r6, r0
 80059cc:	db01      	blt.n	80059d2 <_malloc_r+0x1a>
 80059ce:	42a9      	cmp	r1, r5
 80059d0:	d903      	bls.n	80059da <_malloc_r+0x22>
 80059d2:	230c      	movs	r3, #12
 80059d4:	6033      	str	r3, [r6, #0]
 80059d6:	2000      	movs	r0, #0
 80059d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059da:	f000 fbdf 	bl	800619c <__malloc_lock>
 80059de:	4921      	ldr	r1, [pc, #132]	; (8005a64 <_malloc_r+0xac>)
 80059e0:	680a      	ldr	r2, [r1, #0]
 80059e2:	4614      	mov	r4, r2
 80059e4:	b99c      	cbnz	r4, 8005a0e <_malloc_r+0x56>
 80059e6:	4f20      	ldr	r7, [pc, #128]	; (8005a68 <_malloc_r+0xb0>)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	b923      	cbnz	r3, 80059f6 <_malloc_r+0x3e>
 80059ec:	4621      	mov	r1, r4
 80059ee:	4630      	mov	r0, r6
 80059f0:	f000 fb2a 	bl	8006048 <_sbrk_r>
 80059f4:	6038      	str	r0, [r7, #0]
 80059f6:	4629      	mov	r1, r5
 80059f8:	4630      	mov	r0, r6
 80059fa:	f000 fb25 	bl	8006048 <_sbrk_r>
 80059fe:	1c43      	adds	r3, r0, #1
 8005a00:	d123      	bne.n	8005a4a <_malloc_r+0x92>
 8005a02:	230c      	movs	r3, #12
 8005a04:	6033      	str	r3, [r6, #0]
 8005a06:	4630      	mov	r0, r6
 8005a08:	f000 fbce 	bl	80061a8 <__malloc_unlock>
 8005a0c:	e7e3      	b.n	80059d6 <_malloc_r+0x1e>
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	1b5b      	subs	r3, r3, r5
 8005a12:	d417      	bmi.n	8005a44 <_malloc_r+0x8c>
 8005a14:	2b0b      	cmp	r3, #11
 8005a16:	d903      	bls.n	8005a20 <_malloc_r+0x68>
 8005a18:	6023      	str	r3, [r4, #0]
 8005a1a:	441c      	add	r4, r3
 8005a1c:	6025      	str	r5, [r4, #0]
 8005a1e:	e004      	b.n	8005a2a <_malloc_r+0x72>
 8005a20:	6863      	ldr	r3, [r4, #4]
 8005a22:	42a2      	cmp	r2, r4
 8005a24:	bf0c      	ite	eq
 8005a26:	600b      	streq	r3, [r1, #0]
 8005a28:	6053      	strne	r3, [r2, #4]
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	f000 fbbc 	bl	80061a8 <__malloc_unlock>
 8005a30:	f104 000b 	add.w	r0, r4, #11
 8005a34:	1d23      	adds	r3, r4, #4
 8005a36:	f020 0007 	bic.w	r0, r0, #7
 8005a3a:	1ac2      	subs	r2, r0, r3
 8005a3c:	d0cc      	beq.n	80059d8 <_malloc_r+0x20>
 8005a3e:	1a1b      	subs	r3, r3, r0
 8005a40:	50a3      	str	r3, [r4, r2]
 8005a42:	e7c9      	b.n	80059d8 <_malloc_r+0x20>
 8005a44:	4622      	mov	r2, r4
 8005a46:	6864      	ldr	r4, [r4, #4]
 8005a48:	e7cc      	b.n	80059e4 <_malloc_r+0x2c>
 8005a4a:	1cc4      	adds	r4, r0, #3
 8005a4c:	f024 0403 	bic.w	r4, r4, #3
 8005a50:	42a0      	cmp	r0, r4
 8005a52:	d0e3      	beq.n	8005a1c <_malloc_r+0x64>
 8005a54:	1a21      	subs	r1, r4, r0
 8005a56:	4630      	mov	r0, r6
 8005a58:	f000 faf6 	bl	8006048 <_sbrk_r>
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	d1dd      	bne.n	8005a1c <_malloc_r+0x64>
 8005a60:	e7cf      	b.n	8005a02 <_malloc_r+0x4a>
 8005a62:	bf00      	nop
 8005a64:	20000098 	.word	0x20000098
 8005a68:	2000009c 	.word	0x2000009c

08005a6c <__sfputc_r>:
 8005a6c:	6893      	ldr	r3, [r2, #8]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	b410      	push	{r4}
 8005a74:	6093      	str	r3, [r2, #8]
 8005a76:	da08      	bge.n	8005a8a <__sfputc_r+0x1e>
 8005a78:	6994      	ldr	r4, [r2, #24]
 8005a7a:	42a3      	cmp	r3, r4
 8005a7c:	db01      	blt.n	8005a82 <__sfputc_r+0x16>
 8005a7e:	290a      	cmp	r1, #10
 8005a80:	d103      	bne.n	8005a8a <__sfputc_r+0x1e>
 8005a82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a86:	f7ff bc69 	b.w	800535c <__swbuf_r>
 8005a8a:	6813      	ldr	r3, [r2, #0]
 8005a8c:	1c58      	adds	r0, r3, #1
 8005a8e:	6010      	str	r0, [r2, #0]
 8005a90:	7019      	strb	r1, [r3, #0]
 8005a92:	4608      	mov	r0, r1
 8005a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <__sfputs_r>:
 8005a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9c:	4606      	mov	r6, r0
 8005a9e:	460f      	mov	r7, r1
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	18d5      	adds	r5, r2, r3
 8005aa4:	42ac      	cmp	r4, r5
 8005aa6:	d101      	bne.n	8005aac <__sfputs_r+0x12>
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	e007      	b.n	8005abc <__sfputs_r+0x22>
 8005aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ab0:	463a      	mov	r2, r7
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	f7ff ffda 	bl	8005a6c <__sfputc_r>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d1f3      	bne.n	8005aa4 <__sfputs_r+0xa>
 8005abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ac0 <_vfiprintf_r>:
 8005ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac4:	460d      	mov	r5, r1
 8005ac6:	b09d      	sub	sp, #116	; 0x74
 8005ac8:	4614      	mov	r4, r2
 8005aca:	4698      	mov	r8, r3
 8005acc:	4606      	mov	r6, r0
 8005ace:	b118      	cbz	r0, 8005ad8 <_vfiprintf_r+0x18>
 8005ad0:	6983      	ldr	r3, [r0, #24]
 8005ad2:	b90b      	cbnz	r3, 8005ad8 <_vfiprintf_r+0x18>
 8005ad4:	f7ff fe1c 	bl	8005710 <__sinit>
 8005ad8:	4b89      	ldr	r3, [pc, #548]	; (8005d00 <_vfiprintf_r+0x240>)
 8005ada:	429d      	cmp	r5, r3
 8005adc:	d11b      	bne.n	8005b16 <_vfiprintf_r+0x56>
 8005ade:	6875      	ldr	r5, [r6, #4]
 8005ae0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ae2:	07d9      	lsls	r1, r3, #31
 8005ae4:	d405      	bmi.n	8005af2 <_vfiprintf_r+0x32>
 8005ae6:	89ab      	ldrh	r3, [r5, #12]
 8005ae8:	059a      	lsls	r2, r3, #22
 8005aea:	d402      	bmi.n	8005af2 <_vfiprintf_r+0x32>
 8005aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005aee:	f7ff fead 	bl	800584c <__retarget_lock_acquire_recursive>
 8005af2:	89ab      	ldrh	r3, [r5, #12]
 8005af4:	071b      	lsls	r3, r3, #28
 8005af6:	d501      	bpl.n	8005afc <_vfiprintf_r+0x3c>
 8005af8:	692b      	ldr	r3, [r5, #16]
 8005afa:	b9eb      	cbnz	r3, 8005b38 <_vfiprintf_r+0x78>
 8005afc:	4629      	mov	r1, r5
 8005afe:	4630      	mov	r0, r6
 8005b00:	f7ff fc7e 	bl	8005400 <__swsetup_r>
 8005b04:	b1c0      	cbz	r0, 8005b38 <_vfiprintf_r+0x78>
 8005b06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b08:	07dc      	lsls	r4, r3, #31
 8005b0a:	d50e      	bpl.n	8005b2a <_vfiprintf_r+0x6a>
 8005b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b10:	b01d      	add	sp, #116	; 0x74
 8005b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b16:	4b7b      	ldr	r3, [pc, #492]	; (8005d04 <_vfiprintf_r+0x244>)
 8005b18:	429d      	cmp	r5, r3
 8005b1a:	d101      	bne.n	8005b20 <_vfiprintf_r+0x60>
 8005b1c:	68b5      	ldr	r5, [r6, #8]
 8005b1e:	e7df      	b.n	8005ae0 <_vfiprintf_r+0x20>
 8005b20:	4b79      	ldr	r3, [pc, #484]	; (8005d08 <_vfiprintf_r+0x248>)
 8005b22:	429d      	cmp	r5, r3
 8005b24:	bf08      	it	eq
 8005b26:	68f5      	ldreq	r5, [r6, #12]
 8005b28:	e7da      	b.n	8005ae0 <_vfiprintf_r+0x20>
 8005b2a:	89ab      	ldrh	r3, [r5, #12]
 8005b2c:	0598      	lsls	r0, r3, #22
 8005b2e:	d4ed      	bmi.n	8005b0c <_vfiprintf_r+0x4c>
 8005b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b32:	f7ff fe8c 	bl	800584e <__retarget_lock_release_recursive>
 8005b36:	e7e9      	b.n	8005b0c <_vfiprintf_r+0x4c>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b3c:	2320      	movs	r3, #32
 8005b3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b42:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b46:	2330      	movs	r3, #48	; 0x30
 8005b48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d0c <_vfiprintf_r+0x24c>
 8005b4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b50:	f04f 0901 	mov.w	r9, #1
 8005b54:	4623      	mov	r3, r4
 8005b56:	469a      	mov	sl, r3
 8005b58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b5c:	b10a      	cbz	r2, 8005b62 <_vfiprintf_r+0xa2>
 8005b5e:	2a25      	cmp	r2, #37	; 0x25
 8005b60:	d1f9      	bne.n	8005b56 <_vfiprintf_r+0x96>
 8005b62:	ebba 0b04 	subs.w	fp, sl, r4
 8005b66:	d00b      	beq.n	8005b80 <_vfiprintf_r+0xc0>
 8005b68:	465b      	mov	r3, fp
 8005b6a:	4622      	mov	r2, r4
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	4630      	mov	r0, r6
 8005b70:	f7ff ff93 	bl	8005a9a <__sfputs_r>
 8005b74:	3001      	adds	r0, #1
 8005b76:	f000 80aa 	beq.w	8005cce <_vfiprintf_r+0x20e>
 8005b7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b7c:	445a      	add	r2, fp
 8005b7e:	9209      	str	r2, [sp, #36]	; 0x24
 8005b80:	f89a 3000 	ldrb.w	r3, [sl]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 80a2 	beq.w	8005cce <_vfiprintf_r+0x20e>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b94:	f10a 0a01 	add.w	sl, sl, #1
 8005b98:	9304      	str	r3, [sp, #16]
 8005b9a:	9307      	str	r3, [sp, #28]
 8005b9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ba0:	931a      	str	r3, [sp, #104]	; 0x68
 8005ba2:	4654      	mov	r4, sl
 8005ba4:	2205      	movs	r2, #5
 8005ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005baa:	4858      	ldr	r0, [pc, #352]	; (8005d0c <_vfiprintf_r+0x24c>)
 8005bac:	f7fa fb18 	bl	80001e0 <memchr>
 8005bb0:	9a04      	ldr	r2, [sp, #16]
 8005bb2:	b9d8      	cbnz	r0, 8005bec <_vfiprintf_r+0x12c>
 8005bb4:	06d1      	lsls	r1, r2, #27
 8005bb6:	bf44      	itt	mi
 8005bb8:	2320      	movmi	r3, #32
 8005bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bbe:	0713      	lsls	r3, r2, #28
 8005bc0:	bf44      	itt	mi
 8005bc2:	232b      	movmi	r3, #43	; 0x2b
 8005bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8005bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8005bce:	d015      	beq.n	8005bfc <_vfiprintf_r+0x13c>
 8005bd0:	9a07      	ldr	r2, [sp, #28]
 8005bd2:	4654      	mov	r4, sl
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	f04f 0c0a 	mov.w	ip, #10
 8005bda:	4621      	mov	r1, r4
 8005bdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005be0:	3b30      	subs	r3, #48	; 0x30
 8005be2:	2b09      	cmp	r3, #9
 8005be4:	d94e      	bls.n	8005c84 <_vfiprintf_r+0x1c4>
 8005be6:	b1b0      	cbz	r0, 8005c16 <_vfiprintf_r+0x156>
 8005be8:	9207      	str	r2, [sp, #28]
 8005bea:	e014      	b.n	8005c16 <_vfiprintf_r+0x156>
 8005bec:	eba0 0308 	sub.w	r3, r0, r8
 8005bf0:	fa09 f303 	lsl.w	r3, r9, r3
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	9304      	str	r3, [sp, #16]
 8005bf8:	46a2      	mov	sl, r4
 8005bfa:	e7d2      	b.n	8005ba2 <_vfiprintf_r+0xe2>
 8005bfc:	9b03      	ldr	r3, [sp, #12]
 8005bfe:	1d19      	adds	r1, r3, #4
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	9103      	str	r1, [sp, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	bfbb      	ittet	lt
 8005c08:	425b      	neglt	r3, r3
 8005c0a:	f042 0202 	orrlt.w	r2, r2, #2
 8005c0e:	9307      	strge	r3, [sp, #28]
 8005c10:	9307      	strlt	r3, [sp, #28]
 8005c12:	bfb8      	it	lt
 8005c14:	9204      	strlt	r2, [sp, #16]
 8005c16:	7823      	ldrb	r3, [r4, #0]
 8005c18:	2b2e      	cmp	r3, #46	; 0x2e
 8005c1a:	d10c      	bne.n	8005c36 <_vfiprintf_r+0x176>
 8005c1c:	7863      	ldrb	r3, [r4, #1]
 8005c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c20:	d135      	bne.n	8005c8e <_vfiprintf_r+0x1ce>
 8005c22:	9b03      	ldr	r3, [sp, #12]
 8005c24:	1d1a      	adds	r2, r3, #4
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	9203      	str	r2, [sp, #12]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	bfb8      	it	lt
 8005c2e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005c32:	3402      	adds	r4, #2
 8005c34:	9305      	str	r3, [sp, #20]
 8005c36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d1c <_vfiprintf_r+0x25c>
 8005c3a:	7821      	ldrb	r1, [r4, #0]
 8005c3c:	2203      	movs	r2, #3
 8005c3e:	4650      	mov	r0, sl
 8005c40:	f7fa face 	bl	80001e0 <memchr>
 8005c44:	b140      	cbz	r0, 8005c58 <_vfiprintf_r+0x198>
 8005c46:	2340      	movs	r3, #64	; 0x40
 8005c48:	eba0 000a 	sub.w	r0, r0, sl
 8005c4c:	fa03 f000 	lsl.w	r0, r3, r0
 8005c50:	9b04      	ldr	r3, [sp, #16]
 8005c52:	4303      	orrs	r3, r0
 8005c54:	3401      	adds	r4, #1
 8005c56:	9304      	str	r3, [sp, #16]
 8005c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c5c:	482c      	ldr	r0, [pc, #176]	; (8005d10 <_vfiprintf_r+0x250>)
 8005c5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c62:	2206      	movs	r2, #6
 8005c64:	f7fa fabc 	bl	80001e0 <memchr>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d03f      	beq.n	8005cec <_vfiprintf_r+0x22c>
 8005c6c:	4b29      	ldr	r3, [pc, #164]	; (8005d14 <_vfiprintf_r+0x254>)
 8005c6e:	bb1b      	cbnz	r3, 8005cb8 <_vfiprintf_r+0x1f8>
 8005c70:	9b03      	ldr	r3, [sp, #12]
 8005c72:	3307      	adds	r3, #7
 8005c74:	f023 0307 	bic.w	r3, r3, #7
 8005c78:	3308      	adds	r3, #8
 8005c7a:	9303      	str	r3, [sp, #12]
 8005c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c7e:	443b      	add	r3, r7
 8005c80:	9309      	str	r3, [sp, #36]	; 0x24
 8005c82:	e767      	b.n	8005b54 <_vfiprintf_r+0x94>
 8005c84:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c88:	460c      	mov	r4, r1
 8005c8a:	2001      	movs	r0, #1
 8005c8c:	e7a5      	b.n	8005bda <_vfiprintf_r+0x11a>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	3401      	adds	r4, #1
 8005c92:	9305      	str	r3, [sp, #20]
 8005c94:	4619      	mov	r1, r3
 8005c96:	f04f 0c0a 	mov.w	ip, #10
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ca0:	3a30      	subs	r2, #48	; 0x30
 8005ca2:	2a09      	cmp	r2, #9
 8005ca4:	d903      	bls.n	8005cae <_vfiprintf_r+0x1ee>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0c5      	beq.n	8005c36 <_vfiprintf_r+0x176>
 8005caa:	9105      	str	r1, [sp, #20]
 8005cac:	e7c3      	b.n	8005c36 <_vfiprintf_r+0x176>
 8005cae:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e7f0      	b.n	8005c9a <_vfiprintf_r+0x1da>
 8005cb8:	ab03      	add	r3, sp, #12
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	462a      	mov	r2, r5
 8005cbe:	4b16      	ldr	r3, [pc, #88]	; (8005d18 <_vfiprintf_r+0x258>)
 8005cc0:	a904      	add	r1, sp, #16
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f3af 8000 	nop.w
 8005cc8:	4607      	mov	r7, r0
 8005cca:	1c78      	adds	r0, r7, #1
 8005ccc:	d1d6      	bne.n	8005c7c <_vfiprintf_r+0x1bc>
 8005cce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cd0:	07d9      	lsls	r1, r3, #31
 8005cd2:	d405      	bmi.n	8005ce0 <_vfiprintf_r+0x220>
 8005cd4:	89ab      	ldrh	r3, [r5, #12]
 8005cd6:	059a      	lsls	r2, r3, #22
 8005cd8:	d402      	bmi.n	8005ce0 <_vfiprintf_r+0x220>
 8005cda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cdc:	f7ff fdb7 	bl	800584e <__retarget_lock_release_recursive>
 8005ce0:	89ab      	ldrh	r3, [r5, #12]
 8005ce2:	065b      	lsls	r3, r3, #25
 8005ce4:	f53f af12 	bmi.w	8005b0c <_vfiprintf_r+0x4c>
 8005ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cea:	e711      	b.n	8005b10 <_vfiprintf_r+0x50>
 8005cec:	ab03      	add	r3, sp, #12
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	462a      	mov	r2, r5
 8005cf2:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <_vfiprintf_r+0x258>)
 8005cf4:	a904      	add	r1, sp, #16
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	f000 f880 	bl	8005dfc <_printf_i>
 8005cfc:	e7e4      	b.n	8005cc8 <_vfiprintf_r+0x208>
 8005cfe:	bf00      	nop
 8005d00:	080063cc 	.word	0x080063cc
 8005d04:	080063ec 	.word	0x080063ec
 8005d08:	080063ac 	.word	0x080063ac
 8005d0c:	0800640c 	.word	0x0800640c
 8005d10:	08006416 	.word	0x08006416
 8005d14:	00000000 	.word	0x00000000
 8005d18:	08005a9b 	.word	0x08005a9b
 8005d1c:	08006412 	.word	0x08006412

08005d20 <_printf_common>:
 8005d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d24:	4616      	mov	r6, r2
 8005d26:	4699      	mov	r9, r3
 8005d28:	688a      	ldr	r2, [r1, #8]
 8005d2a:	690b      	ldr	r3, [r1, #16]
 8005d2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d30:	4293      	cmp	r3, r2
 8005d32:	bfb8      	it	lt
 8005d34:	4613      	movlt	r3, r2
 8005d36:	6033      	str	r3, [r6, #0]
 8005d38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d3c:	4607      	mov	r7, r0
 8005d3e:	460c      	mov	r4, r1
 8005d40:	b10a      	cbz	r2, 8005d46 <_printf_common+0x26>
 8005d42:	3301      	adds	r3, #1
 8005d44:	6033      	str	r3, [r6, #0]
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	0699      	lsls	r1, r3, #26
 8005d4a:	bf42      	ittt	mi
 8005d4c:	6833      	ldrmi	r3, [r6, #0]
 8005d4e:	3302      	addmi	r3, #2
 8005d50:	6033      	strmi	r3, [r6, #0]
 8005d52:	6825      	ldr	r5, [r4, #0]
 8005d54:	f015 0506 	ands.w	r5, r5, #6
 8005d58:	d106      	bne.n	8005d68 <_printf_common+0x48>
 8005d5a:	f104 0a19 	add.w	sl, r4, #25
 8005d5e:	68e3      	ldr	r3, [r4, #12]
 8005d60:	6832      	ldr	r2, [r6, #0]
 8005d62:	1a9b      	subs	r3, r3, r2
 8005d64:	42ab      	cmp	r3, r5
 8005d66:	dc26      	bgt.n	8005db6 <_printf_common+0x96>
 8005d68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d6c:	1e13      	subs	r3, r2, #0
 8005d6e:	6822      	ldr	r2, [r4, #0]
 8005d70:	bf18      	it	ne
 8005d72:	2301      	movne	r3, #1
 8005d74:	0692      	lsls	r2, r2, #26
 8005d76:	d42b      	bmi.n	8005dd0 <_printf_common+0xb0>
 8005d78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d7c:	4649      	mov	r1, r9
 8005d7e:	4638      	mov	r0, r7
 8005d80:	47c0      	blx	r8
 8005d82:	3001      	adds	r0, #1
 8005d84:	d01e      	beq.n	8005dc4 <_printf_common+0xa4>
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	68e5      	ldr	r5, [r4, #12]
 8005d8a:	6832      	ldr	r2, [r6, #0]
 8005d8c:	f003 0306 	and.w	r3, r3, #6
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	bf08      	it	eq
 8005d94:	1aad      	subeq	r5, r5, r2
 8005d96:	68a3      	ldr	r3, [r4, #8]
 8005d98:	6922      	ldr	r2, [r4, #16]
 8005d9a:	bf0c      	ite	eq
 8005d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005da0:	2500      	movne	r5, #0
 8005da2:	4293      	cmp	r3, r2
 8005da4:	bfc4      	itt	gt
 8005da6:	1a9b      	subgt	r3, r3, r2
 8005da8:	18ed      	addgt	r5, r5, r3
 8005daa:	2600      	movs	r6, #0
 8005dac:	341a      	adds	r4, #26
 8005dae:	42b5      	cmp	r5, r6
 8005db0:	d11a      	bne.n	8005de8 <_printf_common+0xc8>
 8005db2:	2000      	movs	r0, #0
 8005db4:	e008      	b.n	8005dc8 <_printf_common+0xa8>
 8005db6:	2301      	movs	r3, #1
 8005db8:	4652      	mov	r2, sl
 8005dba:	4649      	mov	r1, r9
 8005dbc:	4638      	mov	r0, r7
 8005dbe:	47c0      	blx	r8
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d103      	bne.n	8005dcc <_printf_common+0xac>
 8005dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dcc:	3501      	adds	r5, #1
 8005dce:	e7c6      	b.n	8005d5e <_printf_common+0x3e>
 8005dd0:	18e1      	adds	r1, r4, r3
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	2030      	movs	r0, #48	; 0x30
 8005dd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dda:	4422      	add	r2, r4
 8005ddc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005de0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005de4:	3302      	adds	r3, #2
 8005de6:	e7c7      	b.n	8005d78 <_printf_common+0x58>
 8005de8:	2301      	movs	r3, #1
 8005dea:	4622      	mov	r2, r4
 8005dec:	4649      	mov	r1, r9
 8005dee:	4638      	mov	r0, r7
 8005df0:	47c0      	blx	r8
 8005df2:	3001      	adds	r0, #1
 8005df4:	d0e6      	beq.n	8005dc4 <_printf_common+0xa4>
 8005df6:	3601      	adds	r6, #1
 8005df8:	e7d9      	b.n	8005dae <_printf_common+0x8e>
	...

08005dfc <_printf_i>:
 8005dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e00:	460c      	mov	r4, r1
 8005e02:	4691      	mov	r9, r2
 8005e04:	7e27      	ldrb	r7, [r4, #24]
 8005e06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e08:	2f78      	cmp	r7, #120	; 0x78
 8005e0a:	4680      	mov	r8, r0
 8005e0c:	469a      	mov	sl, r3
 8005e0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e12:	d807      	bhi.n	8005e24 <_printf_i+0x28>
 8005e14:	2f62      	cmp	r7, #98	; 0x62
 8005e16:	d80a      	bhi.n	8005e2e <_printf_i+0x32>
 8005e18:	2f00      	cmp	r7, #0
 8005e1a:	f000 80d8 	beq.w	8005fce <_printf_i+0x1d2>
 8005e1e:	2f58      	cmp	r7, #88	; 0x58
 8005e20:	f000 80a3 	beq.w	8005f6a <_printf_i+0x16e>
 8005e24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e2c:	e03a      	b.n	8005ea4 <_printf_i+0xa8>
 8005e2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e32:	2b15      	cmp	r3, #21
 8005e34:	d8f6      	bhi.n	8005e24 <_printf_i+0x28>
 8005e36:	a001      	add	r0, pc, #4	; (adr r0, 8005e3c <_printf_i+0x40>)
 8005e38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e3c:	08005e95 	.word	0x08005e95
 8005e40:	08005ea9 	.word	0x08005ea9
 8005e44:	08005e25 	.word	0x08005e25
 8005e48:	08005e25 	.word	0x08005e25
 8005e4c:	08005e25 	.word	0x08005e25
 8005e50:	08005e25 	.word	0x08005e25
 8005e54:	08005ea9 	.word	0x08005ea9
 8005e58:	08005e25 	.word	0x08005e25
 8005e5c:	08005e25 	.word	0x08005e25
 8005e60:	08005e25 	.word	0x08005e25
 8005e64:	08005e25 	.word	0x08005e25
 8005e68:	08005fb5 	.word	0x08005fb5
 8005e6c:	08005ed9 	.word	0x08005ed9
 8005e70:	08005f97 	.word	0x08005f97
 8005e74:	08005e25 	.word	0x08005e25
 8005e78:	08005e25 	.word	0x08005e25
 8005e7c:	08005fd7 	.word	0x08005fd7
 8005e80:	08005e25 	.word	0x08005e25
 8005e84:	08005ed9 	.word	0x08005ed9
 8005e88:	08005e25 	.word	0x08005e25
 8005e8c:	08005e25 	.word	0x08005e25
 8005e90:	08005f9f 	.word	0x08005f9f
 8005e94:	680b      	ldr	r3, [r1, #0]
 8005e96:	1d1a      	adds	r2, r3, #4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	600a      	str	r2, [r1, #0]
 8005e9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e0a3      	b.n	8005ff0 <_printf_i+0x1f4>
 8005ea8:	6825      	ldr	r5, [r4, #0]
 8005eaa:	6808      	ldr	r0, [r1, #0]
 8005eac:	062e      	lsls	r6, r5, #24
 8005eae:	f100 0304 	add.w	r3, r0, #4
 8005eb2:	d50a      	bpl.n	8005eca <_printf_i+0xce>
 8005eb4:	6805      	ldr	r5, [r0, #0]
 8005eb6:	600b      	str	r3, [r1, #0]
 8005eb8:	2d00      	cmp	r5, #0
 8005eba:	da03      	bge.n	8005ec4 <_printf_i+0xc8>
 8005ebc:	232d      	movs	r3, #45	; 0x2d
 8005ebe:	426d      	negs	r5, r5
 8005ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ec4:	485e      	ldr	r0, [pc, #376]	; (8006040 <_printf_i+0x244>)
 8005ec6:	230a      	movs	r3, #10
 8005ec8:	e019      	b.n	8005efe <_printf_i+0x102>
 8005eca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ece:	6805      	ldr	r5, [r0, #0]
 8005ed0:	600b      	str	r3, [r1, #0]
 8005ed2:	bf18      	it	ne
 8005ed4:	b22d      	sxthne	r5, r5
 8005ed6:	e7ef      	b.n	8005eb8 <_printf_i+0xbc>
 8005ed8:	680b      	ldr	r3, [r1, #0]
 8005eda:	6825      	ldr	r5, [r4, #0]
 8005edc:	1d18      	adds	r0, r3, #4
 8005ede:	6008      	str	r0, [r1, #0]
 8005ee0:	0628      	lsls	r0, r5, #24
 8005ee2:	d501      	bpl.n	8005ee8 <_printf_i+0xec>
 8005ee4:	681d      	ldr	r5, [r3, #0]
 8005ee6:	e002      	b.n	8005eee <_printf_i+0xf2>
 8005ee8:	0669      	lsls	r1, r5, #25
 8005eea:	d5fb      	bpl.n	8005ee4 <_printf_i+0xe8>
 8005eec:	881d      	ldrh	r5, [r3, #0]
 8005eee:	4854      	ldr	r0, [pc, #336]	; (8006040 <_printf_i+0x244>)
 8005ef0:	2f6f      	cmp	r7, #111	; 0x6f
 8005ef2:	bf0c      	ite	eq
 8005ef4:	2308      	moveq	r3, #8
 8005ef6:	230a      	movne	r3, #10
 8005ef8:	2100      	movs	r1, #0
 8005efa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005efe:	6866      	ldr	r6, [r4, #4]
 8005f00:	60a6      	str	r6, [r4, #8]
 8005f02:	2e00      	cmp	r6, #0
 8005f04:	bfa2      	ittt	ge
 8005f06:	6821      	ldrge	r1, [r4, #0]
 8005f08:	f021 0104 	bicge.w	r1, r1, #4
 8005f0c:	6021      	strge	r1, [r4, #0]
 8005f0e:	b90d      	cbnz	r5, 8005f14 <_printf_i+0x118>
 8005f10:	2e00      	cmp	r6, #0
 8005f12:	d04d      	beq.n	8005fb0 <_printf_i+0x1b4>
 8005f14:	4616      	mov	r6, r2
 8005f16:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f1a:	fb03 5711 	mls	r7, r3, r1, r5
 8005f1e:	5dc7      	ldrb	r7, [r0, r7]
 8005f20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f24:	462f      	mov	r7, r5
 8005f26:	42bb      	cmp	r3, r7
 8005f28:	460d      	mov	r5, r1
 8005f2a:	d9f4      	bls.n	8005f16 <_printf_i+0x11a>
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	d10b      	bne.n	8005f48 <_printf_i+0x14c>
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	07df      	lsls	r7, r3, #31
 8005f34:	d508      	bpl.n	8005f48 <_printf_i+0x14c>
 8005f36:	6923      	ldr	r3, [r4, #16]
 8005f38:	6861      	ldr	r1, [r4, #4]
 8005f3a:	4299      	cmp	r1, r3
 8005f3c:	bfde      	ittt	le
 8005f3e:	2330      	movle	r3, #48	; 0x30
 8005f40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f44:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005f48:	1b92      	subs	r2, r2, r6
 8005f4a:	6122      	str	r2, [r4, #16]
 8005f4c:	f8cd a000 	str.w	sl, [sp]
 8005f50:	464b      	mov	r3, r9
 8005f52:	aa03      	add	r2, sp, #12
 8005f54:	4621      	mov	r1, r4
 8005f56:	4640      	mov	r0, r8
 8005f58:	f7ff fee2 	bl	8005d20 <_printf_common>
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	d14c      	bne.n	8005ffa <_printf_i+0x1fe>
 8005f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f64:	b004      	add	sp, #16
 8005f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6a:	4835      	ldr	r0, [pc, #212]	; (8006040 <_printf_i+0x244>)
 8005f6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	680e      	ldr	r6, [r1, #0]
 8005f74:	061f      	lsls	r7, r3, #24
 8005f76:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f7a:	600e      	str	r6, [r1, #0]
 8005f7c:	d514      	bpl.n	8005fa8 <_printf_i+0x1ac>
 8005f7e:	07d9      	lsls	r1, r3, #31
 8005f80:	bf44      	itt	mi
 8005f82:	f043 0320 	orrmi.w	r3, r3, #32
 8005f86:	6023      	strmi	r3, [r4, #0]
 8005f88:	b91d      	cbnz	r5, 8005f92 <_printf_i+0x196>
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	f023 0320 	bic.w	r3, r3, #32
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	2310      	movs	r3, #16
 8005f94:	e7b0      	b.n	8005ef8 <_printf_i+0xfc>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	f043 0320 	orr.w	r3, r3, #32
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	2378      	movs	r3, #120	; 0x78
 8005fa0:	4828      	ldr	r0, [pc, #160]	; (8006044 <_printf_i+0x248>)
 8005fa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fa6:	e7e3      	b.n	8005f70 <_printf_i+0x174>
 8005fa8:	065e      	lsls	r6, r3, #25
 8005faa:	bf48      	it	mi
 8005fac:	b2ad      	uxthmi	r5, r5
 8005fae:	e7e6      	b.n	8005f7e <_printf_i+0x182>
 8005fb0:	4616      	mov	r6, r2
 8005fb2:	e7bb      	b.n	8005f2c <_printf_i+0x130>
 8005fb4:	680b      	ldr	r3, [r1, #0]
 8005fb6:	6826      	ldr	r6, [r4, #0]
 8005fb8:	6960      	ldr	r0, [r4, #20]
 8005fba:	1d1d      	adds	r5, r3, #4
 8005fbc:	600d      	str	r5, [r1, #0]
 8005fbe:	0635      	lsls	r5, r6, #24
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	d501      	bpl.n	8005fc8 <_printf_i+0x1cc>
 8005fc4:	6018      	str	r0, [r3, #0]
 8005fc6:	e002      	b.n	8005fce <_printf_i+0x1d2>
 8005fc8:	0671      	lsls	r1, r6, #25
 8005fca:	d5fb      	bpl.n	8005fc4 <_printf_i+0x1c8>
 8005fcc:	8018      	strh	r0, [r3, #0]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	6123      	str	r3, [r4, #16]
 8005fd2:	4616      	mov	r6, r2
 8005fd4:	e7ba      	b.n	8005f4c <_printf_i+0x150>
 8005fd6:	680b      	ldr	r3, [r1, #0]
 8005fd8:	1d1a      	adds	r2, r3, #4
 8005fda:	600a      	str	r2, [r1, #0]
 8005fdc:	681e      	ldr	r6, [r3, #0]
 8005fde:	6862      	ldr	r2, [r4, #4]
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	f7fa f8fc 	bl	80001e0 <memchr>
 8005fe8:	b108      	cbz	r0, 8005fee <_printf_i+0x1f2>
 8005fea:	1b80      	subs	r0, r0, r6
 8005fec:	6060      	str	r0, [r4, #4]
 8005fee:	6863      	ldr	r3, [r4, #4]
 8005ff0:	6123      	str	r3, [r4, #16]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ff8:	e7a8      	b.n	8005f4c <_printf_i+0x150>
 8005ffa:	6923      	ldr	r3, [r4, #16]
 8005ffc:	4632      	mov	r2, r6
 8005ffe:	4649      	mov	r1, r9
 8006000:	4640      	mov	r0, r8
 8006002:	47d0      	blx	sl
 8006004:	3001      	adds	r0, #1
 8006006:	d0ab      	beq.n	8005f60 <_printf_i+0x164>
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	079b      	lsls	r3, r3, #30
 800600c:	d413      	bmi.n	8006036 <_printf_i+0x23a>
 800600e:	68e0      	ldr	r0, [r4, #12]
 8006010:	9b03      	ldr	r3, [sp, #12]
 8006012:	4298      	cmp	r0, r3
 8006014:	bfb8      	it	lt
 8006016:	4618      	movlt	r0, r3
 8006018:	e7a4      	b.n	8005f64 <_printf_i+0x168>
 800601a:	2301      	movs	r3, #1
 800601c:	4632      	mov	r2, r6
 800601e:	4649      	mov	r1, r9
 8006020:	4640      	mov	r0, r8
 8006022:	47d0      	blx	sl
 8006024:	3001      	adds	r0, #1
 8006026:	d09b      	beq.n	8005f60 <_printf_i+0x164>
 8006028:	3501      	adds	r5, #1
 800602a:	68e3      	ldr	r3, [r4, #12]
 800602c:	9903      	ldr	r1, [sp, #12]
 800602e:	1a5b      	subs	r3, r3, r1
 8006030:	42ab      	cmp	r3, r5
 8006032:	dcf2      	bgt.n	800601a <_printf_i+0x21e>
 8006034:	e7eb      	b.n	800600e <_printf_i+0x212>
 8006036:	2500      	movs	r5, #0
 8006038:	f104 0619 	add.w	r6, r4, #25
 800603c:	e7f5      	b.n	800602a <_printf_i+0x22e>
 800603e:	bf00      	nop
 8006040:	0800641d 	.word	0x0800641d
 8006044:	0800642e 	.word	0x0800642e

08006048 <_sbrk_r>:
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	4d06      	ldr	r5, [pc, #24]	; (8006064 <_sbrk_r+0x1c>)
 800604c:	2300      	movs	r3, #0
 800604e:	4604      	mov	r4, r0
 8006050:	4608      	mov	r0, r1
 8006052:	602b      	str	r3, [r5, #0]
 8006054:	f7fb fa7a 	bl	800154c <_sbrk>
 8006058:	1c43      	adds	r3, r0, #1
 800605a:	d102      	bne.n	8006062 <_sbrk_r+0x1a>
 800605c:	682b      	ldr	r3, [r5, #0]
 800605e:	b103      	cbz	r3, 8006062 <_sbrk_r+0x1a>
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	bd38      	pop	{r3, r4, r5, pc}
 8006064:	20000b18 	.word	0x20000b18

08006068 <__sread>:
 8006068:	b510      	push	{r4, lr}
 800606a:	460c      	mov	r4, r1
 800606c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006070:	f000 f8a0 	bl	80061b4 <_read_r>
 8006074:	2800      	cmp	r0, #0
 8006076:	bfab      	itete	ge
 8006078:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800607a:	89a3      	ldrhlt	r3, [r4, #12]
 800607c:	181b      	addge	r3, r3, r0
 800607e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006082:	bfac      	ite	ge
 8006084:	6563      	strge	r3, [r4, #84]	; 0x54
 8006086:	81a3      	strhlt	r3, [r4, #12]
 8006088:	bd10      	pop	{r4, pc}

0800608a <__swrite>:
 800608a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800608e:	461f      	mov	r7, r3
 8006090:	898b      	ldrh	r3, [r1, #12]
 8006092:	05db      	lsls	r3, r3, #23
 8006094:	4605      	mov	r5, r0
 8006096:	460c      	mov	r4, r1
 8006098:	4616      	mov	r6, r2
 800609a:	d505      	bpl.n	80060a8 <__swrite+0x1e>
 800609c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a0:	2302      	movs	r3, #2
 80060a2:	2200      	movs	r2, #0
 80060a4:	f000 f868 	bl	8006178 <_lseek_r>
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060b2:	81a3      	strh	r3, [r4, #12]
 80060b4:	4632      	mov	r2, r6
 80060b6:	463b      	mov	r3, r7
 80060b8:	4628      	mov	r0, r5
 80060ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060be:	f000 b817 	b.w	80060f0 <_write_r>

080060c2 <__sseek>:
 80060c2:	b510      	push	{r4, lr}
 80060c4:	460c      	mov	r4, r1
 80060c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ca:	f000 f855 	bl	8006178 <_lseek_r>
 80060ce:	1c43      	adds	r3, r0, #1
 80060d0:	89a3      	ldrh	r3, [r4, #12]
 80060d2:	bf15      	itete	ne
 80060d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80060d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060de:	81a3      	strheq	r3, [r4, #12]
 80060e0:	bf18      	it	ne
 80060e2:	81a3      	strhne	r3, [r4, #12]
 80060e4:	bd10      	pop	{r4, pc}

080060e6 <__sclose>:
 80060e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ea:	f000 b813 	b.w	8006114 <_close_r>
	...

080060f0 <_write_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4d07      	ldr	r5, [pc, #28]	; (8006110 <_write_r+0x20>)
 80060f4:	4604      	mov	r4, r0
 80060f6:	4608      	mov	r0, r1
 80060f8:	4611      	mov	r1, r2
 80060fa:	2200      	movs	r2, #0
 80060fc:	602a      	str	r2, [r5, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	f7fb f9d3 	bl	80014aa <_write>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	d102      	bne.n	800610e <_write_r+0x1e>
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	b103      	cbz	r3, 800610e <_write_r+0x1e>
 800610c:	6023      	str	r3, [r4, #0]
 800610e:	bd38      	pop	{r3, r4, r5, pc}
 8006110:	20000b18 	.word	0x20000b18

08006114 <_close_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4d06      	ldr	r5, [pc, #24]	; (8006130 <_close_r+0x1c>)
 8006118:	2300      	movs	r3, #0
 800611a:	4604      	mov	r4, r0
 800611c:	4608      	mov	r0, r1
 800611e:	602b      	str	r3, [r5, #0]
 8006120:	f7fb f9df 	bl	80014e2 <_close>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d102      	bne.n	800612e <_close_r+0x1a>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	b103      	cbz	r3, 800612e <_close_r+0x1a>
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	20000b18 	.word	0x20000b18

08006134 <_fstat_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	4d07      	ldr	r5, [pc, #28]	; (8006154 <_fstat_r+0x20>)
 8006138:	2300      	movs	r3, #0
 800613a:	4604      	mov	r4, r0
 800613c:	4608      	mov	r0, r1
 800613e:	4611      	mov	r1, r2
 8006140:	602b      	str	r3, [r5, #0]
 8006142:	f7fb f9da 	bl	80014fa <_fstat>
 8006146:	1c43      	adds	r3, r0, #1
 8006148:	d102      	bne.n	8006150 <_fstat_r+0x1c>
 800614a:	682b      	ldr	r3, [r5, #0]
 800614c:	b103      	cbz	r3, 8006150 <_fstat_r+0x1c>
 800614e:	6023      	str	r3, [r4, #0]
 8006150:	bd38      	pop	{r3, r4, r5, pc}
 8006152:	bf00      	nop
 8006154:	20000b18 	.word	0x20000b18

08006158 <_isatty_r>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	4d06      	ldr	r5, [pc, #24]	; (8006174 <_isatty_r+0x1c>)
 800615c:	2300      	movs	r3, #0
 800615e:	4604      	mov	r4, r0
 8006160:	4608      	mov	r0, r1
 8006162:	602b      	str	r3, [r5, #0]
 8006164:	f7fb f9d9 	bl	800151a <_isatty>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d102      	bne.n	8006172 <_isatty_r+0x1a>
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	b103      	cbz	r3, 8006172 <_isatty_r+0x1a>
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	bd38      	pop	{r3, r4, r5, pc}
 8006174:	20000b18 	.word	0x20000b18

08006178 <_lseek_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4d07      	ldr	r5, [pc, #28]	; (8006198 <_lseek_r+0x20>)
 800617c:	4604      	mov	r4, r0
 800617e:	4608      	mov	r0, r1
 8006180:	4611      	mov	r1, r2
 8006182:	2200      	movs	r2, #0
 8006184:	602a      	str	r2, [r5, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	f7fb f9d2 	bl	8001530 <_lseek>
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	d102      	bne.n	8006196 <_lseek_r+0x1e>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	b103      	cbz	r3, 8006196 <_lseek_r+0x1e>
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	bd38      	pop	{r3, r4, r5, pc}
 8006198:	20000b18 	.word	0x20000b18

0800619c <__malloc_lock>:
 800619c:	4801      	ldr	r0, [pc, #4]	; (80061a4 <__malloc_lock+0x8>)
 800619e:	f7ff bb55 	b.w	800584c <__retarget_lock_acquire_recursive>
 80061a2:	bf00      	nop
 80061a4:	20000b10 	.word	0x20000b10

080061a8 <__malloc_unlock>:
 80061a8:	4801      	ldr	r0, [pc, #4]	; (80061b0 <__malloc_unlock+0x8>)
 80061aa:	f7ff bb50 	b.w	800584e <__retarget_lock_release_recursive>
 80061ae:	bf00      	nop
 80061b0:	20000b10 	.word	0x20000b10

080061b4 <_read_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	4d07      	ldr	r5, [pc, #28]	; (80061d4 <_read_r+0x20>)
 80061b8:	4604      	mov	r4, r0
 80061ba:	4608      	mov	r0, r1
 80061bc:	4611      	mov	r1, r2
 80061be:	2200      	movs	r2, #0
 80061c0:	602a      	str	r2, [r5, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	f7fb f954 	bl	8001470 <_read>
 80061c8:	1c43      	adds	r3, r0, #1
 80061ca:	d102      	bne.n	80061d2 <_read_r+0x1e>
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	b103      	cbz	r3, 80061d2 <_read_r+0x1e>
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	bd38      	pop	{r3, r4, r5, pc}
 80061d4:	20000b18 	.word	0x20000b18

080061d8 <_init>:
 80061d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061da:	bf00      	nop
 80061dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061de:	bc08      	pop	{r3}
 80061e0:	469e      	mov	lr, r3
 80061e2:	4770      	bx	lr

080061e4 <_fini>:
 80061e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e6:	bf00      	nop
 80061e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ea:	bc08      	pop	{r3}
 80061ec:	469e      	mov	lr, r3
 80061ee:	4770      	bx	lr
