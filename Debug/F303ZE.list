
F303ZE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b78  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006d0c  08006d0c  00016d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d44  08006d44  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006d44  08006d44  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d44  08006d44  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d44  08006d44  00016d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d48  08006d48  00016d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c54  20000010  08006d5c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c64  08006d5c  00020c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef9e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002581  00000000  00000000  0002efde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  00031560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  00032150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023050  00000000  00000000  00032c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117a8  00000000  00000000  00055c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d53cb  00000000  00000000  00067430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c7fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f84  00000000  00000000  0013c850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006cf4 	.word	0x08006cf4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08006cf4 	.word	0x08006cf4

080001d4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b090      	sub	sp, #64	; 0x40
 80001d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80001da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80001e6:	f107 031c 	add.w	r3, r7, #28
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]
 80001f4:	611a      	str	r2, [r3, #16]
 80001f6:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
 8000204:	611a      	str	r2, [r3, #16]
 8000206:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000208:	4b7f      	ldr	r3, [pc, #508]	; (8000408 <MX_ADC1_Init+0x234>)
 800020a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800020e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000210:	4b7d      	ldr	r3, [pc, #500]	; (8000408 <MX_ADC1_Init+0x234>)
 8000212:	2200      	movs	r2, #0
 8000214:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000216:	4b7c      	ldr	r3, [pc, #496]	; (8000408 <MX_ADC1_Init+0x234>)
 8000218:	2200      	movs	r2, #0
 800021a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800021c:	4b7a      	ldr	r3, [pc, #488]	; (8000408 <MX_ADC1_Init+0x234>)
 800021e:	2201      	movs	r2, #1
 8000220:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000222:	4b79      	ldr	r3, [pc, #484]	; (8000408 <MX_ADC1_Init+0x234>)
 8000224:	2201      	movs	r2, #1
 8000226:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000228:	4b77      	ldr	r3, [pc, #476]	; (8000408 <MX_ADC1_Init+0x234>)
 800022a:	2200      	movs	r2, #0
 800022c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000230:	4b75      	ldr	r3, [pc, #468]	; (8000408 <MX_ADC1_Init+0x234>)
 8000232:	2200      	movs	r2, #0
 8000234:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000236:	4b74      	ldr	r3, [pc, #464]	; (8000408 <MX_ADC1_Init+0x234>)
 8000238:	2201      	movs	r2, #1
 800023a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800023c:	4b72      	ldr	r3, [pc, #456]	; (8000408 <MX_ADC1_Init+0x234>)
 800023e:	2200      	movs	r2, #0
 8000240:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 8000242:	4b71      	ldr	r3, [pc, #452]	; (8000408 <MX_ADC1_Init+0x234>)
 8000244:	220b      	movs	r2, #11
 8000246:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000248:	4b6f      	ldr	r3, [pc, #444]	; (8000408 <MX_ADC1_Init+0x234>)
 800024a:	2200      	movs	r2, #0
 800024c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000250:	4b6d      	ldr	r3, [pc, #436]	; (8000408 <MX_ADC1_Init+0x234>)
 8000252:	2204      	movs	r2, #4
 8000254:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000256:	4b6c      	ldr	r3, [pc, #432]	; (8000408 <MX_ADC1_Init+0x234>)
 8000258:	2200      	movs	r2, #0
 800025a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800025c:	4b6a      	ldr	r3, [pc, #424]	; (8000408 <MX_ADC1_Init+0x234>)
 800025e:	2200      	movs	r2, #0
 8000260:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000262:	4869      	ldr	r0, [pc, #420]	; (8000408 <MX_ADC1_Init+0x234>)
 8000264:	f002 fcbe 	bl	8002be4 <HAL_ADC_Init>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800026e:	f002 f9fb 	bl	8002668 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000272:	2300      	movs	r3, #0
 8000274:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000276:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800027a:	4619      	mov	r1, r3
 800027c:	4862      	ldr	r0, [pc, #392]	; (8000408 <MX_ADC1_Init+0x234>)
 800027e:	f003 fbff 	bl	8003a80 <HAL_ADCEx_MultiModeConfigChannel>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000288:	f002 f9ee 	bl	8002668 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 800028c:	2301      	movs	r3, #1
 800028e:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_ALL_REG;
 8000290:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000294:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.HighThreshold = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.LowThreshold = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.ITMode = DISABLE;
 800029e:	2300      	movs	r3, #0
 80002a0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80002a4:	f107 031c 	add.w	r3, r7, #28
 80002a8:	4619      	mov	r1, r3
 80002aa:	4857      	ldr	r0, [pc, #348]	; (8000408 <MX_ADC1_Init+0x234>)
 80002ac:	f003 fa9c 	bl	80037e8 <HAL_ADC_AnalogWDGConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80002b6:	f002 f9d7 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002ba:	2301      	movs	r3, #1
 80002bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002be:	2301      	movs	r3, #1
 80002c0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4619      	mov	r1, r3
 80002d6:	484c      	ldr	r0, [pc, #304]	; (8000408 <MX_ADC1_Init+0x234>)
 80002d8:	f002 ff9a 	bl	8003210 <HAL_ADC_ConfigChannel>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 80002e2:	f002 f9c1 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002e6:	2302      	movs	r3, #2
 80002e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002ea:	2302      	movs	r3, #2
 80002ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4619      	mov	r1, r3
 80002f2:	4845      	ldr	r0, [pc, #276]	; (8000408 <MX_ADC1_Init+0x234>)
 80002f4:	f002 ff8c 	bl	8003210 <HAL_ADC_ConfigChannel>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 80002fe:	f002 f9b3 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000302:	2303      	movs	r3, #3
 8000304:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000306:	2303      	movs	r3, #3
 8000308:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4619      	mov	r1, r3
 800030e:	483e      	ldr	r0, [pc, #248]	; (8000408 <MX_ADC1_Init+0x234>)
 8000310:	f002 ff7e 	bl	8003210 <HAL_ADC_ConfigChannel>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 800031a:	f002 f9a5 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800031e:	2304      	movs	r3, #4
 8000320:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000322:	2304      	movs	r3, #4
 8000324:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4619      	mov	r1, r3
 800032a:	4837      	ldr	r0, [pc, #220]	; (8000408 <MX_ADC1_Init+0x234>)
 800032c:	f002 ff70 	bl	8003210 <HAL_ADC_ConfigChannel>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 8000336:	f002 f997 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800033a:	2305      	movs	r3, #5
 800033c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800033e:	2305      	movs	r3, #5
 8000340:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	4619      	mov	r1, r3
 8000346:	4830      	ldr	r0, [pc, #192]	; (8000408 <MX_ADC1_Init+0x234>)
 8000348:	f002 ff62 	bl	8003210 <HAL_ADC_ConfigChannel>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_ADC1_Init+0x182>
  {
    Error_Handler();
 8000352:	f002 f989 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000356:	2306      	movs	r3, #6
 8000358:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800035a:	2306      	movs	r3, #6
 800035c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4619      	mov	r1, r3
 8000362:	4829      	ldr	r0, [pc, #164]	; (8000408 <MX_ADC1_Init+0x234>)
 8000364:	f002 ff54 	bl	8003210 <HAL_ADC_ConfigChannel>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_ADC1_Init+0x19e>
  {
    Error_Handler();
 800036e:	f002 f97b 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000372:	2307      	movs	r3, #7
 8000374:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000376:	2307      	movs	r3, #7
 8000378:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	4619      	mov	r1, r3
 800037e:	4822      	ldr	r0, [pc, #136]	; (8000408 <MX_ADC1_Init+0x234>)
 8000380:	f002 ff46 	bl	8003210 <HAL_ADC_ConfigChannel>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_ADC1_Init+0x1ba>
  {
    Error_Handler();
 800038a:	f002 f96d 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800038e:	2308      	movs	r3, #8
 8000390:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000392:	2308      	movs	r3, #8
 8000394:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4619      	mov	r1, r3
 800039a:	481b      	ldr	r0, [pc, #108]	; (8000408 <MX_ADC1_Init+0x234>)
 800039c:	f002 ff38 	bl	8003210 <HAL_ADC_ConfigChannel>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 80003a6:	f002 f95f 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80003aa:	2309      	movs	r3, #9
 80003ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80003ae:	2309      	movs	r3, #9
 80003b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	4619      	mov	r1, r3
 80003b6:	4814      	ldr	r0, [pc, #80]	; (8000408 <MX_ADC1_Init+0x234>)
 80003b8:	f002 ff2a 	bl	8003210 <HAL_ADC_ConfigChannel>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_ADC1_Init+0x1f2>
  {
    Error_Handler();
 80003c2:	f002 f951 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80003c6:	230a      	movs	r3, #10
 80003c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80003ca:	230a      	movs	r3, #10
 80003cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	4619      	mov	r1, r3
 80003d2:	480d      	ldr	r0, [pc, #52]	; (8000408 <MX_ADC1_Init+0x234>)
 80003d4:	f002 ff1c 	bl	8003210 <HAL_ADC_ConfigChannel>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 80003de:	f002 f943 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80003e2:	230e      	movs	r3, #14
 80003e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80003e6:	230b      	movs	r3, #11
 80003e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	4619      	mov	r1, r3
 80003ee:	4806      	ldr	r0, [pc, #24]	; (8000408 <MX_ADC1_Init+0x234>)
 80003f0:	f002 ff0e 	bl	8003210 <HAL_ADC_ConfigChannel>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_ADC1_Init+0x22a>
  {
    Error_Handler();
 80003fa:	f002 f935 	bl	8002668 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	3740      	adds	r7, #64	; 0x40
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	2000010c 	.word	0x2000010c

0800040c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b08c      	sub	sp, #48	; 0x30
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000412:	f107 0318 	add.w	r3, r7, #24
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
 8000420:	611a      	str	r2, [r3, #16]
 8000422:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000424:	463b      	mov	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]
 8000432:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000434:	4b5d      	ldr	r3, [pc, #372]	; (80005ac <MX_ADC2_Init+0x1a0>)
 8000436:	4a5e      	ldr	r2, [pc, #376]	; (80005b0 <MX_ADC2_Init+0x1a4>)
 8000438:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800043a:	4b5c      	ldr	r3, [pc, #368]	; (80005ac <MX_ADC2_Init+0x1a0>)
 800043c:	2200      	movs	r2, #0
 800043e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000440:	4b5a      	ldr	r3, [pc, #360]	; (80005ac <MX_ADC2_Init+0x1a0>)
 8000442:	2200      	movs	r2, #0
 8000444:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000446:	4b59      	ldr	r3, [pc, #356]	; (80005ac <MX_ADC2_Init+0x1a0>)
 8000448:	2201      	movs	r2, #1
 800044a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800044c:	4b57      	ldr	r3, [pc, #348]	; (80005ac <MX_ADC2_Init+0x1a0>)
 800044e:	2200      	movs	r2, #0
 8000450:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8000452:	4b56      	ldr	r3, [pc, #344]	; (80005ac <MX_ADC2_Init+0x1a0>)
 8000454:	2201      	movs	r2, #1
 8000456:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 7;
 800045a:	4b54      	ldr	r3, [pc, #336]	; (80005ac <MX_ADC2_Init+0x1a0>)
 800045c:	2207      	movs	r2, #7
 800045e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000460:	4b52      	ldr	r3, [pc, #328]	; (80005ac <MX_ADC2_Init+0x1a0>)
 8000462:	2200      	movs	r2, #0
 8000464:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000466:	4b51      	ldr	r3, [pc, #324]	; (80005ac <MX_ADC2_Init+0x1a0>)
 8000468:	2201      	movs	r2, #1
 800046a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800046c:	4b4f      	ldr	r3, [pc, #316]	; (80005ac <MX_ADC2_Init+0x1a0>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 7;
 8000472:	4b4e      	ldr	r3, [pc, #312]	; (80005ac <MX_ADC2_Init+0x1a0>)
 8000474:	2207      	movs	r2, #7
 8000476:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000478:	4b4c      	ldr	r3, [pc, #304]	; (80005ac <MX_ADC2_Init+0x1a0>)
 800047a:	2200      	movs	r2, #0
 800047c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000480:	4b4a      	ldr	r3, [pc, #296]	; (80005ac <MX_ADC2_Init+0x1a0>)
 8000482:	2204      	movs	r2, #4
 8000484:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000486:	4b49      	ldr	r3, [pc, #292]	; (80005ac <MX_ADC2_Init+0x1a0>)
 8000488:	2200      	movs	r2, #0
 800048a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800048c:	4b47      	ldr	r3, [pc, #284]	; (80005ac <MX_ADC2_Init+0x1a0>)
 800048e:	2200      	movs	r2, #0
 8000490:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000492:	4846      	ldr	r0, [pc, #280]	; (80005ac <MX_ADC2_Init+0x1a0>)
 8000494:	f002 fba6 	bl	8002be4 <HAL_ADC_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_ADC2_Init+0x96>
  {
    Error_Handler();
 800049e:	f002 f8e3 	bl	8002668 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80004a2:	2301      	movs	r3, #1
 80004a4:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_ALL_REG;
 80004a6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80004aa:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.HighThreshold = 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.LowThreshold = 0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.ITMode = DISABLE;
 80004b4:	2300      	movs	r3, #0
 80004b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80004ba:	f107 0318 	add.w	r3, r7, #24
 80004be:	4619      	mov	r1, r3
 80004c0:	483a      	ldr	r0, [pc, #232]	; (80005ac <MX_ADC2_Init+0x1a0>)
 80004c2:	f003 f991 	bl	80037e8 <HAL_ADC_AnalogWDGConfig>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_ADC2_Init+0xc4>
  {
    Error_Handler();
 80004cc:	f002 f8cc 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004d0:	2301      	movs	r3, #1
 80004d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004d4:	2301      	movs	r3, #1
 80004d6:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004d8:	2300      	movs	r3, #0
 80004da:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004dc:	2300      	movs	r3, #0
 80004de:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004e0:	2300      	movs	r3, #0
 80004e2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004e8:	463b      	mov	r3, r7
 80004ea:	4619      	mov	r1, r3
 80004ec:	482f      	ldr	r0, [pc, #188]	; (80005ac <MX_ADC2_Init+0x1a0>)
 80004ee:	f002 fe8f 	bl	8003210 <HAL_ADC_ConfigChannel>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 80004f8:	f002 f8b6 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80004fc:	2302      	movs	r3, #2
 80004fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000500:	2302      	movs	r3, #2
 8000502:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000504:	463b      	mov	r3, r7
 8000506:	4619      	mov	r1, r3
 8000508:	4828      	ldr	r0, [pc, #160]	; (80005ac <MX_ADC2_Init+0x1a0>)
 800050a:	f002 fe81 	bl	8003210 <HAL_ADC_ConfigChannel>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_ADC2_Init+0x10c>
  {
    Error_Handler();
 8000514:	f002 f8a8 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000518:	2303      	movs	r3, #3
 800051a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800051c:	2303      	movs	r3, #3
 800051e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000520:	463b      	mov	r3, r7
 8000522:	4619      	mov	r1, r3
 8000524:	4821      	ldr	r0, [pc, #132]	; (80005ac <MX_ADC2_Init+0x1a0>)
 8000526:	f002 fe73 	bl	8003210 <HAL_ADC_ConfigChannel>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 8000530:	f002 f89a 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000534:	2304      	movs	r3, #4
 8000536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000538:	2304      	movs	r3, #4
 800053a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800053c:	463b      	mov	r3, r7
 800053e:	4619      	mov	r1, r3
 8000540:	481a      	ldr	r0, [pc, #104]	; (80005ac <MX_ADC2_Init+0x1a0>)
 8000542:	f002 fe65 	bl	8003210 <HAL_ADC_ConfigChannel>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_ADC2_Init+0x144>
  {
    Error_Handler();
 800054c:	f002 f88c 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000550:	2305      	movs	r3, #5
 8000552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000554:	2305      	movs	r3, #5
 8000556:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000558:	463b      	mov	r3, r7
 800055a:	4619      	mov	r1, r3
 800055c:	4813      	ldr	r0, [pc, #76]	; (80005ac <MX_ADC2_Init+0x1a0>)
 800055e:	f002 fe57 	bl	8003210 <HAL_ADC_ConfigChannel>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_ADC2_Init+0x160>
  {
    Error_Handler();
 8000568:	f002 f87e 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800056c:	230b      	movs	r3, #11
 800056e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000570:	2306      	movs	r3, #6
 8000572:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000574:	463b      	mov	r3, r7
 8000576:	4619      	mov	r1, r3
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <MX_ADC2_Init+0x1a0>)
 800057a:	f002 fe49 	bl	8003210 <HAL_ADC_ConfigChannel>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_ADC2_Init+0x17c>
  {
    Error_Handler();
 8000584:	f002 f870 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000588:	230c      	movs	r3, #12
 800058a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800058c:	2307      	movs	r3, #7
 800058e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <MX_ADC2_Init+0x1a0>)
 8000596:	f002 fe3b 	bl	8003210 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC2_Init+0x198>
  {
    Error_Handler();
 80005a0:	f002 f862 	bl	8002668 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80005a4:	bf00      	nop
 80005a6:	3730      	adds	r7, #48	; 0x30
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000078 	.word	0x20000078
 80005b0:	50000100 	.word	0x50000100

080005b4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b090      	sub	sp, #64	; 0x40
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]
 80005d6:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]
 80005e6:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80005e8:	4b9a      	ldr	r3, [pc, #616]	; (8000854 <MX_ADC3_Init+0x2a0>)
 80005ea:	4a9b      	ldr	r2, [pc, #620]	; (8000858 <MX_ADC3_Init+0x2a4>)
 80005ec:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005ee:	4b99      	ldr	r3, [pc, #612]	; (8000854 <MX_ADC3_Init+0x2a0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80005f4:	4b97      	ldr	r3, [pc, #604]	; (8000854 <MX_ADC3_Init+0x2a0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005fa:	4b96      	ldr	r3, [pc, #600]	; (8000854 <MX_ADC3_Init+0x2a0>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000600:	4b94      	ldr	r3, [pc, #592]	; (8000854 <MX_ADC3_Init+0x2a0>)
 8000602:	2201      	movs	r2, #1
 8000604:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000606:	4b93      	ldr	r3, [pc, #588]	; (8000854 <MX_ADC3_Init+0x2a0>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800060e:	4b91      	ldr	r3, [pc, #580]	; (8000854 <MX_ADC3_Init+0x2a0>)
 8000610:	2200      	movs	r2, #0
 8000612:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000614:	4b8f      	ldr	r3, [pc, #572]	; (8000854 <MX_ADC3_Init+0x2a0>)
 8000616:	2201      	movs	r2, #1
 8000618:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061a:	4b8e      	ldr	r3, [pc, #568]	; (8000854 <MX_ADC3_Init+0x2a0>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 15;
 8000620:	4b8c      	ldr	r3, [pc, #560]	; (8000854 <MX_ADC3_Init+0x2a0>)
 8000622:	220f      	movs	r2, #15
 8000624:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000626:	4b8b      	ldr	r3, [pc, #556]	; (8000854 <MX_ADC3_Init+0x2a0>)
 8000628:	2200      	movs	r2, #0
 800062a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062e:	4b89      	ldr	r3, [pc, #548]	; (8000854 <MX_ADC3_Init+0x2a0>)
 8000630:	2204      	movs	r2, #4
 8000632:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000634:	4b87      	ldr	r3, [pc, #540]	; (8000854 <MX_ADC3_Init+0x2a0>)
 8000636:	2200      	movs	r2, #0
 8000638:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800063a:	4b86      	ldr	r3, [pc, #536]	; (8000854 <MX_ADC3_Init+0x2a0>)
 800063c:	2200      	movs	r2, #0
 800063e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000640:	4884      	ldr	r0, [pc, #528]	; (8000854 <MX_ADC3_Init+0x2a0>)
 8000642:	f002 facf 	bl	8002be4 <HAL_ADC_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 800064c:	f002 f80c 	bl	8002668 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000650:	2300      	movs	r3, #0
 8000652:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000654:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000658:	4619      	mov	r1, r3
 800065a:	487e      	ldr	r0, [pc, #504]	; (8000854 <MX_ADC3_Init+0x2a0>)
 800065c:	f003 fa10 	bl	8003a80 <HAL_ADCEx_MultiModeConfigChannel>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000666:	f001 ffff 	bl	8002668 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 800066a:	2301      	movs	r3, #1
 800066c:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_ALL_REG;
 800066e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000672:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.HighThreshold = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.LowThreshold = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.ITMode = DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  if (HAL_ADC_AnalogWDGConfig(&hadc3, &AnalogWDGConfig) != HAL_OK)
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4619      	mov	r1, r3
 8000688:	4872      	ldr	r0, [pc, #456]	; (8000854 <MX_ADC3_Init+0x2a0>)
 800068a:	f003 f8ad 	bl	80037e8 <HAL_ADC_AnalogWDGConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 8000694:	f001 ffe8 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000698:	2301      	movs	r3, #1
 800069a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069c:	2301      	movs	r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4619      	mov	r1, r3
 80006b4:	4867      	ldr	r0, [pc, #412]	; (8000854 <MX_ADC3_Init+0x2a0>)
 80006b6:	f002 fdab 	bl	8003210 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC3_Init+0x110>
  {
    Error_Handler();
 80006c0:	f001 ffd2 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	4860      	ldr	r0, [pc, #384]	; (8000854 <MX_ADC3_Init+0x2a0>)
 80006d2:	f002 fd9d 	bl	8003210 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC3_Init+0x12c>
  {
    Error_Handler();
 80006dc:	f001 ffc4 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006e0:	2303      	movs	r3, #3
 80006e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2303      	movs	r3, #3
 80006e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	4619      	mov	r1, r3
 80006ec:	4859      	ldr	r0, [pc, #356]	; (8000854 <MX_ADC3_Init+0x2a0>)
 80006ee:	f002 fd8f 	bl	8003210 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC3_Init+0x148>
  {
    Error_Handler();
 80006f8:	f001 ffb6 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006fc:	2305      	movs	r3, #5
 80006fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2304      	movs	r3, #4
 8000702:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4619      	mov	r1, r3
 8000708:	4852      	ldr	r0, [pc, #328]	; (8000854 <MX_ADC3_Init+0x2a0>)
 800070a:	f002 fd81 	bl	8003210 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC3_Init+0x164>
  {
    Error_Handler();
 8000714:	f001 ffa8 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000718:	2306      	movs	r3, #6
 800071a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	2305      	movs	r3, #5
 800071e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	4619      	mov	r1, r3
 8000724:	484b      	ldr	r0, [pc, #300]	; (8000854 <MX_ADC3_Init+0x2a0>)
 8000726:	f002 fd73 	bl	8003210 <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC3_Init+0x180>
  {
    Error_Handler();
 8000730:	f001 ff9a 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000734:	2307      	movs	r3, #7
 8000736:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000738:	2306      	movs	r3, #6
 800073a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	4619      	mov	r1, r3
 8000740:	4844      	ldr	r0, [pc, #272]	; (8000854 <MX_ADC3_Init+0x2a0>)
 8000742:	f002 fd65 	bl	8003210 <HAL_ADC_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC3_Init+0x19c>
  {
    Error_Handler();
 800074c:	f001 ff8c 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000750:	2308      	movs	r3, #8
 8000752:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000754:	2307      	movs	r3, #7
 8000756:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	4619      	mov	r1, r3
 800075c:	483d      	ldr	r0, [pc, #244]	; (8000854 <MX_ADC3_Init+0x2a0>)
 800075e:	f002 fd57 	bl	8003210 <HAL_ADC_ConfigChannel>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC3_Init+0x1b8>
  {
    Error_Handler();
 8000768:	f001 ff7e 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800076c:	2309      	movs	r3, #9
 800076e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000770:	2308      	movs	r3, #8
 8000772:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4619      	mov	r1, r3
 8000778:	4836      	ldr	r0, [pc, #216]	; (8000854 <MX_ADC3_Init+0x2a0>)
 800077a:	f002 fd49 	bl	8003210 <HAL_ADC_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_ADC3_Init+0x1d4>
  {
    Error_Handler();
 8000784:	f001 ff70 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000788:	230a      	movs	r3, #10
 800078a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800078c:	2309      	movs	r3, #9
 800078e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	482f      	ldr	r0, [pc, #188]	; (8000854 <MX_ADC3_Init+0x2a0>)
 8000796:	f002 fd3b 	bl	8003210 <HAL_ADC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC3_Init+0x1f0>
  {
    Error_Handler();
 80007a0:	f001 ff62 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80007a4:	230b      	movs	r3, #11
 80007a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007a8:	230a      	movs	r3, #10
 80007aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4619      	mov	r1, r3
 80007b0:	4828      	ldr	r0, [pc, #160]	; (8000854 <MX_ADC3_Init+0x2a0>)
 80007b2:	f002 fd2d 	bl	8003210 <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC3_Init+0x20c>
  {
    Error_Handler();
 80007bc:	f001 ff54 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007c0:	230c      	movs	r3, #12
 80007c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007c4:	230b      	movs	r3, #11
 80007c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4619      	mov	r1, r3
 80007cc:	4821      	ldr	r0, [pc, #132]	; (8000854 <MX_ADC3_Init+0x2a0>)
 80007ce:	f002 fd1f 	bl	8003210 <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC3_Init+0x228>
  {
    Error_Handler();
 80007d8:	f001 ff46 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80007dc:	230d      	movs	r3, #13
 80007de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80007e0:	230c      	movs	r3, #12
 80007e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	4619      	mov	r1, r3
 80007e8:	481a      	ldr	r0, [pc, #104]	; (8000854 <MX_ADC3_Init+0x2a0>)
 80007ea:	f002 fd11 	bl	8003210 <HAL_ADC_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC3_Init+0x244>
  {
    Error_Handler();
 80007f4:	f001 ff38 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80007f8:	230e      	movs	r3, #14
 80007fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 80007fc:	230d      	movs	r3, #13
 80007fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	4813      	ldr	r0, [pc, #76]	; (8000854 <MX_ADC3_Init+0x2a0>)
 8000806:	f002 fd03 	bl	8003210 <HAL_ADC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC3_Init+0x260>
  {
    Error_Handler();
 8000810:	f001 ff2a 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000814:	230f      	movs	r3, #15
 8000816:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000818:	230e      	movs	r3, #14
 800081a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4619      	mov	r1, r3
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <MX_ADC3_Init+0x2a0>)
 8000822:	f002 fcf5 	bl	8003210 <HAL_ADC_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC3_Init+0x27c>
  {
    Error_Handler();
 800082c:	f001 ff1c 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000830:	2310      	movs	r3, #16
 8000832:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000834:	230f      	movs	r3, #15
 8000836:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_ADC3_Init+0x2a0>)
 800083e:	f002 fce7 	bl	8003210 <HAL_ADC_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC3_Init+0x298>
  {
    Error_Handler();
 8000848:	f001 ff0e 	bl	8002668 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	3740      	adds	r7, #64	; 0x40
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2000015c 	.word	0x2000015c
 8000858:	50000400 	.word	0x50000400

0800085c <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08c      	sub	sp, #48	; 0x30
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000862:	f107 0318 	add.w	r3, r7, #24
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
 8000872:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
 8000882:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC4_Init 1 */

  /* USER CODE END ADC4_Init 1 */
  /** Common config
  */
  hadc4.Instance = ADC4;
 8000884:	4b5c      	ldr	r3, [pc, #368]	; (80009f8 <MX_ADC4_Init+0x19c>)
 8000886:	4a5d      	ldr	r2, [pc, #372]	; (80009fc <MX_ADC4_Init+0x1a0>)
 8000888:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800088a:	4b5b      	ldr	r3, [pc, #364]	; (80009f8 <MX_ADC4_Init+0x19c>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000890:	4b59      	ldr	r3, [pc, #356]	; (80009f8 <MX_ADC4_Init+0x19c>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000896:	4b58      	ldr	r3, [pc, #352]	; (80009f8 <MX_ADC4_Init+0x19c>)
 8000898:	2201      	movs	r2, #1
 800089a:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 800089c:	4b56      	ldr	r3, [pc, #344]	; (80009f8 <MX_ADC4_Init+0x19c>)
 800089e:	2201      	movs	r2, #1
 80008a0:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80008a2:	4b55      	ldr	r3, [pc, #340]	; (80009f8 <MX_ADC4_Init+0x19c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008aa:	4b53      	ldr	r3, [pc, #332]	; (80009f8 <MX_ADC4_Init+0x19c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b0:	4b51      	ldr	r3, [pc, #324]	; (80009f8 <MX_ADC4_Init+0x19c>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b6:	4b50      	ldr	r3, [pc, #320]	; (80009f8 <MX_ADC4_Init+0x19c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 7;
 80008bc:	4b4e      	ldr	r3, [pc, #312]	; (80009f8 <MX_ADC4_Init+0x19c>)
 80008be:	2207      	movs	r2, #7
 80008c0:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80008c2:	4b4d      	ldr	r3, [pc, #308]	; (80009f8 <MX_ADC4_Init+0x19c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ca:	4b4b      	ldr	r3, [pc, #300]	; (80009f8 <MX_ADC4_Init+0x19c>)
 80008cc:	2204      	movs	r2, #4
 80008ce:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008d0:	4b49      	ldr	r3, [pc, #292]	; (80009f8 <MX_ADC4_Init+0x19c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008d6:	4b48      	ldr	r3, [pc, #288]	; (80009f8 <MX_ADC4_Init+0x19c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80008dc:	4846      	ldr	r0, [pc, #280]	; (80009f8 <MX_ADC4_Init+0x19c>)
 80008de:	f002 f981 	bl	8002be4 <HAL_ADC_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC4_Init+0x90>
  {
    Error_Handler();
 80008e8:	f001 febe 	bl	8002668 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_ALL_REG;
 80008f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80008f4:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.HighThreshold = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.LowThreshold = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.ITMode = DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_AnalogWDGConfig(&hadc4, &AnalogWDGConfig) != HAL_OK)
 8000904:	f107 0318 	add.w	r3, r7, #24
 8000908:	4619      	mov	r1, r3
 800090a:	483b      	ldr	r0, [pc, #236]	; (80009f8 <MX_ADC4_Init+0x19c>)
 800090c:	f002 ff6c 	bl	80037e8 <HAL_ADC_AnalogWDGConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_ADC4_Init+0xbe>
  {
    Error_Handler();
 8000916:	f001 fea7 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800091a:	2301      	movs	r3, #1
 800091c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800091e:	2301      	movs	r3, #1
 8000920:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	4619      	mov	r1, r3
 8000936:	4830      	ldr	r0, [pc, #192]	; (80009f8 <MX_ADC4_Init+0x19c>)
 8000938:	f002 fc6a 	bl	8003210 <HAL_ADC_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC4_Init+0xea>
  {
    Error_Handler();
 8000942:	f001 fe91 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000946:	2302      	movs	r3, #2
 8000948:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800094a:	2302      	movs	r3, #2
 800094c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	4829      	ldr	r0, [pc, #164]	; (80009f8 <MX_ADC4_Init+0x19c>)
 8000954:	f002 fc5c 	bl	8003210 <HAL_ADC_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_ADC4_Init+0x106>
  {
    Error_Handler();
 800095e:	f001 fe83 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000962:	2303      	movs	r3, #3
 8000964:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000966:	2303      	movs	r3, #3
 8000968:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800096a:	463b      	mov	r3, r7
 800096c:	4619      	mov	r1, r3
 800096e:	4822      	ldr	r0, [pc, #136]	; (80009f8 <MX_ADC4_Init+0x19c>)
 8000970:	f002 fc4e 	bl	8003210 <HAL_ADC_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_ADC4_Init+0x122>
  {
    Error_Handler();
 800097a:	f001 fe75 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800097e:	2304      	movs	r3, #4
 8000980:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000982:	2304      	movs	r3, #4
 8000984:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000986:	463b      	mov	r3, r7
 8000988:	4619      	mov	r1, r3
 800098a:	481b      	ldr	r0, [pc, #108]	; (80009f8 <MX_ADC4_Init+0x19c>)
 800098c:	f002 fc40 	bl	8003210 <HAL_ADC_ConfigChannel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_ADC4_Init+0x13e>
  {
    Error_Handler();
 8000996:	f001 fe67 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800099a:	2305      	movs	r3, #5
 800099c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800099e:	2305      	movs	r3, #5
 80009a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	4619      	mov	r1, r3
 80009a6:	4814      	ldr	r0, [pc, #80]	; (80009f8 <MX_ADC4_Init+0x19c>)
 80009a8:	f002 fc32 	bl	8003210 <HAL_ADC_ConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_ADC4_Init+0x15a>
  {
    Error_Handler();
 80009b2:	f001 fe59 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80009b6:	230c      	movs	r3, #12
 80009b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80009ba:	2306      	movs	r3, #6
 80009bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009be:	463b      	mov	r3, r7
 80009c0:	4619      	mov	r1, r3
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <MX_ADC4_Init+0x19c>)
 80009c4:	f002 fc24 	bl	8003210 <HAL_ADC_ConfigChannel>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_ADC4_Init+0x176>
  {
    Error_Handler();
 80009ce:	f001 fe4b 	bl	8002668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80009d2:	230d      	movs	r3, #13
 80009d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80009d6:	2307      	movs	r3, #7
 80009d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	; (80009f8 <MX_ADC4_Init+0x19c>)
 80009e0:	f002 fc16 	bl	8003210 <HAL_ADC_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_ADC4_Init+0x192>
  {
    Error_Handler();
 80009ea:	f001 fe3d 	bl	8002668 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	3730      	adds	r7, #48	; 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200001f0 	.word	0x200001f0
 80009fc:	50000500 	.word	0x50000500

08000a00 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC34_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b098      	sub	sp, #96	; 0x60
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a20:	f040 80a0 	bne.w	8000b64 <HAL_ADC_MspInit+0x164>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a24:	4b99      	ldr	r3, [pc, #612]	; (8000c8c <HAL_ADC_MspInit+0x28c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	4a98      	ldr	r2, [pc, #608]	; (8000c8c <HAL_ADC_MspInit+0x28c>)
 8000a2c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a2e:	4b97      	ldr	r3, [pc, #604]	; (8000c8c <HAL_ADC_MspInit+0x28c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d10b      	bne.n	8000a4e <HAL_ADC_MspInit+0x4e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a36:	4b96      	ldr	r3, [pc, #600]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	4a95      	ldr	r2, [pc, #596]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	6153      	str	r3, [r2, #20]
 8000a42:	4b93      	ldr	r3, [pc, #588]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a4e:	4b90      	ldr	r3, [pc, #576]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	4a8f      	ldr	r2, [pc, #572]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000a54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a58:	6153      	str	r3, [r2, #20]
 8000a5a:	4b8d      	ldr	r3, [pc, #564]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a62:	647b      	str	r3, [r7, #68]	; 0x44
 8000a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	4b8a      	ldr	r3, [pc, #552]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4a89      	ldr	r2, [pc, #548]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000a6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a70:	6153      	str	r3, [r2, #20]
 8000a72:	4b87      	ldr	r3, [pc, #540]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a7a:	643b      	str	r3, [r7, #64]	; 0x40
 8000a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4b84      	ldr	r3, [pc, #528]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	4a83      	ldr	r2, [pc, #524]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	6153      	str	r3, [r2, #20]
 8000a8a:	4b81      	ldr	r3, [pc, #516]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	4b7e      	ldr	r3, [pc, #504]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	4a7d      	ldr	r2, [pc, #500]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aa0:	6153      	str	r3, [r2, #20]
 8000aa2:	4b7b      	ldr	r3, [pc, #492]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8000aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB11     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000aae:	2314      	movs	r3, #20
 8000ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4874      	ldr	r0, [pc, #464]	; (8000c94 <HAL_ADC_MspInit+0x294>)
 8000ac2:	f003 fcb7 	bl	8004434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aca:	2303      	movs	r3, #3
 8000acc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	486f      	ldr	r0, [pc, #444]	; (8000c98 <HAL_ADC_MspInit+0x298>)
 8000ada:	f003 fcab 	bl	8004434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ade:	230f      	movs	r3, #15
 8000ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aee:	4619      	mov	r1, r3
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af4:	f003 fc9e 	bl	8004434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000af8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000afc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afe:	2303      	movs	r3, #3
 8000b00:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4863      	ldr	r0, [pc, #396]	; (8000c9c <HAL_ADC_MspInit+0x29c>)
 8000b0e:	f003 fc91 	bl	8004434 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b12:	4b63      	ldr	r3, [pc, #396]	; (8000ca0 <HAL_ADC_MspInit+0x2a0>)
 8000b14:	4a63      	ldr	r2, [pc, #396]	; (8000ca4 <HAL_ADC_MspInit+0x2a4>)
 8000b16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b18:	4b61      	ldr	r3, [pc, #388]	; (8000ca0 <HAL_ADC_MspInit+0x2a0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b1e:	4b60      	ldr	r3, [pc, #384]	; (8000ca0 <HAL_ADC_MspInit+0x2a0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b24:	4b5e      	ldr	r3, [pc, #376]	; (8000ca0 <HAL_ADC_MspInit+0x2a0>)
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b2a:	4b5d      	ldr	r3, [pc, #372]	; (8000ca0 <HAL_ADC_MspInit+0x2a0>)
 8000b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b30:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b32:	4b5b      	ldr	r3, [pc, #364]	; (8000ca0 <HAL_ADC_MspInit+0x2a0>)
 8000b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b38:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b3a:	4b59      	ldr	r3, [pc, #356]	; (8000ca0 <HAL_ADC_MspInit+0x2a0>)
 8000b3c:	2220      	movs	r2, #32
 8000b3e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b40:	4b57      	ldr	r3, [pc, #348]	; (8000ca0 <HAL_ADC_MspInit+0x2a0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b46:	4856      	ldr	r0, [pc, #344]	; (8000ca0 <HAL_ADC_MspInit+0x2a0>)
 8000b48:	f003 fac1 	bl	80040ce <HAL_DMA_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_ADC_MspInit+0x156>
    {
      Error_Handler();
 8000b52:	f001 fd89 	bl	8002668 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a51      	ldr	r2, [pc, #324]	; (8000ca0 <HAL_ADC_MspInit+0x2a0>)
 8000b5a:	639a      	str	r2, [r3, #56]	; 0x38
 8000b5c:	4a50      	ldr	r2, [pc, #320]	; (8000ca0 <HAL_ADC_MspInit+0x2a0>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000b62:	e1cc      	b.n	8000efe <HAL_ADC_MspInit+0x4fe>
  else if(adcHandle->Instance==ADC2)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a4f      	ldr	r2, [pc, #316]	; (8000ca8 <HAL_ADC_MspInit+0x2a8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	f040 80a4 	bne.w	8000cb8 <HAL_ADC_MspInit+0x2b8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b70:	4b46      	ldr	r3, [pc, #280]	; (8000c8c <HAL_ADC_MspInit+0x28c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	4a45      	ldr	r2, [pc, #276]	; (8000c8c <HAL_ADC_MspInit+0x28c>)
 8000b78:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b7a:	4b44      	ldr	r3, [pc, #272]	; (8000c8c <HAL_ADC_MspInit+0x28c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d10b      	bne.n	8000b9a <HAL_ADC_MspInit+0x19a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b82:	4b43      	ldr	r3, [pc, #268]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	4a42      	ldr	r2, [pc, #264]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	6153      	str	r3, [r2, #20]
 8000b8e:	4b40      	ldr	r3, [pc, #256]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	637b      	str	r3, [r7, #52]	; 0x34
 8000b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	4b3d      	ldr	r3, [pc, #244]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	4a3c      	ldr	r2, [pc, #240]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	6153      	str	r3, [r2, #20]
 8000ba6:	4b3a      	ldr	r3, [pc, #232]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
 8000bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	4b37      	ldr	r3, [pc, #220]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a36      	ldr	r2, [pc, #216]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000bb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bbc:	6153      	str	r3, [r2, #20]
 8000bbe:	4b34      	ldr	r3, [pc, #208]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	4b31      	ldr	r3, [pc, #196]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	4a30      	ldr	r2, [pc, #192]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd4:	6153      	str	r3, [r2, #20]
 8000bd6:	4b2e      	ldr	r3, [pc, #184]	; (8000c90 <HAL_ADC_MspInit+0x290>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8000be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000be2:	23f0      	movs	r3, #240	; 0xf0
 8000be4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be6:	2303      	movs	r3, #3
 8000be8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf8:	f003 fc1c 	bl	8004434 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bfc:	2330      	movs	r3, #48	; 0x30
 8000bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c00:	2303      	movs	r3, #3
 8000c02:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4822      	ldr	r0, [pc, #136]	; (8000c98 <HAL_ADC_MspInit+0x298>)
 8000c10:	f003 fc10 	bl	8004434 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c14:	2304      	movs	r3, #4
 8000c16:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c24:	4619      	mov	r1, r3
 8000c26:	481d      	ldr	r0, [pc, #116]	; (8000c9c <HAL_ADC_MspInit+0x29c>)
 8000c28:	f003 fc04 	bl	8004434 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel3;
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <HAL_ADC_MspInit+0x2ac>)
 8000c2e:	4a20      	ldr	r2, [pc, #128]	; (8000cb0 <HAL_ADC_MspInit+0x2b0>)
 8000c30:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c32:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <HAL_ADC_MspInit+0x2ac>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c38:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <HAL_ADC_MspInit+0x2ac>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <HAL_ADC_MspInit+0x2ac>)
 8000c40:	2280      	movs	r2, #128	; 0x80
 8000c42:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <HAL_ADC_MspInit+0x2ac>)
 8000c46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c4a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <HAL_ADC_MspInit+0x2ac>)
 8000c4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c52:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_ADC_MspInit+0x2ac>)
 8000c56:	2220      	movs	r2, #32
 8000c58:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <HAL_ADC_MspInit+0x2ac>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000c60:	4812      	ldr	r0, [pc, #72]	; (8000cac <HAL_ADC_MspInit+0x2ac>)
 8000c62:	f003 fa34 	bl	80040ce <HAL_DMA_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <HAL_ADC_MspInit+0x270>
      Error_Handler();
 8000c6c:	f001 fcfc 	bl	8002668 <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_ADC24_DMA2_CH34);
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <HAL_ADC_MspInit+0x2b4>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0f      	ldr	r2, [pc, #60]	; (8000cb4 <HAL_ADC_MspInit+0x2b4>)
 8000c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7a:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <HAL_ADC_MspInit+0x2ac>)
 8000c80:	639a      	str	r2, [r3, #56]	; 0x38
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <HAL_ADC_MspInit+0x2ac>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000c88:	e139      	b.n	8000efe <HAL_ADC_MspInit+0x4fe>
 8000c8a:	bf00      	nop
 8000c8c:	2000002c 	.word	0x2000002c
 8000c90:	40021000 	.word	0x40021000
 8000c94:	48001400 	.word	0x48001400
 8000c98:	48000800 	.word	0x48000800
 8000c9c:	48000400 	.word	0x48000400
 8000ca0:	200001ac 	.word	0x200001ac
 8000ca4:	40020008 	.word	0x40020008
 8000ca8:	50000100 	.word	0x50000100
 8000cac:	20000240 	.word	0x20000240
 8000cb0:	40020430 	.word	0x40020430
 8000cb4:	40010000 	.word	0x40010000
  else if(adcHandle->Instance==ADC3)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a92      	ldr	r2, [pc, #584]	; (8000f08 <HAL_ADC_MspInit+0x508>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	f040 8089 	bne.w	8000dd6 <HAL_ADC_MspInit+0x3d6>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8000cc4:	4b91      	ldr	r3, [pc, #580]	; (8000f0c <HAL_ADC_MspInit+0x50c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4a90      	ldr	r2, [pc, #576]	; (8000f0c <HAL_ADC_MspInit+0x50c>)
 8000ccc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000cce:	4b8f      	ldr	r3, [pc, #572]	; (8000f0c <HAL_ADC_MspInit+0x50c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d10b      	bne.n	8000cee <HAL_ADC_MspInit+0x2ee>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000cd6:	4b8e      	ldr	r3, [pc, #568]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	4a8d      	ldr	r2, [pc, #564]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000cdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ce0:	6153      	str	r3, [r2, #20]
 8000ce2:	4b8b      	ldr	r3, [pc, #556]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
 8000cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b88      	ldr	r3, [pc, #544]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	4a87      	ldr	r2, [pc, #540]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf8:	6153      	str	r3, [r2, #20]
 8000cfa:	4b85      	ldr	r3, [pc, #532]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d02:	623b      	str	r3, [r7, #32]
 8000d04:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d06:	4b82      	ldr	r3, [pc, #520]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	4a81      	ldr	r2, [pc, #516]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000d0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d10:	6153      	str	r3, [r2, #20]
 8000d12:	4b7f      	ldr	r3, [pc, #508]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d1a:	61fb      	str	r3, [r7, #28]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b7c      	ldr	r3, [pc, #496]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	4a7b      	ldr	r2, [pc, #492]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000d24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d28:	6153      	str	r3, [r2, #20]
 8000d2a:	4b79      	ldr	r3, [pc, #484]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d32:	61bb      	str	r3, [r7, #24]
 8000d34:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8000d36:	f242 0303 	movw	r3, #8195	; 0x2003
 8000d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4872      	ldr	r0, [pc, #456]	; (8000f14 <HAL_ADC_MspInit+0x514>)
 8000d4c:	f003 fb72 	bl	8004434 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d50:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8000d54:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d56:	2303      	movs	r3, #3
 8000d58:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d62:	4619      	mov	r1, r3
 8000d64:	486c      	ldr	r0, [pc, #432]	; (8000f18 <HAL_ADC_MspInit+0x518>)
 8000d66:	f003 fb65 	bl	8004434 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000d6a:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8000d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d70:	2303      	movs	r3, #3
 8000d72:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4867      	ldr	r0, [pc, #412]	; (8000f1c <HAL_ADC_MspInit+0x51c>)
 8000d80:	f003 fb58 	bl	8004434 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8000d84:	4b66      	ldr	r3, [pc, #408]	; (8000f20 <HAL_ADC_MspInit+0x520>)
 8000d86:	4a67      	ldr	r2, [pc, #412]	; (8000f24 <HAL_ADC_MspInit+0x524>)
 8000d88:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d8a:	4b65      	ldr	r3, [pc, #404]	; (8000f20 <HAL_ADC_MspInit+0x520>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d90:	4b63      	ldr	r3, [pc, #396]	; (8000f20 <HAL_ADC_MspInit+0x520>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000d96:	4b62      	ldr	r3, [pc, #392]	; (8000f20 <HAL_ADC_MspInit+0x520>)
 8000d98:	2280      	movs	r2, #128	; 0x80
 8000d9a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d9c:	4b60      	ldr	r3, [pc, #384]	; (8000f20 <HAL_ADC_MspInit+0x520>)
 8000d9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000da4:	4b5e      	ldr	r3, [pc, #376]	; (8000f20 <HAL_ADC_MspInit+0x520>)
 8000da6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000daa:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000dac:	4b5c      	ldr	r3, [pc, #368]	; (8000f20 <HAL_ADC_MspInit+0x520>)
 8000dae:	2220      	movs	r2, #32
 8000db0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000db2:	4b5b      	ldr	r3, [pc, #364]	; (8000f20 <HAL_ADC_MspInit+0x520>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000db8:	4859      	ldr	r0, [pc, #356]	; (8000f20 <HAL_ADC_MspInit+0x520>)
 8000dba:	f003 f988 	bl	80040ce <HAL_DMA_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_ADC_MspInit+0x3c8>
      Error_Handler();
 8000dc4:	f001 fc50 	bl	8002668 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a55      	ldr	r2, [pc, #340]	; (8000f20 <HAL_ADC_MspInit+0x520>)
 8000dcc:	639a      	str	r2, [r3, #56]	; 0x38
 8000dce:	4a54      	ldr	r2, [pc, #336]	; (8000f20 <HAL_ADC_MspInit+0x520>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000dd4:	e093      	b.n	8000efe <HAL_ADC_MspInit+0x4fe>
  else if(adcHandle->Instance==ADC4)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a53      	ldr	r2, [pc, #332]	; (8000f28 <HAL_ADC_MspInit+0x528>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	f040 808e 	bne.w	8000efe <HAL_ADC_MspInit+0x4fe>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8000de2:	4b4a      	ldr	r3, [pc, #296]	; (8000f0c <HAL_ADC_MspInit+0x50c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	4a48      	ldr	r2, [pc, #288]	; (8000f0c <HAL_ADC_MspInit+0x50c>)
 8000dea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000dec:	4b47      	ldr	r3, [pc, #284]	; (8000f0c <HAL_ADC_MspInit+0x50c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d10b      	bne.n	8000e0c <HAL_ADC_MspInit+0x40c>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000df4:	4b46      	ldr	r3, [pc, #280]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	4a45      	ldr	r2, [pc, #276]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000dfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000dfe:	6153      	str	r3, [r2, #20]
 8000e00:	4b43      	ldr	r3, [pc, #268]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e0c:	4b40      	ldr	r3, [pc, #256]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	4a3f      	ldr	r2, [pc, #252]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000e12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e16:	6153      	str	r3, [r2, #20]
 8000e18:	4b3d      	ldr	r3, [pc, #244]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	4a39      	ldr	r2, [pc, #228]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000e2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e2e:	6153      	str	r3, [r2, #20]
 8000e30:	4b37      	ldr	r3, [pc, #220]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3c:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	4a33      	ldr	r2, [pc, #204]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000e42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e46:	6153      	str	r3, [r2, #20]
 8000e48:	4b31      	ldr	r3, [pc, #196]	; (8000f10 <HAL_ADC_MspInit+0x510>)
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e54:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e58:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e66:	4619      	mov	r1, r3
 8000e68:	482b      	ldr	r0, [pc, #172]	; (8000f18 <HAL_ADC_MspInit+0x518>)
 8000e6a:	f003 fae3 	bl	8004434 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8000e6e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000e72:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e74:	2303      	movs	r3, #3
 8000e76:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e80:	4619      	mov	r1, r3
 8000e82:	4824      	ldr	r0, [pc, #144]	; (8000f14 <HAL_ADC_MspInit+0x514>)
 8000e84:	f003 fad6 	bl	8004434 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	481f      	ldr	r0, [pc, #124]	; (8000f1c <HAL_ADC_MspInit+0x51c>)
 8000e9e:	f003 fac9 	bl	8004434 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel4;
 8000ea2:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <HAL_ADC_MspInit+0x52c>)
 8000ea4:	4a22      	ldr	r2, [pc, #136]	; (8000f30 <HAL_ADC_MspInit+0x530>)
 8000ea6:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea8:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <HAL_ADC_MspInit+0x52c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eae:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <HAL_ADC_MspInit+0x52c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_ADC_MspInit+0x52c>)
 8000eb6:	2280      	movs	r2, #128	; 0x80
 8000eb8:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eba:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <HAL_ADC_MspInit+0x52c>)
 8000ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec0:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <HAL_ADC_MspInit+0x52c>)
 8000ec4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ec8:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <HAL_ADC_MspInit+0x52c>)
 8000ecc:	2220      	movs	r2, #32
 8000ece:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_ADC_MspInit+0x52c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000ed6:	4815      	ldr	r0, [pc, #84]	; (8000f2c <HAL_ADC_MspInit+0x52c>)
 8000ed8:	f003 f8f9 	bl	80040ce <HAL_DMA_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_ADC_MspInit+0x4e6>
      Error_Handler();
 8000ee2:	f001 fbc1 	bl	8002668 <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_ADC24_DMA2_CH34);
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <HAL_ADC_MspInit+0x534>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <HAL_ADC_MspInit+0x534>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef0:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <HAL_ADC_MspInit+0x52c>)
 8000ef6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ef8:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <HAL_ADC_MspInit+0x52c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000efe:	bf00      	nop
 8000f00:	3760      	adds	r7, #96	; 0x60
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	50000400 	.word	0x50000400
 8000f0c:	20000030 	.word	0x20000030
 8000f10:	40021000 	.word	0x40021000
 8000f14:	48000400 	.word	0x48000400
 8000f18:	48001000 	.word	0x48001000
 8000f1c:	48000c00 	.word	0x48000c00
 8000f20:	200000c8 	.word	0x200000c8
 8000f24:	40020458 	.word	0x40020458
 8000f28:	50000500 	.word	0x50000500
 8000f2c:	20000034 	.word	0x20000034
 8000f30:	40020444 	.word	0x40020444
 8000f34:	40010000 	.word	0x40010000

08000f38 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f42:	695a      	ldr	r2, [r3, #20]
 8000f44:	4907      	ldr	r1, [pc, #28]	; (8000f64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f4e:	695a      	ldr	r2, [r3, #20]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4013      	ands	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	40021000 	.word	0x40021000

08000f68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff ffe3 	bl	8000f38 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8000f72:	2002      	movs	r0, #2
 8000f74:	f7ff ffe0 	bl	8000f38 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	200b      	movs	r0, #11
 8000f7e:	f003 f870 	bl	8004062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f82:	200b      	movs	r0, #11
 8000f84:	f003 f889 	bl	800409a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2038      	movs	r0, #56	; 0x38
 8000f8e:	f003 f868 	bl	8004062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000f92:	2038      	movs	r0, #56	; 0x38
 8000f94:	f003 f881 	bl	800409a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2039      	movs	r0, #57	; 0x39
 8000f9e:	f003 f860 	bl	8004062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000fa2:	2039      	movs	r0, #57	; 0x39
 8000fa4:	f003 f879 	bl	800409a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2100      	movs	r1, #0
 8000fac:	203a      	movs	r0, #58	; 0x3a
 8000fae:	f003 f858 	bl	8004062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000fb2:	203a      	movs	r0, #58	; 0x3a
 8000fb4:	f003 f871 	bl	800409a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	203b      	movs	r0, #59	; 0x3b
 8000fbe:	f003 f850 	bl	8004062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000fc2:	203b      	movs	r0, #59	; 0x3b
 8000fc4:	f003 f869 	bl	800409a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2100      	movs	r1, #0
 8000fcc:	203c      	movs	r0, #60	; 0x3c
 8000fce:	f003 f848 	bl	8004062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000fd2:	203c      	movs	r0, #60	; 0x3c
 8000fd4:	f003 f861 	bl	800409a <HAL_NVIC_EnableIRQ>

}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <MX_GPIO_Init>:
     PB3   ------> SPI1_SCK
     PB4   ------> SPI1_MISO
     PB5   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	; 0x30
 8000fe0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff2:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <MX_GPIO_Init+0xd0>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	4a2d      	ldr	r2, [pc, #180]	; (80010ac <MX_GPIO_Init+0xd0>)
 8000ff8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ffc:	6153      	str	r3, [r2, #20]
 8000ffe:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <MX_GPIO_Init+0xd0>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001006:	61bb      	str	r3, [r7, #24]
 8001008:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	4b28      	ldr	r3, [pc, #160]	; (80010ac <MX_GPIO_Init+0xd0>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	4a27      	ldr	r2, [pc, #156]	; (80010ac <MX_GPIO_Init+0xd0>)
 8001010:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001014:	6153      	str	r3, [r2, #20]
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <MX_GPIO_Init+0xd0>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b22      	ldr	r3, [pc, #136]	; (80010ac <MX_GPIO_Init+0xd0>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	4a21      	ldr	r2, [pc, #132]	; (80010ac <MX_GPIO_Init+0xd0>)
 8001028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102c:	6153      	str	r3, [r2, #20]
 800102e:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <MX_GPIO_Init+0xd0>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <MX_GPIO_Init+0xd0>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <MX_GPIO_Init+0xd0>)
 8001040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001044:	6153      	str	r3, [r2, #20]
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <MX_GPIO_Init+0xd0>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MX_GPIO_Init+0xd0>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	4a15      	ldr	r2, [pc, #84]	; (80010ac <MX_GPIO_Init+0xd0>)
 8001058:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800105c:	6153      	str	r3, [r2, #20]
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <MX_GPIO_Init+0xd0>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_GPIO_Init+0xd0>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <MX_GPIO_Init+0xd0>)
 8001070:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001074:	6153      	str	r3, [r2, #20]
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <MX_GPIO_Init+0xd0>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001082:	2338      	movs	r3, #56	; 0x38
 8001084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001092:	2305      	movs	r3, #5
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	4804      	ldr	r0, [pc, #16]	; (80010b0 <MX_GPIO_Init+0xd4>)
 800109e:	f003 f9c9 	bl	8004434 <HAL_GPIO_Init>

}
 80010a2:	bf00      	nop
 80010a4:	3730      	adds	r7, #48	; 0x30
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000
 80010b0:	48000400 	.word	0x48000400

080010b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b8:	f001 fcec 	bl	8002a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010bc:	f001 fa6e 	bl	800259c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c0:	f7ff ff8c 	bl	8000fdc <MX_GPIO_Init>
  MX_DMA_Init();
 80010c4:	f7ff ff50 	bl	8000f68 <MX_DMA_Init>
  MX_ADC1_Init();
 80010c8:	f7ff f884 	bl	80001d4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80010cc:	f7ff f99e 	bl	800040c <MX_ADC2_Init>
  MX_ADC3_Init();
 80010d0:	f7ff fa70 	bl	80005b4 <MX_ADC3_Init>
  MX_ADC4_Init();
 80010d4:	f7ff fbc2 	bl	800085c <MX_ADC4_Init>
  MX_USART2_UART_Init();
 80010d8:	f001 fc3e 	bl	8002958 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80010dc:	f001 faca 	bl	8002674 <MX_SPI3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADC1_Value, 110);
 80010e0:	226e      	movs	r2, #110	; 0x6e
 80010e2:	4914      	ldr	r1, [pc, #80]	; (8001134 <main+0x80>)
 80010e4:	4814      	ldr	r0, [pc, #80]	; (8001138 <main+0x84>)
 80010e6:	f001 ff77 	bl	8002fd8 <HAL_ADC_Start_DMA>
    for (i = 0, ADC1Channel1 = 0, ADC1Channel2 = 0, ADC1Channel3 = 0, ADC1Channel4 = 0, ADC1Channel5 = 0, ADC1Channel6 = 0, ADC1Channel7 = 0, ADC1Channel8 = 0, ADC1Channel9 = 0, ADC1Channel10 = 0, ADC1Channel11 = 0; i < 110;)
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <main+0x88>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	801a      	strh	r2, [r3, #0]
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <main+0x8c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <main+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <main+0x94>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <main+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <main+0x9c>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <main+0xa0>)
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <main+0xa4>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <main+0xa8>)
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <main+0xac>)
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <main+0xb0>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <main+0xb4>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e0c0      	b.n	80012b6 <main+0x202>
 8001134:	200008e0 	.word	0x200008e0
 8001138:	2000010c 	.word	0x2000010c
 800113c:	200007b4 	.word	0x200007b4
 8001140:	20000624 	.word	0x20000624
 8001144:	200008dc 	.word	0x200008dc
 8001148:	200007c4 	.word	0x200007c4
 800114c:	200004f0 	.word	0x200004f0
 8001150:	200007e4 	.word	0x200007e4
 8001154:	200004e8 	.word	0x200004e8
 8001158:	20000284 	.word	0x20000284
 800115c:	20000684 	.word	0x20000684
 8001160:	200008d4 	.word	0x200008d4
 8001164:	2000068c 	.word	0x2000068c
 8001168:	2000062c 	.word	0x2000062c
    {
      ADC1Channel1 += ADC1_Value[i++];
 800116c:	4b91      	ldr	r3, [pc, #580]	; (80013b4 <main+0x300>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	b291      	uxth	r1, r2
 8001174:	4a8f      	ldr	r2, [pc, #572]	; (80013b4 <main+0x300>)
 8001176:	8011      	strh	r1, [r2, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b8f      	ldr	r3, [pc, #572]	; (80013b8 <main+0x304>)
 800117c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001180:	4b8e      	ldr	r3, [pc, #568]	; (80013bc <main+0x308>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4413      	add	r3, r2
 8001186:	4a8d      	ldr	r2, [pc, #564]	; (80013bc <main+0x308>)
 8001188:	6013      	str	r3, [r2, #0]
      ADC1Channel2 += ADC1_Value[i++];
 800118a:	4b8a      	ldr	r3, [pc, #552]	; (80013b4 <main+0x300>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	b291      	uxth	r1, r2
 8001192:	4a88      	ldr	r2, [pc, #544]	; (80013b4 <main+0x300>)
 8001194:	8011      	strh	r1, [r2, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	4b87      	ldr	r3, [pc, #540]	; (80013b8 <main+0x304>)
 800119a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800119e:	4b88      	ldr	r3, [pc, #544]	; (80013c0 <main+0x30c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a86      	ldr	r2, [pc, #536]	; (80013c0 <main+0x30c>)
 80011a6:	6013      	str	r3, [r2, #0]
      ADC1Channel3 += ADC1_Value[i++];
 80011a8:	4b82      	ldr	r3, [pc, #520]	; (80013b4 <main+0x300>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	1c5a      	adds	r2, r3, #1
 80011ae:	b291      	uxth	r1, r2
 80011b0:	4a80      	ldr	r2, [pc, #512]	; (80013b4 <main+0x300>)
 80011b2:	8011      	strh	r1, [r2, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b80      	ldr	r3, [pc, #512]	; (80013b8 <main+0x304>)
 80011b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011bc:	4b81      	ldr	r3, [pc, #516]	; (80013c4 <main+0x310>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a80      	ldr	r2, [pc, #512]	; (80013c4 <main+0x310>)
 80011c4:	6013      	str	r3, [r2, #0]
      ADC1Channel4 += ADC1_Value[i++];
 80011c6:	4b7b      	ldr	r3, [pc, #492]	; (80013b4 <main+0x300>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	b291      	uxth	r1, r2
 80011ce:	4a79      	ldr	r2, [pc, #484]	; (80013b4 <main+0x300>)
 80011d0:	8011      	strh	r1, [r2, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b78      	ldr	r3, [pc, #480]	; (80013b8 <main+0x304>)
 80011d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011da:	4b7b      	ldr	r3, [pc, #492]	; (80013c8 <main+0x314>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a79      	ldr	r2, [pc, #484]	; (80013c8 <main+0x314>)
 80011e2:	6013      	str	r3, [r2, #0]
      ADC1Channel5 += ADC1_Value[i++];
 80011e4:	4b73      	ldr	r3, [pc, #460]	; (80013b4 <main+0x300>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	b291      	uxth	r1, r2
 80011ec:	4a71      	ldr	r2, [pc, #452]	; (80013b4 <main+0x300>)
 80011ee:	8011      	strh	r1, [r2, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b71      	ldr	r3, [pc, #452]	; (80013b8 <main+0x304>)
 80011f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011f8:	4b74      	ldr	r3, [pc, #464]	; (80013cc <main+0x318>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4413      	add	r3, r2
 80011fe:	4a73      	ldr	r2, [pc, #460]	; (80013cc <main+0x318>)
 8001200:	6013      	str	r3, [r2, #0]
      ADC1Channel6 += ADC1_Value[i++];
 8001202:	4b6c      	ldr	r3, [pc, #432]	; (80013b4 <main+0x300>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	b291      	uxth	r1, r2
 800120a:	4a6a      	ldr	r2, [pc, #424]	; (80013b4 <main+0x300>)
 800120c:	8011      	strh	r1, [r2, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	4b69      	ldr	r3, [pc, #420]	; (80013b8 <main+0x304>)
 8001212:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001216:	4b6e      	ldr	r3, [pc, #440]	; (80013d0 <main+0x31c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a6c      	ldr	r2, [pc, #432]	; (80013d0 <main+0x31c>)
 800121e:	6013      	str	r3, [r2, #0]
      ADC1Channel7 += ADC1_Value[i++];
 8001220:	4b64      	ldr	r3, [pc, #400]	; (80013b4 <main+0x300>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	b291      	uxth	r1, r2
 8001228:	4a62      	ldr	r2, [pc, #392]	; (80013b4 <main+0x300>)
 800122a:	8011      	strh	r1, [r2, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b62      	ldr	r3, [pc, #392]	; (80013b8 <main+0x304>)
 8001230:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001234:	4b67      	ldr	r3, [pc, #412]	; (80013d4 <main+0x320>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4413      	add	r3, r2
 800123a:	4a66      	ldr	r2, [pc, #408]	; (80013d4 <main+0x320>)
 800123c:	6013      	str	r3, [r2, #0]
      ADC1Channel8 += ADC1_Value[i++];
 800123e:	4b5d      	ldr	r3, [pc, #372]	; (80013b4 <main+0x300>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	b291      	uxth	r1, r2
 8001246:	4a5b      	ldr	r2, [pc, #364]	; (80013b4 <main+0x300>)
 8001248:	8011      	strh	r1, [r2, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	4b5a      	ldr	r3, [pc, #360]	; (80013b8 <main+0x304>)
 800124e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001252:	4b61      	ldr	r3, [pc, #388]	; (80013d8 <main+0x324>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a5f      	ldr	r2, [pc, #380]	; (80013d8 <main+0x324>)
 800125a:	6013      	str	r3, [r2, #0]
      ADC1Channel9 += ADC1_Value[i++];
 800125c:	4b55      	ldr	r3, [pc, #340]	; (80013b4 <main+0x300>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	b291      	uxth	r1, r2
 8001264:	4a53      	ldr	r2, [pc, #332]	; (80013b4 <main+0x300>)
 8001266:	8011      	strh	r1, [r2, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <main+0x304>)
 800126c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001270:	4b5a      	ldr	r3, [pc, #360]	; (80013dc <main+0x328>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4413      	add	r3, r2
 8001276:	4a59      	ldr	r2, [pc, #356]	; (80013dc <main+0x328>)
 8001278:	6013      	str	r3, [r2, #0]
      ADC1Channel10 += ADC1_Value[i++];
 800127a:	4b4e      	ldr	r3, [pc, #312]	; (80013b4 <main+0x300>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	b291      	uxth	r1, r2
 8001282:	4a4c      	ldr	r2, [pc, #304]	; (80013b4 <main+0x300>)
 8001284:	8011      	strh	r1, [r2, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	4b4b      	ldr	r3, [pc, #300]	; (80013b8 <main+0x304>)
 800128a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800128e:	4b54      	ldr	r3, [pc, #336]	; (80013e0 <main+0x32c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a52      	ldr	r2, [pc, #328]	; (80013e0 <main+0x32c>)
 8001296:	6013      	str	r3, [r2, #0]
      ADC1Channel11 += ADC1_Value[i++];
 8001298:	4b46      	ldr	r3, [pc, #280]	; (80013b4 <main+0x300>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	b291      	uxth	r1, r2
 80012a0:	4a44      	ldr	r2, [pc, #272]	; (80013b4 <main+0x300>)
 80012a2:	8011      	strh	r1, [r2, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <main+0x304>)
 80012a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012ac:	4b4d      	ldr	r3, [pc, #308]	; (80013e4 <main+0x330>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4413      	add	r3, r2
 80012b2:	4a4c      	ldr	r2, [pc, #304]	; (80013e4 <main+0x330>)
 80012b4:	6013      	str	r3, [r2, #0]
    for (i = 0, ADC1Channel1 = 0, ADC1Channel2 = 0, ADC1Channel3 = 0, ADC1Channel4 = 0, ADC1Channel5 = 0, ADC1Channel6 = 0, ADC1Channel7 = 0, ADC1Channel8 = 0, ADC1Channel9 = 0, ADC1Channel10 = 0, ADC1Channel11 = 0; i < 110;)
 80012b6:	4b3f      	ldr	r3, [pc, #252]	; (80013b4 <main+0x300>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	2b6d      	cmp	r3, #109	; 0x6d
 80012bc:	f67f af56 	bls.w	800116c <main+0xb8>
    }
    ADC1Channel1 /= 10;
 80012c0:	4b3e      	ldr	r3, [pc, #248]	; (80013bc <main+0x308>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a48      	ldr	r2, [pc, #288]	; (80013e8 <main+0x334>)
 80012c6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ca:	08db      	lsrs	r3, r3, #3
 80012cc:	4a3b      	ldr	r2, [pc, #236]	; (80013bc <main+0x308>)
 80012ce:	6013      	str	r3, [r2, #0]
    ADC1Channel2 /= 10;
 80012d0:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <main+0x30c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a44      	ldr	r2, [pc, #272]	; (80013e8 <main+0x334>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	08db      	lsrs	r3, r3, #3
 80012dc:	4a38      	ldr	r2, [pc, #224]	; (80013c0 <main+0x30c>)
 80012de:	6013      	str	r3, [r2, #0]
    ADC1Channel3 /= 10;
 80012e0:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <main+0x310>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a40      	ldr	r2, [pc, #256]	; (80013e8 <main+0x334>)
 80012e6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ea:	08db      	lsrs	r3, r3, #3
 80012ec:	4a35      	ldr	r2, [pc, #212]	; (80013c4 <main+0x310>)
 80012ee:	6013      	str	r3, [r2, #0]
    ADC1Channel4 /= 10;
 80012f0:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <main+0x314>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a3c      	ldr	r2, [pc, #240]	; (80013e8 <main+0x334>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	08db      	lsrs	r3, r3, #3
 80012fc:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <main+0x314>)
 80012fe:	6013      	str	r3, [r2, #0]
    ADC1Channel5 /= 10;
 8001300:	4b32      	ldr	r3, [pc, #200]	; (80013cc <main+0x318>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a38      	ldr	r2, [pc, #224]	; (80013e8 <main+0x334>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	08db      	lsrs	r3, r3, #3
 800130c:	4a2f      	ldr	r2, [pc, #188]	; (80013cc <main+0x318>)
 800130e:	6013      	str	r3, [r2, #0]
    ADC1Channel6 /= 10;
 8001310:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <main+0x31c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a34      	ldr	r2, [pc, #208]	; (80013e8 <main+0x334>)
 8001316:	fba2 2303 	umull	r2, r3, r2, r3
 800131a:	08db      	lsrs	r3, r3, #3
 800131c:	4a2c      	ldr	r2, [pc, #176]	; (80013d0 <main+0x31c>)
 800131e:	6013      	str	r3, [r2, #0]
    ADC1Channel7 /= 10;
 8001320:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <main+0x320>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a30      	ldr	r2, [pc, #192]	; (80013e8 <main+0x334>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	08db      	lsrs	r3, r3, #3
 800132c:	4a29      	ldr	r2, [pc, #164]	; (80013d4 <main+0x320>)
 800132e:	6013      	str	r3, [r2, #0]
    ADC1Channel8 /= 10;
 8001330:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <main+0x324>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a2c      	ldr	r2, [pc, #176]	; (80013e8 <main+0x334>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	08db      	lsrs	r3, r3, #3
 800133c:	4a26      	ldr	r2, [pc, #152]	; (80013d8 <main+0x324>)
 800133e:	6013      	str	r3, [r2, #0]
    ADC1Channel9 /= 10;
 8001340:	4b26      	ldr	r3, [pc, #152]	; (80013dc <main+0x328>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a28      	ldr	r2, [pc, #160]	; (80013e8 <main+0x334>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	08db      	lsrs	r3, r3, #3
 800134c:	4a23      	ldr	r2, [pc, #140]	; (80013dc <main+0x328>)
 800134e:	6013      	str	r3, [r2, #0]
    ADC1Channel10 /= 10;
 8001350:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <main+0x32c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a24      	ldr	r2, [pc, #144]	; (80013e8 <main+0x334>)
 8001356:	fba2 2303 	umull	r2, r3, r2, r3
 800135a:	08db      	lsrs	r3, r3, #3
 800135c:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <main+0x32c>)
 800135e:	6013      	str	r3, [r2, #0]
    ADC1Channel11 /= 10;
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <main+0x330>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a20      	ldr	r2, [pc, #128]	; (80013e8 <main+0x334>)
 8001366:	fba2 2303 	umull	r2, r3, r2, r3
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	4a1d      	ldr	r2, [pc, #116]	; (80013e4 <main+0x330>)
 800136e:	6013      	str	r3, [r2, #0]
    HAL_Delay(50);
 8001370:	2032      	movs	r0, #50	; 0x32
 8001372:	f001 fbf5 	bl	8002b60 <HAL_Delay>
    // 11 7  15  7
    HAL_ADC_Start_DMA(&hadc2, (uint32_t *)&ADC2_Value, 70);
 8001376:	2246      	movs	r2, #70	; 0x46
 8001378:	491c      	ldr	r1, [pc, #112]	; (80013ec <main+0x338>)
 800137a:	481d      	ldr	r0, [pc, #116]	; (80013f0 <main+0x33c>)
 800137c:	f001 fe2c 	bl	8002fd8 <HAL_ADC_Start_DMA>
    for (i = 0, ADC2Channel1 = 0, ADC2Channel2 = 0, ADC2Channel3 = 0, ADC2Channel4 = 0, ADC2Channel5 = 0, ADC2Channel6 = 0, ADC2Channel7 = 0; i < 70;)
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <main+0x300>)
 8001382:	2200      	movs	r2, #0
 8001384:	801a      	strh	r2, [r3, #0]
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <main+0x340>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <main+0x344>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <main+0x348>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <main+0x34c>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <main+0x350>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <main+0x354>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <main+0x358>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	e097      	b.n	80014e2 <main+0x42e>
 80013b2:	bf00      	nop
 80013b4:	200007b4 	.word	0x200007b4
 80013b8:	200008e0 	.word	0x200008e0
 80013bc:	20000624 	.word	0x20000624
 80013c0:	200008dc 	.word	0x200008dc
 80013c4:	200007c4 	.word	0x200007c4
 80013c8:	200004f0 	.word	0x200004f0
 80013cc:	200007e4 	.word	0x200007e4
 80013d0:	200004e8 	.word	0x200004e8
 80013d4:	20000284 	.word	0x20000284
 80013d8:	20000684 	.word	0x20000684
 80013dc:	200008d4 	.word	0x200008d4
 80013e0:	2000068c 	.word	0x2000068c
 80013e4:	2000062c 	.word	0x2000062c
 80013e8:	cccccccd 	.word	0xcccccccd
 80013ec:	20000698 	.word	0x20000698
 80013f0:	20000078 	.word	0x20000078
 80013f4:	2000089c 	.word	0x2000089c
 80013f8:	200004f4 	.word	0x200004f4
 80013fc:	200004ec 	.word	0x200004ec
 8001400:	200007bc 	.word	0x200007bc
 8001404:	20000898 	.word	0x20000898
 8001408:	200007b8 	.word	0x200007b8
 800140c:	200007c8 	.word	0x200007c8
    {
      ADC2Channel1 += ADC2_Value[i++];
 8001410:	4b6e      	ldr	r3, [pc, #440]	; (80015cc <main+0x518>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	1c5a      	adds	r2, r3, #1
 8001416:	b291      	uxth	r1, r2
 8001418:	4a6c      	ldr	r2, [pc, #432]	; (80015cc <main+0x518>)
 800141a:	8011      	strh	r1, [r2, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	4b6c      	ldr	r3, [pc, #432]	; (80015d0 <main+0x51c>)
 8001420:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001424:	4b6b      	ldr	r3, [pc, #428]	; (80015d4 <main+0x520>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4413      	add	r3, r2
 800142a:	4a6a      	ldr	r2, [pc, #424]	; (80015d4 <main+0x520>)
 800142c:	6013      	str	r3, [r2, #0]
      ADC2Channel2 += ADC2_Value[i++];
 800142e:	4b67      	ldr	r3, [pc, #412]	; (80015cc <main+0x518>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	b291      	uxth	r1, r2
 8001436:	4a65      	ldr	r2, [pc, #404]	; (80015cc <main+0x518>)
 8001438:	8011      	strh	r1, [r2, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	4b64      	ldr	r3, [pc, #400]	; (80015d0 <main+0x51c>)
 800143e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001442:	4b65      	ldr	r3, [pc, #404]	; (80015d8 <main+0x524>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a63      	ldr	r2, [pc, #396]	; (80015d8 <main+0x524>)
 800144a:	6013      	str	r3, [r2, #0]
      ADC2Channel3 += ADC2_Value[i++];
 800144c:	4b5f      	ldr	r3, [pc, #380]	; (80015cc <main+0x518>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	b291      	uxth	r1, r2
 8001454:	4a5d      	ldr	r2, [pc, #372]	; (80015cc <main+0x518>)
 8001456:	8011      	strh	r1, [r2, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b5d      	ldr	r3, [pc, #372]	; (80015d0 <main+0x51c>)
 800145c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001460:	4b5e      	ldr	r3, [pc, #376]	; (80015dc <main+0x528>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4413      	add	r3, r2
 8001466:	4a5d      	ldr	r2, [pc, #372]	; (80015dc <main+0x528>)
 8001468:	6013      	str	r3, [r2, #0]
      ADC2Channel4 += ADC2_Value[i++];
 800146a:	4b58      	ldr	r3, [pc, #352]	; (80015cc <main+0x518>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	b291      	uxth	r1, r2
 8001472:	4a56      	ldr	r2, [pc, #344]	; (80015cc <main+0x518>)
 8001474:	8011      	strh	r1, [r2, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	4b55      	ldr	r3, [pc, #340]	; (80015d0 <main+0x51c>)
 800147a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800147e:	4b58      	ldr	r3, [pc, #352]	; (80015e0 <main+0x52c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a56      	ldr	r2, [pc, #344]	; (80015e0 <main+0x52c>)
 8001486:	6013      	str	r3, [r2, #0]
      ADC2Channel5 += ADC2_Value[i++];
 8001488:	4b50      	ldr	r3, [pc, #320]	; (80015cc <main+0x518>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	1c5a      	adds	r2, r3, #1
 800148e:	b291      	uxth	r1, r2
 8001490:	4a4e      	ldr	r2, [pc, #312]	; (80015cc <main+0x518>)
 8001492:	8011      	strh	r1, [r2, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b4e      	ldr	r3, [pc, #312]	; (80015d0 <main+0x51c>)
 8001498:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800149c:	4b51      	ldr	r3, [pc, #324]	; (80015e4 <main+0x530>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a50      	ldr	r2, [pc, #320]	; (80015e4 <main+0x530>)
 80014a4:	6013      	str	r3, [r2, #0]
      ADC2Channel6 += ADC2_Value[i++];
 80014a6:	4b49      	ldr	r3, [pc, #292]	; (80015cc <main+0x518>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	b291      	uxth	r1, r2
 80014ae:	4a47      	ldr	r2, [pc, #284]	; (80015cc <main+0x518>)
 80014b0:	8011      	strh	r1, [r2, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b46      	ldr	r3, [pc, #280]	; (80015d0 <main+0x51c>)
 80014b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014ba:	4b4b      	ldr	r3, [pc, #300]	; (80015e8 <main+0x534>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a49      	ldr	r2, [pc, #292]	; (80015e8 <main+0x534>)
 80014c2:	6013      	str	r3, [r2, #0]
      ADC2Channel7 += ADC2_Value[i++];
 80014c4:	4b41      	ldr	r3, [pc, #260]	; (80015cc <main+0x518>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	b291      	uxth	r1, r2
 80014cc:	4a3f      	ldr	r2, [pc, #252]	; (80015cc <main+0x518>)
 80014ce:	8011      	strh	r1, [r2, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b3f      	ldr	r3, [pc, #252]	; (80015d0 <main+0x51c>)
 80014d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014d8:	4b44      	ldr	r3, [pc, #272]	; (80015ec <main+0x538>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	4a43      	ldr	r2, [pc, #268]	; (80015ec <main+0x538>)
 80014e0:	6013      	str	r3, [r2, #0]
    for (i = 0, ADC2Channel1 = 0, ADC2Channel2 = 0, ADC2Channel3 = 0, ADC2Channel4 = 0, ADC2Channel5 = 0, ADC2Channel6 = 0, ADC2Channel7 = 0; i < 70;)
 80014e2:	4b3a      	ldr	r3, [pc, #232]	; (80015cc <main+0x518>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	2b45      	cmp	r3, #69	; 0x45
 80014e8:	d992      	bls.n	8001410 <main+0x35c>
    }
    ADC2Channel1 /= 10;
 80014ea:	4b3a      	ldr	r3, [pc, #232]	; (80015d4 <main+0x520>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a40      	ldr	r2, [pc, #256]	; (80015f0 <main+0x53c>)
 80014f0:	fba2 2303 	umull	r2, r3, r2, r3
 80014f4:	08db      	lsrs	r3, r3, #3
 80014f6:	4a37      	ldr	r2, [pc, #220]	; (80015d4 <main+0x520>)
 80014f8:	6013      	str	r3, [r2, #0]
    ADC2Channel2 /= 10;
 80014fa:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <main+0x524>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a3c      	ldr	r2, [pc, #240]	; (80015f0 <main+0x53c>)
 8001500:	fba2 2303 	umull	r2, r3, r2, r3
 8001504:	08db      	lsrs	r3, r3, #3
 8001506:	4a34      	ldr	r2, [pc, #208]	; (80015d8 <main+0x524>)
 8001508:	6013      	str	r3, [r2, #0]
    ADC2Channel3 /= 10;
 800150a:	4b34      	ldr	r3, [pc, #208]	; (80015dc <main+0x528>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a38      	ldr	r2, [pc, #224]	; (80015f0 <main+0x53c>)
 8001510:	fba2 2303 	umull	r2, r3, r2, r3
 8001514:	08db      	lsrs	r3, r3, #3
 8001516:	4a31      	ldr	r2, [pc, #196]	; (80015dc <main+0x528>)
 8001518:	6013      	str	r3, [r2, #0]
    ADC2Channel4 /= 10;
 800151a:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <main+0x52c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a34      	ldr	r2, [pc, #208]	; (80015f0 <main+0x53c>)
 8001520:	fba2 2303 	umull	r2, r3, r2, r3
 8001524:	08db      	lsrs	r3, r3, #3
 8001526:	4a2e      	ldr	r2, [pc, #184]	; (80015e0 <main+0x52c>)
 8001528:	6013      	str	r3, [r2, #0]
    ADC2Channel5 /= 10;
 800152a:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <main+0x530>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a30      	ldr	r2, [pc, #192]	; (80015f0 <main+0x53c>)
 8001530:	fba2 2303 	umull	r2, r3, r2, r3
 8001534:	08db      	lsrs	r3, r3, #3
 8001536:	4a2b      	ldr	r2, [pc, #172]	; (80015e4 <main+0x530>)
 8001538:	6013      	str	r3, [r2, #0]
    ADC2Channel6 /= 10;
 800153a:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <main+0x534>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a2c      	ldr	r2, [pc, #176]	; (80015f0 <main+0x53c>)
 8001540:	fba2 2303 	umull	r2, r3, r2, r3
 8001544:	08db      	lsrs	r3, r3, #3
 8001546:	4a28      	ldr	r2, [pc, #160]	; (80015e8 <main+0x534>)
 8001548:	6013      	str	r3, [r2, #0]
    ADC2Channel7 /= 10;
 800154a:	4b28      	ldr	r3, [pc, #160]	; (80015ec <main+0x538>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a28      	ldr	r2, [pc, #160]	; (80015f0 <main+0x53c>)
 8001550:	fba2 2303 	umull	r2, r3, r2, r3
 8001554:	08db      	lsrs	r3, r3, #3
 8001556:	4a25      	ldr	r2, [pc, #148]	; (80015ec <main+0x538>)
 8001558:	6013      	str	r3, [r2, #0]
    HAL_Delay(50);
 800155a:	2032      	movs	r0, #50	; 0x32
 800155c:	f001 fb00 	bl	8002b60 <HAL_Delay>
    HAL_ADC_Start_DMA(&hadc3, (uint32_t *)&ADC3_Value, 150);
 8001560:	2296      	movs	r2, #150	; 0x96
 8001562:	4924      	ldr	r1, [pc, #144]	; (80015f4 <main+0x540>)
 8001564:	4824      	ldr	r0, [pc, #144]	; (80015f8 <main+0x544>)
 8001566:	f001 fd37 	bl	8002fd8 <HAL_ADC_Start_DMA>
    for (i = 0, ADC3Channel1 = 0, ADC3Channel2 = 0, ADC3Channel3 = 0, ADC3Channel4 = 0, ADC3Channel5 = 0, ADC3Channel6 = 0, ADC3Channel7 = 0, ADC3Channel8 = 0, ADC3Channel9 = 0, ADC3Channel10 = 0, ADC3Channel11 = 0, ADC3Channel12 = 0, ADC3Channel13 = 0, ADC3Channel14 = 0, ADC3Channel15 = 0; i < 150;)
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <main+0x518>)
 800156c:	2200      	movs	r2, #0
 800156e:	801a      	strh	r2, [r3, #0]
 8001570:	4b22      	ldr	r3, [pc, #136]	; (80015fc <main+0x548>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	4b22      	ldr	r3, [pc, #136]	; (8001600 <main+0x54c>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	4b21      	ldr	r3, [pc, #132]	; (8001604 <main+0x550>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <main+0x554>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	4b20      	ldr	r3, [pc, #128]	; (800160c <main+0x558>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	4b20      	ldr	r3, [pc, #128]	; (8001610 <main+0x55c>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <main+0x560>)
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <main+0x564>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <main+0x568>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <main+0x56c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <main+0x570>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <main+0x574>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <main+0x578>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <main+0x57c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <main+0x580>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	e116      	b.n	80017fa <main+0x746>
 80015cc:	200007b4 	.word	0x200007b4
 80015d0:	20000698 	.word	0x20000698
 80015d4:	2000089c 	.word	0x2000089c
 80015d8:	200004f4 	.word	0x200004f4
 80015dc:	200004ec 	.word	0x200004ec
 80015e0:	200007bc 	.word	0x200007bc
 80015e4:	20000898 	.word	0x20000898
 80015e8:	200007b8 	.word	0x200007b8
 80015ec:	200007c8 	.word	0x200007c8
 80015f0:	cccccccd 	.word	0xcccccccd
 80015f4:	2000028c 	.word	0x2000028c
 80015f8:	2000015c 	.word	0x2000015c
 80015fc:	200008a0 	.word	0x200008a0
 8001600:	200004fc 	.word	0x200004fc
 8001604:	20000a98 	.word	0x20000a98
 8001608:	20000688 	.word	0x20000688
 800160c:	20000628 	.word	0x20000628
 8001610:	200007d0 	.word	0x200007d0
 8001614:	20000840 	.word	0x20000840
 8001618:	200007b0 	.word	0x200007b0
 800161c:	200007c0 	.word	0x200007c0
 8001620:	20000690 	.word	0x20000690
 8001624:	20000620 	.word	0x20000620
 8001628:	200007d4 	.word	0x200007d4
 800162c:	200008d8 	.word	0x200008d8
 8001630:	200004f8 	.word	0x200004f8
 8001634:	200007d8 	.word	0x200007d8
    {
      ADC3Channel1 += ADC3_Value[i++];
 8001638:	4b9a      	ldr	r3, [pc, #616]	; (80018a4 <main+0x7f0>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	b291      	uxth	r1, r2
 8001640:	4a98      	ldr	r2, [pc, #608]	; (80018a4 <main+0x7f0>)
 8001642:	8011      	strh	r1, [r2, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b98      	ldr	r3, [pc, #608]	; (80018a8 <main+0x7f4>)
 8001648:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800164c:	4b97      	ldr	r3, [pc, #604]	; (80018ac <main+0x7f8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4413      	add	r3, r2
 8001652:	4a96      	ldr	r2, [pc, #600]	; (80018ac <main+0x7f8>)
 8001654:	6013      	str	r3, [r2, #0]
      ADC3Channel2 += ADC3_Value[i++];
 8001656:	4b93      	ldr	r3, [pc, #588]	; (80018a4 <main+0x7f0>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	b291      	uxth	r1, r2
 800165e:	4a91      	ldr	r2, [pc, #580]	; (80018a4 <main+0x7f0>)
 8001660:	8011      	strh	r1, [r2, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	4b90      	ldr	r3, [pc, #576]	; (80018a8 <main+0x7f4>)
 8001666:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800166a:	4b91      	ldr	r3, [pc, #580]	; (80018b0 <main+0x7fc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a8f      	ldr	r2, [pc, #572]	; (80018b0 <main+0x7fc>)
 8001672:	6013      	str	r3, [r2, #0]
      ADC3Channel3 += ADC3_Value[i++];
 8001674:	4b8b      	ldr	r3, [pc, #556]	; (80018a4 <main+0x7f0>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	b291      	uxth	r1, r2
 800167c:	4a89      	ldr	r2, [pc, #548]	; (80018a4 <main+0x7f0>)
 800167e:	8011      	strh	r1, [r2, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b89      	ldr	r3, [pc, #548]	; (80018a8 <main+0x7f4>)
 8001684:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001688:	4b8a      	ldr	r3, [pc, #552]	; (80018b4 <main+0x800>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4413      	add	r3, r2
 800168e:	4a89      	ldr	r2, [pc, #548]	; (80018b4 <main+0x800>)
 8001690:	6013      	str	r3, [r2, #0]
      ADC3Channel4 += ADC3_Value[i++];
 8001692:	4b84      	ldr	r3, [pc, #528]	; (80018a4 <main+0x7f0>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	b291      	uxth	r1, r2
 800169a:	4a82      	ldr	r2, [pc, #520]	; (80018a4 <main+0x7f0>)
 800169c:	8011      	strh	r1, [r2, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	4b81      	ldr	r3, [pc, #516]	; (80018a8 <main+0x7f4>)
 80016a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80016a6:	4b84      	ldr	r3, [pc, #528]	; (80018b8 <main+0x804>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a82      	ldr	r2, [pc, #520]	; (80018b8 <main+0x804>)
 80016ae:	6013      	str	r3, [r2, #0]
      ADC3Channel5 += ADC3_Value[i++];
 80016b0:	4b7c      	ldr	r3, [pc, #496]	; (80018a4 <main+0x7f0>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	b291      	uxth	r1, r2
 80016b8:	4a7a      	ldr	r2, [pc, #488]	; (80018a4 <main+0x7f0>)
 80016ba:	8011      	strh	r1, [r2, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b7a      	ldr	r3, [pc, #488]	; (80018a8 <main+0x7f4>)
 80016c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80016c4:	4b7d      	ldr	r3, [pc, #500]	; (80018bc <main+0x808>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4413      	add	r3, r2
 80016ca:	4a7c      	ldr	r2, [pc, #496]	; (80018bc <main+0x808>)
 80016cc:	6013      	str	r3, [r2, #0]
      ADC3Channel6 += ADC3_Value[i++];
 80016ce:	4b75      	ldr	r3, [pc, #468]	; (80018a4 <main+0x7f0>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	1c5a      	adds	r2, r3, #1
 80016d4:	b291      	uxth	r1, r2
 80016d6:	4a73      	ldr	r2, [pc, #460]	; (80018a4 <main+0x7f0>)
 80016d8:	8011      	strh	r1, [r2, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	4b72      	ldr	r3, [pc, #456]	; (80018a8 <main+0x7f4>)
 80016de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80016e2:	4b77      	ldr	r3, [pc, #476]	; (80018c0 <main+0x80c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a75      	ldr	r2, [pc, #468]	; (80018c0 <main+0x80c>)
 80016ea:	6013      	str	r3, [r2, #0]
      ADC3Channel7 += ADC3_Value[i++];
 80016ec:	4b6d      	ldr	r3, [pc, #436]	; (80018a4 <main+0x7f0>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	b291      	uxth	r1, r2
 80016f4:	4a6b      	ldr	r2, [pc, #428]	; (80018a4 <main+0x7f0>)
 80016f6:	8011      	strh	r1, [r2, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b6b      	ldr	r3, [pc, #428]	; (80018a8 <main+0x7f4>)
 80016fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001700:	4b70      	ldr	r3, [pc, #448]	; (80018c4 <main+0x810>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4413      	add	r3, r2
 8001706:	4a6f      	ldr	r2, [pc, #444]	; (80018c4 <main+0x810>)
 8001708:	6013      	str	r3, [r2, #0]
      ADC3Channel8 += ADC3_Value[i++];
 800170a:	4b66      	ldr	r3, [pc, #408]	; (80018a4 <main+0x7f0>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	b291      	uxth	r1, r2
 8001712:	4a64      	ldr	r2, [pc, #400]	; (80018a4 <main+0x7f0>)
 8001714:	8011      	strh	r1, [r2, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <main+0x7f4>)
 800171a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800171e:	4b6a      	ldr	r3, [pc, #424]	; (80018c8 <main+0x814>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
 8001724:	4a68      	ldr	r2, [pc, #416]	; (80018c8 <main+0x814>)
 8001726:	6013      	str	r3, [r2, #0]
      ADC3Channel9 += ADC3_Value[i++];
 8001728:	4b5e      	ldr	r3, [pc, #376]	; (80018a4 <main+0x7f0>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	b291      	uxth	r1, r2
 8001730:	4a5c      	ldr	r2, [pc, #368]	; (80018a4 <main+0x7f0>)
 8001732:	8011      	strh	r1, [r2, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b5c      	ldr	r3, [pc, #368]	; (80018a8 <main+0x7f4>)
 8001738:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800173c:	4b63      	ldr	r3, [pc, #396]	; (80018cc <main+0x818>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4413      	add	r3, r2
 8001742:	4a62      	ldr	r2, [pc, #392]	; (80018cc <main+0x818>)
 8001744:	6013      	str	r3, [r2, #0]
      ADC3Channel10 += ADC3_Value[i++];
 8001746:	4b57      	ldr	r3, [pc, #348]	; (80018a4 <main+0x7f0>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	b291      	uxth	r1, r2
 800174e:	4a55      	ldr	r2, [pc, #340]	; (80018a4 <main+0x7f0>)
 8001750:	8011      	strh	r1, [r2, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	4b54      	ldr	r3, [pc, #336]	; (80018a8 <main+0x7f4>)
 8001756:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800175a:	4b5d      	ldr	r3, [pc, #372]	; (80018d0 <main+0x81c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a5b      	ldr	r2, [pc, #364]	; (80018d0 <main+0x81c>)
 8001762:	6013      	str	r3, [r2, #0]
      ADC3Channel11 += ADC3_Value[i++];
 8001764:	4b4f      	ldr	r3, [pc, #316]	; (80018a4 <main+0x7f0>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	b291      	uxth	r1, r2
 800176c:	4a4d      	ldr	r2, [pc, #308]	; (80018a4 <main+0x7f0>)
 800176e:	8011      	strh	r1, [r2, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b4d      	ldr	r3, [pc, #308]	; (80018a8 <main+0x7f4>)
 8001774:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001778:	4b56      	ldr	r3, [pc, #344]	; (80018d4 <main+0x820>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4413      	add	r3, r2
 800177e:	4a55      	ldr	r2, [pc, #340]	; (80018d4 <main+0x820>)
 8001780:	6013      	str	r3, [r2, #0]
      ADC3Channel12 += ADC3_Value[i++];
 8001782:	4b48      	ldr	r3, [pc, #288]	; (80018a4 <main+0x7f0>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	b291      	uxth	r1, r2
 800178a:	4a46      	ldr	r2, [pc, #280]	; (80018a4 <main+0x7f0>)
 800178c:	8011      	strh	r1, [r2, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	4b45      	ldr	r3, [pc, #276]	; (80018a8 <main+0x7f4>)
 8001792:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001796:	4b50      	ldr	r3, [pc, #320]	; (80018d8 <main+0x824>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4413      	add	r3, r2
 800179c:	4a4e      	ldr	r2, [pc, #312]	; (80018d8 <main+0x824>)
 800179e:	6013      	str	r3, [r2, #0]
      ADC3Channel13 += ADC3_Value[i++];
 80017a0:	4b40      	ldr	r3, [pc, #256]	; (80018a4 <main+0x7f0>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	b291      	uxth	r1, r2
 80017a8:	4a3e      	ldr	r2, [pc, #248]	; (80018a4 <main+0x7f0>)
 80017aa:	8011      	strh	r1, [r2, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b3e      	ldr	r3, [pc, #248]	; (80018a8 <main+0x7f4>)
 80017b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80017b4:	4b49      	ldr	r3, [pc, #292]	; (80018dc <main+0x828>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4413      	add	r3, r2
 80017ba:	4a48      	ldr	r2, [pc, #288]	; (80018dc <main+0x828>)
 80017bc:	6013      	str	r3, [r2, #0]
      ADC3Channel14 += ADC3_Value[i++];
 80017be:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <main+0x7f0>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	b291      	uxth	r1, r2
 80017c6:	4a37      	ldr	r2, [pc, #220]	; (80018a4 <main+0x7f0>)
 80017c8:	8011      	strh	r1, [r2, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b36      	ldr	r3, [pc, #216]	; (80018a8 <main+0x7f4>)
 80017ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80017d2:	4b43      	ldr	r3, [pc, #268]	; (80018e0 <main+0x82c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a41      	ldr	r2, [pc, #260]	; (80018e0 <main+0x82c>)
 80017da:	6013      	str	r3, [r2, #0]
      ADC3Channel15 += ADC3_Value[i++];
 80017dc:	4b31      	ldr	r3, [pc, #196]	; (80018a4 <main+0x7f0>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	b291      	uxth	r1, r2
 80017e4:	4a2f      	ldr	r2, [pc, #188]	; (80018a4 <main+0x7f0>)
 80017e6:	8011      	strh	r1, [r2, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b2f      	ldr	r3, [pc, #188]	; (80018a8 <main+0x7f4>)
 80017ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80017f0:	4b3c      	ldr	r3, [pc, #240]	; (80018e4 <main+0x830>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4413      	add	r3, r2
 80017f6:	4a3b      	ldr	r2, [pc, #236]	; (80018e4 <main+0x830>)
 80017f8:	6013      	str	r3, [r2, #0]
    for (i = 0, ADC3Channel1 = 0, ADC3Channel2 = 0, ADC3Channel3 = 0, ADC3Channel4 = 0, ADC3Channel5 = 0, ADC3Channel6 = 0, ADC3Channel7 = 0, ADC3Channel8 = 0, ADC3Channel9 = 0, ADC3Channel10 = 0, ADC3Channel11 = 0, ADC3Channel12 = 0, ADC3Channel13 = 0, ADC3Channel14 = 0, ADC3Channel15 = 0; i < 150;)
 80017fa:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <main+0x7f0>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	2b95      	cmp	r3, #149	; 0x95
 8001800:	f67f af1a 	bls.w	8001638 <main+0x584>
    }
    ADC3Channel1 /= 10;
 8001804:	4b29      	ldr	r3, [pc, #164]	; (80018ac <main+0x7f8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a37      	ldr	r2, [pc, #220]	; (80018e8 <main+0x834>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	08db      	lsrs	r3, r3, #3
 8001810:	4a26      	ldr	r2, [pc, #152]	; (80018ac <main+0x7f8>)
 8001812:	6013      	str	r3, [r2, #0]
    ADC3Channel2 /= 10;
 8001814:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <main+0x7fc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a33      	ldr	r2, [pc, #204]	; (80018e8 <main+0x834>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	08db      	lsrs	r3, r3, #3
 8001820:	4a23      	ldr	r2, [pc, #140]	; (80018b0 <main+0x7fc>)
 8001822:	6013      	str	r3, [r2, #0]
    ADC3Channel3 /= 10;
 8001824:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <main+0x800>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a2f      	ldr	r2, [pc, #188]	; (80018e8 <main+0x834>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	08db      	lsrs	r3, r3, #3
 8001830:	4a20      	ldr	r2, [pc, #128]	; (80018b4 <main+0x800>)
 8001832:	6013      	str	r3, [r2, #0]
    ADC3Channel4 /= 10;
 8001834:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <main+0x804>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a2b      	ldr	r2, [pc, #172]	; (80018e8 <main+0x834>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	08db      	lsrs	r3, r3, #3
 8001840:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <main+0x804>)
 8001842:	6013      	str	r3, [r2, #0]
    ADC3Channel5 /= 10;
 8001844:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <main+0x808>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a27      	ldr	r2, [pc, #156]	; (80018e8 <main+0x834>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	08db      	lsrs	r3, r3, #3
 8001850:	4a1a      	ldr	r2, [pc, #104]	; (80018bc <main+0x808>)
 8001852:	6013      	str	r3, [r2, #0]
    ADC3Channel6 /= 10;
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <main+0x80c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a23      	ldr	r2, [pc, #140]	; (80018e8 <main+0x834>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	08db      	lsrs	r3, r3, #3
 8001860:	4a17      	ldr	r2, [pc, #92]	; (80018c0 <main+0x80c>)
 8001862:	6013      	str	r3, [r2, #0]
    ADC3Channel7 /= 10;
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <main+0x810>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a1f      	ldr	r2, [pc, #124]	; (80018e8 <main+0x834>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	08db      	lsrs	r3, r3, #3
 8001870:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <main+0x810>)
 8001872:	6013      	str	r3, [r2, #0]
    ADC3Channel8 /= 10;
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <main+0x814>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1b      	ldr	r2, [pc, #108]	; (80018e8 <main+0x834>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	08db      	lsrs	r3, r3, #3
 8001880:	4a11      	ldr	r2, [pc, #68]	; (80018c8 <main+0x814>)
 8001882:	6013      	str	r3, [r2, #0]
    ADC3Channel9 /= 10;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <main+0x818>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <main+0x834>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	08db      	lsrs	r3, r3, #3
 8001890:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <main+0x818>)
 8001892:	6013      	str	r3, [r2, #0]
    ADC3Channel10 /= 10;
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <main+0x81c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <main+0x834>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	08db      	lsrs	r3, r3, #3
 80018a0:	e024      	b.n	80018ec <main+0x838>
 80018a2:	bf00      	nop
 80018a4:	200007b4 	.word	0x200007b4
 80018a8:	2000028c 	.word	0x2000028c
 80018ac:	200008a0 	.word	0x200008a0
 80018b0:	200004fc 	.word	0x200004fc
 80018b4:	20000a98 	.word	0x20000a98
 80018b8:	20000688 	.word	0x20000688
 80018bc:	20000628 	.word	0x20000628
 80018c0:	200007d0 	.word	0x200007d0
 80018c4:	20000840 	.word	0x20000840
 80018c8:	200007b0 	.word	0x200007b0
 80018cc:	200007c0 	.word	0x200007c0
 80018d0:	20000690 	.word	0x20000690
 80018d4:	20000620 	.word	0x20000620
 80018d8:	200007d4 	.word	0x200007d4
 80018dc:	200008d8 	.word	0x200008d8
 80018e0:	200004f8 	.word	0x200004f8
 80018e4:	200007d8 	.word	0x200007d8
 80018e8:	cccccccd 	.word	0xcccccccd
 80018ec:	4a25      	ldr	r2, [pc, #148]	; (8001984 <main+0x8d0>)
 80018ee:	6013      	str	r3, [r2, #0]
    ADC3Channel11 /= 10;
 80018f0:	4b25      	ldr	r3, [pc, #148]	; (8001988 <main+0x8d4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a25      	ldr	r2, [pc, #148]	; (800198c <main+0x8d8>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	08db      	lsrs	r3, r3, #3
 80018fc:	4a22      	ldr	r2, [pc, #136]	; (8001988 <main+0x8d4>)
 80018fe:	6013      	str	r3, [r2, #0]
    ADC3Channel12 /= 10;
 8001900:	4b23      	ldr	r3, [pc, #140]	; (8001990 <main+0x8dc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a21      	ldr	r2, [pc, #132]	; (800198c <main+0x8d8>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	08db      	lsrs	r3, r3, #3
 800190c:	4a20      	ldr	r2, [pc, #128]	; (8001990 <main+0x8dc>)
 800190e:	6013      	str	r3, [r2, #0]
    ADC3Channel13 /= 10;
 8001910:	4b20      	ldr	r3, [pc, #128]	; (8001994 <main+0x8e0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a1d      	ldr	r2, [pc, #116]	; (800198c <main+0x8d8>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	08db      	lsrs	r3, r3, #3
 800191c:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <main+0x8e0>)
 800191e:	6013      	str	r3, [r2, #0]
    ADC3Channel14 /= 10;
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <main+0x8e4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a19      	ldr	r2, [pc, #100]	; (800198c <main+0x8d8>)
 8001926:	fba2 2303 	umull	r2, r3, r2, r3
 800192a:	08db      	lsrs	r3, r3, #3
 800192c:	4a1a      	ldr	r2, [pc, #104]	; (8001998 <main+0x8e4>)
 800192e:	6013      	str	r3, [r2, #0]
    ADC3Channel15 /= 10;
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <main+0x8e8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a15      	ldr	r2, [pc, #84]	; (800198c <main+0x8d8>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	08db      	lsrs	r3, r3, #3
 800193c:	4a17      	ldr	r2, [pc, #92]	; (800199c <main+0x8e8>)
 800193e:	6013      	str	r3, [r2, #0]
    HAL_Delay(50);
 8001940:	2032      	movs	r0, #50	; 0x32
 8001942:	f001 f90d 	bl	8002b60 <HAL_Delay>
    HAL_ADC_Start_DMA(&hadc4, (uint32_t *)&ADC4_Value, 70);
 8001946:	2246      	movs	r2, #70	; 0x46
 8001948:	4915      	ldr	r1, [pc, #84]	; (80019a0 <main+0x8ec>)
 800194a:	4816      	ldr	r0, [pc, #88]	; (80019a4 <main+0x8f0>)
 800194c:	f001 fb44 	bl	8002fd8 <HAL_ADC_Start_DMA>
    for (i = 0, ADC4Channel1 = 0, ADC4Channel2 = 0, ADC4Channel3 = 0, ADC4Channel4 = 0, ADC4Channel5 = 0, ADC4Channel6 = 0, ADC4Channel7 = 0; i < 70;)
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <main+0x8f4>)
 8001952:	2200      	movs	r2, #0
 8001954:	801a      	strh	r2, [r3, #0]
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <main+0x8f8>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <main+0x8fc>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <main+0x900>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <main+0x904>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <main+0x908>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <main+0x90c>)
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <main+0x910>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e08b      	b.n	8001a9a <main+0x9e6>
 8001982:	bf00      	nop
 8001984:	20000690 	.word	0x20000690
 8001988:	20000620 	.word	0x20000620
 800198c:	cccccccd 	.word	0xcccccccd
 8001990:	200007d4 	.word	0x200007d4
 8001994:	200008d8 	.word	0x200008d8
 8001998:	200004f8 	.word	0x200004f8
 800199c:	200007d8 	.word	0x200007d8
 80019a0:	20000508 	.word	0x20000508
 80019a4:	200001f0 	.word	0x200001f0
 80019a8:	200007b4 	.word	0x200007b4
 80019ac:	20000500 	.word	0x20000500
 80019b0:	200008a4 	.word	0x200008a4
 80019b4:	200007cc 	.word	0x200007cc
 80019b8:	20000288 	.word	0x20000288
 80019bc:	20000694 	.word	0x20000694
 80019c0:	200007dc 	.word	0x200007dc
 80019c4:	200007e0 	.word	0x200007e0
    {
      ADC4Channel1 += ADC4_Value[i++];
 80019c8:	4b8e      	ldr	r3, [pc, #568]	; (8001c04 <main+0xb50>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	b291      	uxth	r1, r2
 80019d0:	4a8c      	ldr	r2, [pc, #560]	; (8001c04 <main+0xb50>)
 80019d2:	8011      	strh	r1, [r2, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b8c      	ldr	r3, [pc, #560]	; (8001c08 <main+0xb54>)
 80019d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019dc:	4b8b      	ldr	r3, [pc, #556]	; (8001c0c <main+0xb58>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	4a8a      	ldr	r2, [pc, #552]	; (8001c0c <main+0xb58>)
 80019e4:	6013      	str	r3, [r2, #0]
      ADC4Channel2 += ADC4_Value[i++];
 80019e6:	4b87      	ldr	r3, [pc, #540]	; (8001c04 <main+0xb50>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	b291      	uxth	r1, r2
 80019ee:	4a85      	ldr	r2, [pc, #532]	; (8001c04 <main+0xb50>)
 80019f0:	8011      	strh	r1, [r2, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b84      	ldr	r3, [pc, #528]	; (8001c08 <main+0xb54>)
 80019f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019fa:	4b85      	ldr	r3, [pc, #532]	; (8001c10 <main+0xb5c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	4a83      	ldr	r2, [pc, #524]	; (8001c10 <main+0xb5c>)
 8001a02:	6013      	str	r3, [r2, #0]
      ADC4Channel3 += ADC4_Value[i++];
 8001a04:	4b7f      	ldr	r3, [pc, #508]	; (8001c04 <main+0xb50>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	b291      	uxth	r1, r2
 8001a0c:	4a7d      	ldr	r2, [pc, #500]	; (8001c04 <main+0xb50>)
 8001a0e:	8011      	strh	r1, [r2, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b7d      	ldr	r3, [pc, #500]	; (8001c08 <main+0xb54>)
 8001a14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a18:	4b7e      	ldr	r3, [pc, #504]	; (8001c14 <main+0xb60>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a7d      	ldr	r2, [pc, #500]	; (8001c14 <main+0xb60>)
 8001a20:	6013      	str	r3, [r2, #0]
      ADC4Channel4 += ADC4_Value[i++];
 8001a22:	4b78      	ldr	r3, [pc, #480]	; (8001c04 <main+0xb50>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	b291      	uxth	r1, r2
 8001a2a:	4a76      	ldr	r2, [pc, #472]	; (8001c04 <main+0xb50>)
 8001a2c:	8011      	strh	r1, [r2, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b75      	ldr	r3, [pc, #468]	; (8001c08 <main+0xb54>)
 8001a32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a36:	4b78      	ldr	r3, [pc, #480]	; (8001c18 <main+0xb64>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a76      	ldr	r2, [pc, #472]	; (8001c18 <main+0xb64>)
 8001a3e:	6013      	str	r3, [r2, #0]
      ADC4Channel5 += ADC4_Value[i++];
 8001a40:	4b70      	ldr	r3, [pc, #448]	; (8001c04 <main+0xb50>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	b291      	uxth	r1, r2
 8001a48:	4a6e      	ldr	r2, [pc, #440]	; (8001c04 <main+0xb50>)
 8001a4a:	8011      	strh	r1, [r2, #0]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b6e      	ldr	r3, [pc, #440]	; (8001c08 <main+0xb54>)
 8001a50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a54:	4b71      	ldr	r3, [pc, #452]	; (8001c1c <main+0xb68>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	4a70      	ldr	r2, [pc, #448]	; (8001c1c <main+0xb68>)
 8001a5c:	6013      	str	r3, [r2, #0]
      ADC4Channel6 += ADC4_Value[i++];
 8001a5e:	4b69      	ldr	r3, [pc, #420]	; (8001c04 <main+0xb50>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	b291      	uxth	r1, r2
 8001a66:	4a67      	ldr	r2, [pc, #412]	; (8001c04 <main+0xb50>)
 8001a68:	8011      	strh	r1, [r2, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b66      	ldr	r3, [pc, #408]	; (8001c08 <main+0xb54>)
 8001a6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a72:	4b6b      	ldr	r3, [pc, #428]	; (8001c20 <main+0xb6c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	4a69      	ldr	r2, [pc, #420]	; (8001c20 <main+0xb6c>)
 8001a7a:	6013      	str	r3, [r2, #0]
      ADC4Channel7 += ADC4_Value[i++];
 8001a7c:	4b61      	ldr	r3, [pc, #388]	; (8001c04 <main+0xb50>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	b291      	uxth	r1, r2
 8001a84:	4a5f      	ldr	r2, [pc, #380]	; (8001c04 <main+0xb50>)
 8001a86:	8011      	strh	r1, [r2, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b5f      	ldr	r3, [pc, #380]	; (8001c08 <main+0xb54>)
 8001a8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a90:	4b64      	ldr	r3, [pc, #400]	; (8001c24 <main+0xb70>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a63      	ldr	r2, [pc, #396]	; (8001c24 <main+0xb70>)
 8001a98:	6013      	str	r3, [r2, #0]
    for (i = 0, ADC4Channel1 = 0, ADC4Channel2 = 0, ADC4Channel3 = 0, ADC4Channel4 = 0, ADC4Channel5 = 0, ADC4Channel6 = 0, ADC4Channel7 = 0; i < 70;)
 8001a9a:	4b5a      	ldr	r3, [pc, #360]	; (8001c04 <main+0xb50>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	2b45      	cmp	r3, #69	; 0x45
 8001aa0:	d992      	bls.n	80019c8 <main+0x914>
    }
    ADC4Channel1 /= 10;
 8001aa2:	4b5a      	ldr	r3, [pc, #360]	; (8001c0c <main+0xb58>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a60      	ldr	r2, [pc, #384]	; (8001c28 <main+0xb74>)
 8001aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aac:	08db      	lsrs	r3, r3, #3
 8001aae:	4a57      	ldr	r2, [pc, #348]	; (8001c0c <main+0xb58>)
 8001ab0:	6013      	str	r3, [r2, #0]
    ADC4Channel2 /= 10;
 8001ab2:	4b57      	ldr	r3, [pc, #348]	; (8001c10 <main+0xb5c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a5c      	ldr	r2, [pc, #368]	; (8001c28 <main+0xb74>)
 8001ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8001abc:	08db      	lsrs	r3, r3, #3
 8001abe:	4a54      	ldr	r2, [pc, #336]	; (8001c10 <main+0xb5c>)
 8001ac0:	6013      	str	r3, [r2, #0]
    ADC4Channel3 /= 10;
 8001ac2:	4b54      	ldr	r3, [pc, #336]	; (8001c14 <main+0xb60>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <main+0xb74>)
 8001ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8001acc:	08db      	lsrs	r3, r3, #3
 8001ace:	4a51      	ldr	r2, [pc, #324]	; (8001c14 <main+0xb60>)
 8001ad0:	6013      	str	r3, [r2, #0]
    ADC4Channel4 /= 10;
 8001ad2:	4b51      	ldr	r3, [pc, #324]	; (8001c18 <main+0xb64>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a54      	ldr	r2, [pc, #336]	; (8001c28 <main+0xb74>)
 8001ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8001adc:	08db      	lsrs	r3, r3, #3
 8001ade:	4a4e      	ldr	r2, [pc, #312]	; (8001c18 <main+0xb64>)
 8001ae0:	6013      	str	r3, [r2, #0]
    ADC4Channel5 /= 10;
 8001ae2:	4b4e      	ldr	r3, [pc, #312]	; (8001c1c <main+0xb68>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a50      	ldr	r2, [pc, #320]	; (8001c28 <main+0xb74>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	08db      	lsrs	r3, r3, #3
 8001aee:	4a4b      	ldr	r2, [pc, #300]	; (8001c1c <main+0xb68>)
 8001af0:	6013      	str	r3, [r2, #0]
    ADC4Channel6 /= 10;
 8001af2:	4b4b      	ldr	r3, [pc, #300]	; (8001c20 <main+0xb6c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a4c      	ldr	r2, [pc, #304]	; (8001c28 <main+0xb74>)
 8001af8:	fba2 2303 	umull	r2, r3, r2, r3
 8001afc:	08db      	lsrs	r3, r3, #3
 8001afe:	4a48      	ldr	r2, [pc, #288]	; (8001c20 <main+0xb6c>)
 8001b00:	6013      	str	r3, [r2, #0]
    ADC4Channel7 /= 10;
 8001b02:	4b48      	ldr	r3, [pc, #288]	; (8001c24 <main+0xb70>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a48      	ldr	r2, [pc, #288]	; (8001c28 <main+0xb74>)
 8001b08:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0c:	08db      	lsrs	r3, r3, #3
 8001b0e:	4a45      	ldr	r2, [pc, #276]	; (8001c24 <main+0xb70>)
 8001b10:	6013      	str	r3, [r2, #0]
    HAL_Delay(50);
 8001b12:	2032      	movs	r0, #50	; 0x32
 8001b14:	f001 f824 	bl	8002b60 <HAL_Delay>

    ADCsum_Value[0] = Slaveboard1_dev_id1;
 8001b18:	4b44      	ldr	r3, [pc, #272]	; (8001c2c <main+0xb78>)
 8001b1a:	881a      	ldrh	r2, [r3, #0]
 8001b1c:	4b44      	ldr	r3, [pc, #272]	; (8001c30 <main+0xb7c>)
 8001b1e:	801a      	strh	r2, [r3, #0]
    //     	 ADC1Channel8,ADC1Channel9,ADC1Channel11,ADC2Channel1,ADC2Channel2,ADC2Channel3,ADC2Channel4,ADC2Channel10,ADC2Channel5,ADC2Channel6,ADC2Channel7,
    //     	 ADC3Channel1,ADC3Channel2,ADC3Channel3,ADC3Channel4,ADC3Channel10,ADC3Channel5,ADC3Channel6,ADC3Channel7,ADC3Channel8,ADC3Channel9,ADC3Channel11,ADC3Channel12,ADC3Channel13,ADC3Channel14,ADC3Channel15,
    //     	 ADC4Channel1,ADC4Channel2,ADC4Channel3,ADC4Channel4,ADC4Channel10,ADC4Channel5,ADC4Channel6,ADC4Channel7};


    ADCsum_Value[1] = ADC1Channel1;
 8001b20:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <main+0xb80>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	4b42      	ldr	r3, [pc, #264]	; (8001c30 <main+0xb7c>)
 8001b28:	805a      	strh	r2, [r3, #2]
    ADCsum_Value[2] = ADC1Channel2;
 8001b2a:	4b43      	ldr	r3, [pc, #268]	; (8001c38 <main+0xb84>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	4b3f      	ldr	r3, [pc, #252]	; (8001c30 <main+0xb7c>)
 8001b32:	809a      	strh	r2, [r3, #4]
    ADCsum_Value[3] = ADC1Channel3;
 8001b34:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <main+0xb88>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <main+0xb7c>)
 8001b3c:	80da      	strh	r2, [r3, #6]
    ADCsum_Value[4] = ADC1Channel4;
 8001b3e:	4b40      	ldr	r3, [pc, #256]	; (8001c40 <main+0xb8c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	4b3a      	ldr	r3, [pc, #232]	; (8001c30 <main+0xb7c>)
 8001b46:	811a      	strh	r2, [r3, #8]
    ADCsum_Value[5] = ADC1Channel5;
 8001b48:	4b3e      	ldr	r3, [pc, #248]	; (8001c44 <main+0xb90>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <main+0xb7c>)
 8001b50:	815a      	strh	r2, [r3, #10]
    ADCsum_Value[6] = ADC1Channel6;
 8001b52:	4b3d      	ldr	r3, [pc, #244]	; (8001c48 <main+0xb94>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	4b35      	ldr	r3, [pc, #212]	; (8001c30 <main+0xb7c>)
 8001b5a:	819a      	strh	r2, [r3, #12]
    ADCsum_Value[7] = ADC1Channel7;
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <main+0xb98>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <main+0xb7c>)
 8001b64:	81da      	strh	r2, [r3, #14]
    ADCsum_Value[8] = ADC1Channel8;
 8001b66:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <main+0xb9c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	4b30      	ldr	r3, [pc, #192]	; (8001c30 <main+0xb7c>)
 8001b6e:	821a      	strh	r2, [r3, #16]
    ADCsum_Value[9] = ADC1Channel9;
 8001b70:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <main+0xba0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	4b2e      	ldr	r3, [pc, #184]	; (8001c30 <main+0xb7c>)
 8001b78:	825a      	strh	r2, [r3, #18]
    ADCsum_Value[10] = ADC1Channel10;
 8001b7a:	4b37      	ldr	r3, [pc, #220]	; (8001c58 <main+0xba4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <main+0xb7c>)
 8001b82:	829a      	strh	r2, [r3, #20]
    ADCsum_Value[11] = ADC1Channel11;
 8001b84:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <main+0xba8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <main+0xb7c>)
 8001b8c:	82da      	strh	r2, [r3, #22]

    ADCsum_Value[12] = ADC2Channel1;
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <main+0xbac>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <main+0xb7c>)
 8001b96:	831a      	strh	r2, [r3, #24]
    ADCsum_Value[13] = ADC2Channel2;
 8001b98:	4b32      	ldr	r3, [pc, #200]	; (8001c64 <main+0xbb0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <main+0xb7c>)
 8001ba0:	835a      	strh	r2, [r3, #26]
    ADCsum_Value[14] = ADC2Channel3;
 8001ba2:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <main+0xbb4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <main+0xb7c>)
 8001baa:	839a      	strh	r2, [r3, #28]
    ADCsum_Value[15] = ADC2Channel4;
 8001bac:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <main+0xbb8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <main+0xb7c>)
 8001bb4:	83da      	strh	r2, [r3, #30]
    ADCsum_Value[16] = ADC2Channel5;
 8001bb6:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <main+0xbbc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <main+0xb7c>)
 8001bbe:	841a      	strh	r2, [r3, #32]
    ADCsum_Value[17] = ADC2Channel6;
 8001bc0:	4b2c      	ldr	r3, [pc, #176]	; (8001c74 <main+0xbc0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <main+0xb7c>)
 8001bc8:	845a      	strh	r2, [r3, #34]	; 0x22
    ADCsum_Value[18] = ADC2Channel7;
 8001bca:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <main+0xbc4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <main+0xb7c>)
 8001bd2:	849a      	strh	r2, [r3, #36]	; 0x24

    ADCsum_Value[19] = ADC3Channel1;
 8001bd4:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <main+0xbc8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <main+0xb7c>)
 8001bdc:	84da      	strh	r2, [r3, #38]	; 0x26
    ADCsum_Value[20] = ADC3Channel2;
 8001bde:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <main+0xbcc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <main+0xb7c>)
 8001be6:	851a      	strh	r2, [r3, #40]	; 0x28
    ADCsum_Value[21] = ADC3Channel3;
 8001be8:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <main+0xbd0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <main+0xb7c>)
 8001bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    ADCsum_Value[22] = ADC3Channel4;
 8001bf2:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <main+0xbd4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <main+0xb7c>)
 8001bfa:	859a      	strh	r2, [r3, #44]	; 0x2c
    ADCsum_Value[23] = ADC3Channel5;
 8001bfc:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <main+0xbd8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	e046      	b.n	8001c90 <main+0xbdc>
 8001c02:	bf00      	nop
 8001c04:	200007b4 	.word	0x200007b4
 8001c08:	20000508 	.word	0x20000508
 8001c0c:	20000500 	.word	0x20000500
 8001c10:	200008a4 	.word	0x200008a4
 8001c14:	200007cc 	.word	0x200007cc
 8001c18:	20000288 	.word	0x20000288
 8001c1c:	20000694 	.word	0x20000694
 8001c20:	200007dc 	.word	0x200007dc
 8001c24:	200007e0 	.word	0x200007e0
 8001c28:	cccccccd 	.word	0xcccccccd
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000844 	.word	0x20000844
 8001c34:	20000624 	.word	0x20000624
 8001c38:	200008dc 	.word	0x200008dc
 8001c3c:	200007c4 	.word	0x200007c4
 8001c40:	200004f0 	.word	0x200004f0
 8001c44:	200007e4 	.word	0x200007e4
 8001c48:	200004e8 	.word	0x200004e8
 8001c4c:	20000284 	.word	0x20000284
 8001c50:	20000684 	.word	0x20000684
 8001c54:	200008d4 	.word	0x200008d4
 8001c58:	2000068c 	.word	0x2000068c
 8001c5c:	2000062c 	.word	0x2000062c
 8001c60:	2000089c 	.word	0x2000089c
 8001c64:	200004f4 	.word	0x200004f4
 8001c68:	200004ec 	.word	0x200004ec
 8001c6c:	200007bc 	.word	0x200007bc
 8001c70:	20000898 	.word	0x20000898
 8001c74:	200007b8 	.word	0x200007b8
 8001c78:	200007c8 	.word	0x200007c8
 8001c7c:	200008a0 	.word	0x200008a0
 8001c80:	200004fc 	.word	0x200004fc
 8001c84:	20000a98 	.word	0x20000a98
 8001c88:	20000688 	.word	0x20000688
 8001c8c:	20000628 	.word	0x20000628
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	4b95      	ldr	r3, [pc, #596]	; (8001ee8 <main+0xe34>)
 8001c94:	85da      	strh	r2, [r3, #46]	; 0x2e
    ADCsum_Value[24] = ADC3Channel6;
 8001c96:	4b95      	ldr	r3, [pc, #596]	; (8001eec <main+0xe38>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b92      	ldr	r3, [pc, #584]	; (8001ee8 <main+0xe34>)
 8001c9e:	861a      	strh	r2, [r3, #48]	; 0x30
    ADCsum_Value[25] = ADC3Channel7;
 8001ca0:	4b93      	ldr	r3, [pc, #588]	; (8001ef0 <main+0xe3c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	4b90      	ldr	r3, [pc, #576]	; (8001ee8 <main+0xe34>)
 8001ca8:	865a      	strh	r2, [r3, #50]	; 0x32
    ADCsum_Value[26] = ADC3Channel8;
 8001caa:	4b92      	ldr	r3, [pc, #584]	; (8001ef4 <main+0xe40>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	4b8d      	ldr	r3, [pc, #564]	; (8001ee8 <main+0xe34>)
 8001cb2:	869a      	strh	r2, [r3, #52]	; 0x34
    ADCsum_Value[27] = ADC3Channel9;
 8001cb4:	4b90      	ldr	r3, [pc, #576]	; (8001ef8 <main+0xe44>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	4b8b      	ldr	r3, [pc, #556]	; (8001ee8 <main+0xe34>)
 8001cbc:	86da      	strh	r2, [r3, #54]	; 0x36
    ADCsum_Value[28] = ADC3Channel10;
 8001cbe:	4b8f      	ldr	r3, [pc, #572]	; (8001efc <main+0xe48>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b88      	ldr	r3, [pc, #544]	; (8001ee8 <main+0xe34>)
 8001cc6:	871a      	strh	r2, [r3, #56]	; 0x38
    ADCsum_Value[29] = ADC3Channel11;
 8001cc8:	4b8d      	ldr	r3, [pc, #564]	; (8001f00 <main+0xe4c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b86      	ldr	r3, [pc, #536]	; (8001ee8 <main+0xe34>)
 8001cd0:	875a      	strh	r2, [r3, #58]	; 0x3a
    ADCsum_Value[30] = ADC3Channel12;
 8001cd2:	4b8c      	ldr	r3, [pc, #560]	; (8001f04 <main+0xe50>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	4b83      	ldr	r3, [pc, #524]	; (8001ee8 <main+0xe34>)
 8001cda:	879a      	strh	r2, [r3, #60]	; 0x3c
    ADCsum_Value[31] = ADC3Channel13;
 8001cdc:	4b8a      	ldr	r3, [pc, #552]	; (8001f08 <main+0xe54>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	4b81      	ldr	r3, [pc, #516]	; (8001ee8 <main+0xe34>)
 8001ce4:	87da      	strh	r2, [r3, #62]	; 0x3e
    ADCsum_Value[32] = ADC3Channel14;
 8001ce6:	4b89      	ldr	r3, [pc, #548]	; (8001f0c <main+0xe58>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	4b7e      	ldr	r3, [pc, #504]	; (8001ee8 <main+0xe34>)
 8001cee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    ADCsum_Value[33] = ADC3Channel15;
 8001cf2:	4b87      	ldr	r3, [pc, #540]	; (8001f10 <main+0xe5c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	4b7b      	ldr	r3, [pc, #492]	; (8001ee8 <main+0xe34>)
 8001cfa:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

    ADCsum_Value[34] = ADC4Channel1;
 8001cfe:	4b85      	ldr	r3, [pc, #532]	; (8001f14 <main+0xe60>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	4b78      	ldr	r3, [pc, #480]	; (8001ee8 <main+0xe34>)
 8001d06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    ADCsum_Value[35] = ADC4Channel2;
 8001d0a:	4b83      	ldr	r3, [pc, #524]	; (8001f18 <main+0xe64>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	4b75      	ldr	r3, [pc, #468]	; (8001ee8 <main+0xe34>)
 8001d12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    ADCsum_Value[36] = ADC4Channel3;
 8001d16:	4b81      	ldr	r3, [pc, #516]	; (8001f1c <main+0xe68>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	4b72      	ldr	r3, [pc, #456]	; (8001ee8 <main+0xe34>)
 8001d1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    ADCsum_Value[37] = ADC4Channel4;
 8001d22:	4b7f      	ldr	r3, [pc, #508]	; (8001f20 <main+0xe6c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b6f      	ldr	r3, [pc, #444]	; (8001ee8 <main+0xe34>)
 8001d2a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    ADCsum_Value[38] = ADC4Channel5;
 8001d2e:	4b7d      	ldr	r3, [pc, #500]	; (8001f24 <main+0xe70>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	4b6c      	ldr	r3, [pc, #432]	; (8001ee8 <main+0xe34>)
 8001d36:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    ADCsum_Value[39] = ADC4Channel6;
 8001d3a:	4b7b      	ldr	r3, [pc, #492]	; (8001f28 <main+0xe74>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	4b69      	ldr	r3, [pc, #420]	; (8001ee8 <main+0xe34>)
 8001d42:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    ADCsum_Value[40] = ADC4Channel7;
 8001d46:	4b79      	ldr	r3, [pc, #484]	; (8001f2c <main+0xe78>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	4b66      	ldr	r3, [pc, #408]	; (8001ee8 <main+0xe34>)
 8001d4e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
//    {
//      midvalue=ADCsum_Value[i];
//      ADCconvert_Value[2*i+1] = (ADCsum_Value[i] >> 8) & 0x0f; //high 8bit
//      ADCconvert_Value[2*i] = midvalue & 0xff;            //low 8bit
//    }
    midvalue=Slaveboard1_dev_id1;
 8001d52:	4b77      	ldr	r3, [pc, #476]	; (8001f30 <main+0xe7c>)
 8001d54:	881a      	ldrh	r2, [r3, #0]
 8001d56:	4b77      	ldr	r3, [pc, #476]	; (8001f34 <main+0xe80>)
 8001d58:	801a      	strh	r2, [r3, #0]
    ADCconvert_Value[0] = Slaveboard1_dev_id1 & 0xff;
 8001d5a:	4b75      	ldr	r3, [pc, #468]	; (8001f30 <main+0xe7c>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	4b75      	ldr	r3, [pc, #468]	; (8001f38 <main+0xe84>)
 8001d62:	701a      	strb	r2, [r3, #0]
    ADCconvert_Value[1] = (midvalue >> 8) & 0x0f;
 8001d64:	4b73      	ldr	r3, [pc, #460]	; (8001f34 <main+0xe80>)
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	4b70      	ldr	r3, [pc, #448]	; (8001f38 <main+0xe84>)
 8001d76:	705a      	strb	r2, [r3, #1]
    HAL_Delay(3);
 8001d78:	2003      	movs	r0, #3
 8001d7a:	f000 fef1 	bl	8002b60 <HAL_Delay>


    midvalue=ADCsum_Value[1];
 8001d7e:	4b5a      	ldr	r3, [pc, #360]	; (8001ee8 <main+0xe34>)
 8001d80:	885a      	ldrh	r2, [r3, #2]
 8001d82:	4b6c      	ldr	r3, [pc, #432]	; (8001f34 <main+0xe80>)
 8001d84:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[2] = ADCsum_Value[1] & 0xff;
 8001d86:	4b58      	ldr	r3, [pc, #352]	; (8001ee8 <main+0xe34>)
 8001d88:	885b      	ldrh	r3, [r3, #2]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	4b6a      	ldr	r3, [pc, #424]	; (8001f38 <main+0xe84>)
 8001d8e:	709a      	strb	r2, [r3, #2]

    ADCconvert_Value[3] = (midvalue >> 8) & 0x0f;
 8001d90:	4b68      	ldr	r3, [pc, #416]	; (8001f34 <main+0xe80>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	4b65      	ldr	r3, [pc, #404]	; (8001f38 <main+0xe84>)
 8001da2:	70da      	strb	r2, [r3, #3]

    HAL_Delay(3);
 8001da4:	2003      	movs	r0, #3
 8001da6:	f000 fedb 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[2];
 8001daa:	4b4f      	ldr	r3, [pc, #316]	; (8001ee8 <main+0xe34>)
 8001dac:	889a      	ldrh	r2, [r3, #4]
 8001dae:	4b61      	ldr	r3, [pc, #388]	; (8001f34 <main+0xe80>)
 8001db0:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[4] = ADCsum_Value[2] & 0xff;
 8001db2:	4b4d      	ldr	r3, [pc, #308]	; (8001ee8 <main+0xe34>)
 8001db4:	889b      	ldrh	r3, [r3, #4]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	4b5f      	ldr	r3, [pc, #380]	; (8001f38 <main+0xe84>)
 8001dba:	711a      	strb	r2, [r3, #4]

    ADCconvert_Value[5] = (midvalue >> 8) & 0x0f;
 8001dbc:	4b5d      	ldr	r3, [pc, #372]	; (8001f34 <main+0xe80>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	4b5a      	ldr	r3, [pc, #360]	; (8001f38 <main+0xe84>)
 8001dce:	715a      	strb	r2, [r3, #5]

    HAL_Delay(3);
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	f000 fec5 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[3];
 8001dd6:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <main+0xe34>)
 8001dd8:	88da      	ldrh	r2, [r3, #6]
 8001dda:	4b56      	ldr	r3, [pc, #344]	; (8001f34 <main+0xe80>)
 8001ddc:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[6] = ADCsum_Value[3] & 0xff;
 8001dde:	4b42      	ldr	r3, [pc, #264]	; (8001ee8 <main+0xe34>)
 8001de0:	88db      	ldrh	r3, [r3, #6]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	4b54      	ldr	r3, [pc, #336]	; (8001f38 <main+0xe84>)
 8001de6:	719a      	strb	r2, [r3, #6]

    ADCconvert_Value[7] = (midvalue >> 8) & 0x0f;
 8001de8:	4b52      	ldr	r3, [pc, #328]	; (8001f34 <main+0xe80>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b4f      	ldr	r3, [pc, #316]	; (8001f38 <main+0xe84>)
 8001dfa:	71da      	strb	r2, [r3, #7]

    HAL_Delay(3);
 8001dfc:	2003      	movs	r0, #3
 8001dfe:	f000 feaf 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[4];
 8001e02:	4b39      	ldr	r3, [pc, #228]	; (8001ee8 <main+0xe34>)
 8001e04:	891a      	ldrh	r2, [r3, #8]
 8001e06:	4b4b      	ldr	r3, [pc, #300]	; (8001f34 <main+0xe80>)
 8001e08:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[8] = ADCsum_Value[4] & 0xff;
 8001e0a:	4b37      	ldr	r3, [pc, #220]	; (8001ee8 <main+0xe34>)
 8001e0c:	891b      	ldrh	r3, [r3, #8]
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	4b49      	ldr	r3, [pc, #292]	; (8001f38 <main+0xe84>)
 8001e12:	721a      	strb	r2, [r3, #8]

    ADCconvert_Value[9] = (midvalue >> 8) & 0x0f;
 8001e14:	4b47      	ldr	r3, [pc, #284]	; (8001f34 <main+0xe80>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <main+0xe84>)
 8001e26:	725a      	strb	r2, [r3, #9]

    HAL_Delay(3);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f000 fe99 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[5];
 8001e2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ee8 <main+0xe34>)
 8001e30:	895a      	ldrh	r2, [r3, #10]
 8001e32:	4b40      	ldr	r3, [pc, #256]	; (8001f34 <main+0xe80>)
 8001e34:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[10] = ADCsum_Value[5] & 0xff;
 8001e36:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <main+0xe34>)
 8001e38:	895b      	ldrh	r3, [r3, #10]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	4b3e      	ldr	r3, [pc, #248]	; (8001f38 <main+0xe84>)
 8001e3e:	729a      	strb	r2, [r3, #10]

    ADCconvert_Value[11] = (midvalue >> 8) & 0x0f;
 8001e40:	4b3c      	ldr	r3, [pc, #240]	; (8001f34 <main+0xe80>)
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	4b39      	ldr	r3, [pc, #228]	; (8001f38 <main+0xe84>)
 8001e52:	72da      	strb	r2, [r3, #11]

    HAL_Delay(3);
 8001e54:	2003      	movs	r0, #3
 8001e56:	f000 fe83 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[6];
 8001e5a:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <main+0xe34>)
 8001e5c:	899a      	ldrh	r2, [r3, #12]
 8001e5e:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <main+0xe80>)
 8001e60:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[12] = ADCsum_Value[6] & 0xff;
 8001e62:	4b21      	ldr	r3, [pc, #132]	; (8001ee8 <main+0xe34>)
 8001e64:	899b      	ldrh	r3, [r3, #12]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	4b33      	ldr	r3, [pc, #204]	; (8001f38 <main+0xe84>)
 8001e6a:	731a      	strb	r2, [r3, #12]

    ADCconvert_Value[13] = (midvalue >> 8) & 0x0f;
 8001e6c:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <main+0xe80>)
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <main+0xe84>)
 8001e7e:	735a      	strb	r2, [r3, #13]

    HAL_Delay(3);
 8001e80:	2003      	movs	r0, #3
 8001e82:	f000 fe6d 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[7];
 8001e86:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <main+0xe34>)
 8001e88:	89da      	ldrh	r2, [r3, #14]
 8001e8a:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <main+0xe80>)
 8001e8c:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[14] = ADCsum_Value[7] & 0xff;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <main+0xe34>)
 8001e90:	89db      	ldrh	r3, [r3, #14]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <main+0xe84>)
 8001e96:	739a      	strb	r2, [r3, #14]

    ADCconvert_Value[15] = (midvalue >> 8) & 0x0f;
 8001e98:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <main+0xe80>)
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <main+0xe84>)
 8001eaa:	73da      	strb	r2, [r3, #15]

    HAL_Delay(3);
 8001eac:	2003      	movs	r0, #3
 8001eae:	f000 fe57 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[8];
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <main+0xe34>)
 8001eb4:	8a1a      	ldrh	r2, [r3, #16]
 8001eb6:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <main+0xe80>)
 8001eb8:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[16] = ADCsum_Value[8] & 0xff;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <main+0xe34>)
 8001ebc:	8a1b      	ldrh	r3, [r3, #16]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <main+0xe84>)
 8001ec2:	741a      	strb	r2, [r3, #16]

    ADCconvert_Value[17] = (midvalue >> 8) & 0x0f;
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <main+0xe80>)
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <main+0xe84>)
 8001ed6:	745a      	strb	r2, [r3, #17]

    HAL_Delay(3);
 8001ed8:	2003      	movs	r0, #3
 8001eda:	f000 fe41 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[9];
 8001ede:	4b02      	ldr	r3, [pc, #8]	; (8001ee8 <main+0xe34>)
 8001ee0:	8a5a      	ldrh	r2, [r3, #18]
 8001ee2:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <main+0xe80>)
 8001ee4:	801a      	strh	r2, [r3, #0]
 8001ee6:	e029      	b.n	8001f3c <main+0xe88>
 8001ee8:	20000844 	.word	0x20000844
 8001eec:	200007d0 	.word	0x200007d0
 8001ef0:	20000840 	.word	0x20000840
 8001ef4:	200007b0 	.word	0x200007b0
 8001ef8:	200007c0 	.word	0x200007c0
 8001efc:	20000690 	.word	0x20000690
 8001f00:	20000620 	.word	0x20000620
 8001f04:	200007d4 	.word	0x200007d4
 8001f08:	200008d8 	.word	0x200008d8
 8001f0c:	200004f8 	.word	0x200004f8
 8001f10:	200007d8 	.word	0x200007d8
 8001f14:	20000500 	.word	0x20000500
 8001f18:	200008a4 	.word	0x200008a4
 8001f1c:	200007cc 	.word	0x200007cc
 8001f20:	20000288 	.word	0x20000288
 8001f24:	20000694 	.word	0x20000694
 8001f28:	200007dc 	.word	0x200007dc
 8001f2c:	200007e0 	.word	0x200007e0
 8001f30:	20000000 	.word	0x20000000
 8001f34:	2000083c 	.word	0x2000083c
 8001f38:	20000630 	.word	0x20000630

    ADCconvert_Value[18] = ADCsum_Value[9] & 0xff;
 8001f3c:	4b9e      	ldr	r3, [pc, #632]	; (80021b8 <main+0x1104>)
 8001f3e:	8a5b      	ldrh	r3, [r3, #18]
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4b9e      	ldr	r3, [pc, #632]	; (80021bc <main+0x1108>)
 8001f44:	749a      	strb	r2, [r3, #18]

    ADCconvert_Value[19] = (midvalue >> 8) & 0x0f;
 8001f46:	4b9e      	ldr	r3, [pc, #632]	; (80021c0 <main+0x110c>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	0a1b      	lsrs	r3, r3, #8
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4b99      	ldr	r3, [pc, #612]	; (80021bc <main+0x1108>)
 8001f58:	74da      	strb	r2, [r3, #19]

    HAL_Delay(3);
 8001f5a:	2003      	movs	r0, #3
 8001f5c:	f000 fe00 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[10];
 8001f60:	4b95      	ldr	r3, [pc, #596]	; (80021b8 <main+0x1104>)
 8001f62:	8a9a      	ldrh	r2, [r3, #20]
 8001f64:	4b96      	ldr	r3, [pc, #600]	; (80021c0 <main+0x110c>)
 8001f66:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[20] = ADCsum_Value[10] & 0xff;
 8001f68:	4b93      	ldr	r3, [pc, #588]	; (80021b8 <main+0x1104>)
 8001f6a:	8a9b      	ldrh	r3, [r3, #20]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4b93      	ldr	r3, [pc, #588]	; (80021bc <main+0x1108>)
 8001f70:	751a      	strb	r2, [r3, #20]

    ADCconvert_Value[21] = (midvalue >> 8) & 0x0f;
 8001f72:	4b93      	ldr	r3, [pc, #588]	; (80021c0 <main+0x110c>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	0a1b      	lsrs	r3, r3, #8
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4b8e      	ldr	r3, [pc, #568]	; (80021bc <main+0x1108>)
 8001f84:	755a      	strb	r2, [r3, #21]

    HAL_Delay(3);
 8001f86:	2003      	movs	r0, #3
 8001f88:	f000 fdea 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[11];
 8001f8c:	4b8a      	ldr	r3, [pc, #552]	; (80021b8 <main+0x1104>)
 8001f8e:	8ada      	ldrh	r2, [r3, #22]
 8001f90:	4b8b      	ldr	r3, [pc, #556]	; (80021c0 <main+0x110c>)
 8001f92:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[22] = ADCsum_Value[11] & 0xff;
 8001f94:	4b88      	ldr	r3, [pc, #544]	; (80021b8 <main+0x1104>)
 8001f96:	8adb      	ldrh	r3, [r3, #22]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4b88      	ldr	r3, [pc, #544]	; (80021bc <main+0x1108>)
 8001f9c:	759a      	strb	r2, [r3, #22]

    ADCconvert_Value[23] = (midvalue >> 8) & 0x0f;
 8001f9e:	4b88      	ldr	r3, [pc, #544]	; (80021c0 <main+0x110c>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4b83      	ldr	r3, [pc, #524]	; (80021bc <main+0x1108>)
 8001fb0:	75da      	strb	r2, [r3, #23]

    HAL_Delay(3);
 8001fb2:	2003      	movs	r0, #3
 8001fb4:	f000 fdd4 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[12];
 8001fb8:	4b7f      	ldr	r3, [pc, #508]	; (80021b8 <main+0x1104>)
 8001fba:	8b1a      	ldrh	r2, [r3, #24]
 8001fbc:	4b80      	ldr	r3, [pc, #512]	; (80021c0 <main+0x110c>)
 8001fbe:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[24] = ADCsum_Value[12] & 0xff;
 8001fc0:	4b7d      	ldr	r3, [pc, #500]	; (80021b8 <main+0x1104>)
 8001fc2:	8b1b      	ldrh	r3, [r3, #24]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b7d      	ldr	r3, [pc, #500]	; (80021bc <main+0x1108>)
 8001fc8:	761a      	strb	r2, [r3, #24]

    ADCconvert_Value[25] = (midvalue >> 8) & 0x0f;
 8001fca:	4b7d      	ldr	r3, [pc, #500]	; (80021c0 <main+0x110c>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	0a1b      	lsrs	r3, r3, #8
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4b78      	ldr	r3, [pc, #480]	; (80021bc <main+0x1108>)
 8001fdc:	765a      	strb	r2, [r3, #25]

    HAL_Delay(3);
 8001fde:	2003      	movs	r0, #3
 8001fe0:	f000 fdbe 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[13];
 8001fe4:	4b74      	ldr	r3, [pc, #464]	; (80021b8 <main+0x1104>)
 8001fe6:	8b5a      	ldrh	r2, [r3, #26]
 8001fe8:	4b75      	ldr	r3, [pc, #468]	; (80021c0 <main+0x110c>)
 8001fea:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[26] = ADCsum_Value[13] & 0xff;
 8001fec:	4b72      	ldr	r3, [pc, #456]	; (80021b8 <main+0x1104>)
 8001fee:	8b5b      	ldrh	r3, [r3, #26]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4b72      	ldr	r3, [pc, #456]	; (80021bc <main+0x1108>)
 8001ff4:	769a      	strb	r2, [r3, #26]

    ADCconvert_Value[27] = (midvalue >> 8) & 0x0f;
 8001ff6:	4b72      	ldr	r3, [pc, #456]	; (80021c0 <main+0x110c>)
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4b6d      	ldr	r3, [pc, #436]	; (80021bc <main+0x1108>)
 8002008:	76da      	strb	r2, [r3, #27]

    HAL_Delay(3);
 800200a:	2003      	movs	r0, #3
 800200c:	f000 fda8 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[14];
 8002010:	4b69      	ldr	r3, [pc, #420]	; (80021b8 <main+0x1104>)
 8002012:	8b9a      	ldrh	r2, [r3, #28]
 8002014:	4b6a      	ldr	r3, [pc, #424]	; (80021c0 <main+0x110c>)
 8002016:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[28] = ADCsum_Value[14] & 0xff;
 8002018:	4b67      	ldr	r3, [pc, #412]	; (80021b8 <main+0x1104>)
 800201a:	8b9b      	ldrh	r3, [r3, #28]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4b67      	ldr	r3, [pc, #412]	; (80021bc <main+0x1108>)
 8002020:	771a      	strb	r2, [r3, #28]

    ADCconvert_Value[29] = (midvalue >> 8) & 0x0f;
 8002022:	4b67      	ldr	r3, [pc, #412]	; (80021c0 <main+0x110c>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	b29b      	uxth	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4b62      	ldr	r3, [pc, #392]	; (80021bc <main+0x1108>)
 8002034:	775a      	strb	r2, [r3, #29]

    HAL_Delay(3);
 8002036:	2003      	movs	r0, #3
 8002038:	f000 fd92 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[15];
 800203c:	4b5e      	ldr	r3, [pc, #376]	; (80021b8 <main+0x1104>)
 800203e:	8bda      	ldrh	r2, [r3, #30]
 8002040:	4b5f      	ldr	r3, [pc, #380]	; (80021c0 <main+0x110c>)
 8002042:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[30] = ADCsum_Value[15] & 0xff;
 8002044:	4b5c      	ldr	r3, [pc, #368]	; (80021b8 <main+0x1104>)
 8002046:	8bdb      	ldrh	r3, [r3, #30]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b5c      	ldr	r3, [pc, #368]	; (80021bc <main+0x1108>)
 800204c:	779a      	strb	r2, [r3, #30]

    ADCconvert_Value[31] = (midvalue >> 8) & 0x0f;
 800204e:	4b5c      	ldr	r3, [pc, #368]	; (80021c0 <main+0x110c>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	b29b      	uxth	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4b57      	ldr	r3, [pc, #348]	; (80021bc <main+0x1108>)
 8002060:	77da      	strb	r2, [r3, #31]

    HAL_Delay(3);
 8002062:	2003      	movs	r0, #3
 8002064:	f000 fd7c 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[16];
 8002068:	4b53      	ldr	r3, [pc, #332]	; (80021b8 <main+0x1104>)
 800206a:	8c1a      	ldrh	r2, [r3, #32]
 800206c:	4b54      	ldr	r3, [pc, #336]	; (80021c0 <main+0x110c>)
 800206e:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[32] = ADCsum_Value[16] & 0xff;
 8002070:	4b51      	ldr	r3, [pc, #324]	; (80021b8 <main+0x1104>)
 8002072:	8c1b      	ldrh	r3, [r3, #32]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4b51      	ldr	r3, [pc, #324]	; (80021bc <main+0x1108>)
 8002078:	f883 2020 	strb.w	r2, [r3, #32]

    ADCconvert_Value[33] = (midvalue >> 8) & 0x0f;
 800207c:	4b50      	ldr	r3, [pc, #320]	; (80021c0 <main+0x110c>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	b29b      	uxth	r3, r3
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	b2da      	uxtb	r2, r3
 800208c:	4b4b      	ldr	r3, [pc, #300]	; (80021bc <main+0x1108>)
 800208e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    HAL_Delay(3);
 8002092:	2003      	movs	r0, #3
 8002094:	f000 fd64 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[17];
 8002098:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <main+0x1104>)
 800209a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800209c:	4b48      	ldr	r3, [pc, #288]	; (80021c0 <main+0x110c>)
 800209e:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[34] = ADCsum_Value[17] & 0xff;
 80020a0:	4b45      	ldr	r3, [pc, #276]	; (80021b8 <main+0x1104>)
 80020a2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4b45      	ldr	r3, [pc, #276]	; (80021bc <main+0x1108>)
 80020a8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

    ADCconvert_Value[35] = (midvalue >> 8) & 0x0f;
 80020ac:	4b44      	ldr	r3, [pc, #272]	; (80021c0 <main+0x110c>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <main+0x1108>)
 80020be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    HAL_Delay(3);
 80020c2:	2003      	movs	r0, #3
 80020c4:	f000 fd4c 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[18];
 80020c8:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <main+0x1104>)
 80020ca:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80020cc:	4b3c      	ldr	r3, [pc, #240]	; (80021c0 <main+0x110c>)
 80020ce:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[36] = ADCsum_Value[18] & 0xff;
 80020d0:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <main+0x1104>)
 80020d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4b39      	ldr	r3, [pc, #228]	; (80021bc <main+0x1108>)
 80020d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    ADCconvert_Value[37] = (midvalue >> 8) & 0x0f;
 80020dc:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <main+0x110c>)
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	4b33      	ldr	r3, [pc, #204]	; (80021bc <main+0x1108>)
 80020ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    HAL_Delay(3);
 80020f2:	2003      	movs	r0, #3
 80020f4:	f000 fd34 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[19];
 80020f8:	4b2f      	ldr	r3, [pc, #188]	; (80021b8 <main+0x1104>)
 80020fa:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80020fc:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <main+0x110c>)
 80020fe:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[38] = ADCsum_Value[19] & 0xff;
 8002100:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <main+0x1104>)
 8002102:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <main+0x1108>)
 8002108:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    ADCconvert_Value[39] = (midvalue >> 8) & 0x0f;
 800210c:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <main+0x110c>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	b29b      	uxth	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b27      	ldr	r3, [pc, #156]	; (80021bc <main+0x1108>)
 800211e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

    HAL_Delay(3);
 8002122:	2003      	movs	r0, #3
 8002124:	f000 fd1c 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[20];
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <main+0x1104>)
 800212a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800212c:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <main+0x110c>)
 800212e:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[40] = ADCsum_Value[20] & 0xff;
 8002130:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <main+0x1104>)
 8002132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4b21      	ldr	r3, [pc, #132]	; (80021bc <main+0x1108>)
 8002138:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    ADCconvert_Value[41] = (midvalue >> 8) & 0x0f;
 800213c:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <main+0x110c>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	b29b      	uxth	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	b2da      	uxtb	r2, r3
 800214c:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <main+0x1108>)
 800214e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    HAL_Delay(3);
 8002152:	2003      	movs	r0, #3
 8002154:	f000 fd04 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[21];
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <main+0x1104>)
 800215a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <main+0x110c>)
 800215e:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[42] = ADCsum_Value[21] & 0xff;
 8002160:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <main+0x1104>)
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <main+0x1108>)
 8002168:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

    ADCconvert_Value[43] = (midvalue >> 8) & 0x0f;
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <main+0x110c>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	0a1b      	lsrs	r3, r3, #8
 8002172:	b29b      	uxth	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	b2da      	uxtb	r2, r3
 800217c:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <main+0x1108>)
 800217e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    HAL_Delay(3);
 8002182:	2003      	movs	r0, #3
 8002184:	f000 fcec 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[22];
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <main+0x1104>)
 800218a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <main+0x110c>)
 800218e:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[44] = ADCsum_Value[22] & 0xff;
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <main+0x1104>)
 8002192:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <main+0x1108>)
 8002198:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    ADCconvert_Value[45] = (midvalue >> 8) & 0x0f;
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <main+0x110c>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <main+0x1108>)
 80021ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    HAL_Delay(3);
 80021b2:	2003      	movs	r0, #3
 80021b4:	e006      	b.n	80021c4 <main+0x1110>
 80021b6:	bf00      	nop
 80021b8:	20000844 	.word	0x20000844
 80021bc:	20000630 	.word	0x20000630
 80021c0:	2000083c 	.word	0x2000083c
 80021c4:	f000 fccc 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[23];
 80021c8:	4ba4      	ldr	r3, [pc, #656]	; (800245c <main+0x13a8>)
 80021ca:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80021cc:	4ba4      	ldr	r3, [pc, #656]	; (8002460 <main+0x13ac>)
 80021ce:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[46] = ADCsum_Value[23] & 0xff;
 80021d0:	4ba2      	ldr	r3, [pc, #648]	; (800245c <main+0x13a8>)
 80021d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4ba3      	ldr	r3, [pc, #652]	; (8002464 <main+0x13b0>)
 80021d8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

    ADCconvert_Value[47] = (midvalue >> 8) & 0x0f;
 80021dc:	4ba0      	ldr	r3, [pc, #640]	; (8002460 <main+0x13ac>)
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	0a1b      	lsrs	r3, r3, #8
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	4b9d      	ldr	r3, [pc, #628]	; (8002464 <main+0x13b0>)
 80021ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    HAL_Delay(3);
 80021f2:	2003      	movs	r0, #3
 80021f4:	f000 fcb4 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[24];
 80021f8:	4b98      	ldr	r3, [pc, #608]	; (800245c <main+0x13a8>)
 80021fa:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80021fc:	4b98      	ldr	r3, [pc, #608]	; (8002460 <main+0x13ac>)
 80021fe:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[48] = ADCsum_Value[24] & 0xff;
 8002200:	4b96      	ldr	r3, [pc, #600]	; (800245c <main+0x13a8>)
 8002202:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4b97      	ldr	r3, [pc, #604]	; (8002464 <main+0x13b0>)
 8002208:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    ADCconvert_Value[49] = (midvalue >> 8) & 0x0f;
 800220c:	4b94      	ldr	r3, [pc, #592]	; (8002460 <main+0x13ac>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	b29b      	uxth	r3, r3
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	b2da      	uxtb	r2, r3
 800221c:	4b91      	ldr	r3, [pc, #580]	; (8002464 <main+0x13b0>)
 800221e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    HAL_Delay(3);
 8002222:	2003      	movs	r0, #3
 8002224:	f000 fc9c 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[25];
 8002228:	4b8c      	ldr	r3, [pc, #560]	; (800245c <main+0x13a8>)
 800222a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800222c:	4b8c      	ldr	r3, [pc, #560]	; (8002460 <main+0x13ac>)
 800222e:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[50] = ADCsum_Value[25] & 0xff;
 8002230:	4b8a      	ldr	r3, [pc, #552]	; (800245c <main+0x13a8>)
 8002232:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4b8b      	ldr	r3, [pc, #556]	; (8002464 <main+0x13b0>)
 8002238:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

    ADCconvert_Value[51] = (midvalue >> 8) & 0x0f;
 800223c:	4b88      	ldr	r3, [pc, #544]	; (8002460 <main+0x13ac>)
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	b29b      	uxth	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b85      	ldr	r3, [pc, #532]	; (8002464 <main+0x13b0>)
 800224e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    HAL_Delay(3);
 8002252:	2003      	movs	r0, #3
 8002254:	f000 fc84 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[26];
 8002258:	4b80      	ldr	r3, [pc, #512]	; (800245c <main+0x13a8>)
 800225a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800225c:	4b80      	ldr	r3, [pc, #512]	; (8002460 <main+0x13ac>)
 800225e:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[52] = ADCsum_Value[26] & 0xff;
 8002260:	4b7e      	ldr	r3, [pc, #504]	; (800245c <main+0x13a8>)
 8002262:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4b7f      	ldr	r3, [pc, #508]	; (8002464 <main+0x13b0>)
 8002268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    ADCconvert_Value[53] = (midvalue >> 8) & 0x0f;
 800226c:	4b7c      	ldr	r3, [pc, #496]	; (8002460 <main+0x13ac>)
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	b29b      	uxth	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	b2da      	uxtb	r2, r3
 800227c:	4b79      	ldr	r3, [pc, #484]	; (8002464 <main+0x13b0>)
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    HAL_Delay(3);
 8002282:	2003      	movs	r0, #3
 8002284:	f000 fc6c 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[27];
 8002288:	4b74      	ldr	r3, [pc, #464]	; (800245c <main+0x13a8>)
 800228a:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800228c:	4b74      	ldr	r3, [pc, #464]	; (8002460 <main+0x13ac>)
 800228e:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[54] = ADCsum_Value[27] & 0xff;
 8002290:	4b72      	ldr	r3, [pc, #456]	; (800245c <main+0x13a8>)
 8002292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b73      	ldr	r3, [pc, #460]	; (8002464 <main+0x13b0>)
 8002298:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

    ADCconvert_Value[55] = (midvalue >> 8) & 0x0f;
 800229c:	4b70      	ldr	r3, [pc, #448]	; (8002460 <main+0x13ac>)
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	4b6d      	ldr	r3, [pc, #436]	; (8002464 <main+0x13b0>)
 80022ae:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

    HAL_Delay(3);
 80022b2:	2003      	movs	r0, #3
 80022b4:	f000 fc54 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[28];
 80022b8:	4b68      	ldr	r3, [pc, #416]	; (800245c <main+0x13a8>)
 80022ba:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80022bc:	4b68      	ldr	r3, [pc, #416]	; (8002460 <main+0x13ac>)
 80022be:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[56] = ADCsum_Value[28] & 0xff;
 80022c0:	4b66      	ldr	r3, [pc, #408]	; (800245c <main+0x13a8>)
 80022c2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4b67      	ldr	r3, [pc, #412]	; (8002464 <main+0x13b0>)
 80022c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    ADCconvert_Value[57] = (midvalue >> 8) & 0x0f;
 80022cc:	4b64      	ldr	r3, [pc, #400]	; (8002460 <main+0x13ac>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b61      	ldr	r3, [pc, #388]	; (8002464 <main+0x13b0>)
 80022de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    HAL_Delay(3);
 80022e2:	2003      	movs	r0, #3
 80022e4:	f000 fc3c 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[29];
 80022e8:	4b5c      	ldr	r3, [pc, #368]	; (800245c <main+0x13a8>)
 80022ea:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80022ec:	4b5c      	ldr	r3, [pc, #368]	; (8002460 <main+0x13ac>)
 80022ee:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[58] = ADCsum_Value[29] & 0xff;
 80022f0:	4b5a      	ldr	r3, [pc, #360]	; (800245c <main+0x13a8>)
 80022f2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b5b      	ldr	r3, [pc, #364]	; (8002464 <main+0x13b0>)
 80022f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    ADCconvert_Value[59] = (midvalue >> 8) & 0x0f;
 80022fc:	4b58      	ldr	r3, [pc, #352]	; (8002460 <main+0x13ac>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	b29b      	uxth	r3, r3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	b2da      	uxtb	r2, r3
 800230c:	4b55      	ldr	r3, [pc, #340]	; (8002464 <main+0x13b0>)
 800230e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

    HAL_Delay(3);
 8002312:	2003      	movs	r0, #3
 8002314:	f000 fc24 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[30];
 8002318:	4b50      	ldr	r3, [pc, #320]	; (800245c <main+0x13a8>)
 800231a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800231c:	4b50      	ldr	r3, [pc, #320]	; (8002460 <main+0x13ac>)
 800231e:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[60] = ADCsum_Value[30] & 0xff;
 8002320:	4b4e      	ldr	r3, [pc, #312]	; (800245c <main+0x13a8>)
 8002322:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002324:	b2da      	uxtb	r2, r3
 8002326:	4b4f      	ldr	r3, [pc, #316]	; (8002464 <main+0x13b0>)
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    ADCconvert_Value[61] = (midvalue >> 8) & 0x0f;
 800232c:	4b4c      	ldr	r3, [pc, #304]	; (8002460 <main+0x13ac>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	b29b      	uxth	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	b2da      	uxtb	r2, r3
 800233c:	4b49      	ldr	r3, [pc, #292]	; (8002464 <main+0x13b0>)
 800233e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    HAL_Delay(3);
 8002342:	2003      	movs	r0, #3
 8002344:	f000 fc0c 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[31];
 8002348:	4b44      	ldr	r3, [pc, #272]	; (800245c <main+0x13a8>)
 800234a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800234c:	4b44      	ldr	r3, [pc, #272]	; (8002460 <main+0x13ac>)
 800234e:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[62] = ADCsum_Value[31] & 0xff;
 8002350:	4b42      	ldr	r3, [pc, #264]	; (800245c <main+0x13a8>)
 8002352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4b43      	ldr	r3, [pc, #268]	; (8002464 <main+0x13b0>)
 8002358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    ADCconvert_Value[63] = (midvalue >> 8) & 0x0f;
 800235c:	4b40      	ldr	r3, [pc, #256]	; (8002460 <main+0x13ac>)
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	b29b      	uxth	r3, r3
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	b2da      	uxtb	r2, r3
 800236c:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <main+0x13b0>)
 800236e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

    HAL_Delay(3);
 8002372:	2003      	movs	r0, #3
 8002374:	f000 fbf4 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[32];
 8002378:	4b38      	ldr	r3, [pc, #224]	; (800245c <main+0x13a8>)
 800237a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800237e:	4b38      	ldr	r3, [pc, #224]	; (8002460 <main+0x13ac>)
 8002380:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[64] = ADCsum_Value[32] & 0xff;
 8002382:	4b36      	ldr	r3, [pc, #216]	; (800245c <main+0x13a8>)
 8002384:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4b36      	ldr	r3, [pc, #216]	; (8002464 <main+0x13b0>)
 800238c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    ADCconvert_Value[65] = (midvalue >> 8) & 0x0f;
 8002390:	4b33      	ldr	r3, [pc, #204]	; (8002460 <main+0x13ac>)
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	b29b      	uxth	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	4b30      	ldr	r3, [pc, #192]	; (8002464 <main+0x13b0>)
 80023a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    HAL_Delay(3);
 80023a6:	2003      	movs	r0, #3
 80023a8:	f000 fbda 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[33];
 80023ac:	4b2b      	ldr	r3, [pc, #172]	; (800245c <main+0x13a8>)
 80023ae:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80023b2:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <main+0x13ac>)
 80023b4:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[66] = ADCsum_Value[33] & 0xff;
 80023b6:	4b29      	ldr	r3, [pc, #164]	; (800245c <main+0x13a8>)
 80023b8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4b29      	ldr	r3, [pc, #164]	; (8002464 <main+0x13b0>)
 80023c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    ADCconvert_Value[67] = (midvalue >> 8) & 0x0f;
 80023c4:	4b26      	ldr	r3, [pc, #152]	; (8002460 <main+0x13ac>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	4b23      	ldr	r3, [pc, #140]	; (8002464 <main+0x13b0>)
 80023d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    HAL_Delay(3);
 80023da:	2003      	movs	r0, #3
 80023dc:	f000 fbc0 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[34];
 80023e0:	4b1e      	ldr	r3, [pc, #120]	; (800245c <main+0x13a8>)
 80023e2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80023e6:	4b1e      	ldr	r3, [pc, #120]	; (8002460 <main+0x13ac>)
 80023e8:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[68] = ADCsum_Value[34] & 0xff;
 80023ea:	4b1c      	ldr	r3, [pc, #112]	; (800245c <main+0x13a8>)
 80023ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <main+0x13b0>)
 80023f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    ADCconvert_Value[69] = (midvalue >> 8) & 0x0f;
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <main+0x13ac>)
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	b29b      	uxth	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	b2da      	uxtb	r2, r3
 8002408:	4b16      	ldr	r3, [pc, #88]	; (8002464 <main+0x13b0>)
 800240a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    HAL_Delay(3);
 800240e:	2003      	movs	r0, #3
 8002410:	f000 fba6 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[35];
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <main+0x13a8>)
 8002416:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 800241a:	4b11      	ldr	r3, [pc, #68]	; (8002460 <main+0x13ac>)
 800241c:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[70] = ADCsum_Value[35] & 0xff;
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <main+0x13a8>)
 8002420:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <main+0x13b0>)
 8002428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

    ADCconvert_Value[71] = (midvalue >> 8) & 0x0f;
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <main+0x13ac>)
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	b29b      	uxth	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <main+0x13b0>)
 800243e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

    HAL_Delay(3);
 8002442:	2003      	movs	r0, #3
 8002444:	f000 fb8c 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[36];
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <main+0x13a8>)
 800244a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800244e:	4b04      	ldr	r3, [pc, #16]	; (8002460 <main+0x13ac>)
 8002450:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[72] = ADCsum_Value[36] & 0xff;
 8002452:	4b02      	ldr	r3, [pc, #8]	; (800245c <main+0x13a8>)
 8002454:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8002458:	b2da      	uxtb	r2, r3
 800245a:	e005      	b.n	8002468 <main+0x13b4>
 800245c:	20000844 	.word	0x20000844
 8002460:	2000083c 	.word	0x2000083c
 8002464:	20000630 	.word	0x20000630
 8002468:	4b47      	ldr	r3, [pc, #284]	; (8002588 <main+0x14d4>)
 800246a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    ADCconvert_Value[73] = (midvalue >> 8) & 0x0f;
 800246e:	4b47      	ldr	r3, [pc, #284]	; (800258c <main+0x14d8>)
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	0a1b      	lsrs	r3, r3, #8
 8002474:	b29b      	uxth	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4b42      	ldr	r3, [pc, #264]	; (8002588 <main+0x14d4>)
 8002480:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    HAL_Delay(3);
 8002484:	2003      	movs	r0, #3
 8002486:	f000 fb6b 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[37];
 800248a:	4b41      	ldr	r3, [pc, #260]	; (8002590 <main+0x14dc>)
 800248c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002490:	4b3e      	ldr	r3, [pc, #248]	; (800258c <main+0x14d8>)
 8002492:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[74] = ADCsum_Value[37] & 0xff;
 8002494:	4b3e      	ldr	r3, [pc, #248]	; (8002590 <main+0x14dc>)
 8002496:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800249a:	b2da      	uxtb	r2, r3
 800249c:	4b3a      	ldr	r3, [pc, #232]	; (8002588 <main+0x14d4>)
 800249e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

    ADCconvert_Value[75] = (midvalue >> 8) & 0x0f;
 80024a2:	4b3a      	ldr	r3, [pc, #232]	; (800258c <main+0x14d8>)
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b35      	ldr	r3, [pc, #212]	; (8002588 <main+0x14d4>)
 80024b4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

    HAL_Delay(3);
 80024b8:	2003      	movs	r0, #3
 80024ba:	f000 fb51 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[38];
 80024be:	4b34      	ldr	r3, [pc, #208]	; (8002590 <main+0x14dc>)
 80024c0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80024c4:	4b31      	ldr	r3, [pc, #196]	; (800258c <main+0x14d8>)
 80024c6:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[76] = ADCsum_Value[38] & 0xff;
 80024c8:	4b31      	ldr	r3, [pc, #196]	; (8002590 <main+0x14dc>)
 80024ca:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	4b2d      	ldr	r3, [pc, #180]	; (8002588 <main+0x14d4>)
 80024d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    ADCconvert_Value[77] = (midvalue >> 8) & 0x0f;
 80024d6:	4b2d      	ldr	r3, [pc, #180]	; (800258c <main+0x14d8>)
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	b29b      	uxth	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b28      	ldr	r3, [pc, #160]	; (8002588 <main+0x14d4>)
 80024e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    HAL_Delay(3);
 80024ec:	2003      	movs	r0, #3
 80024ee:	f000 fb37 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[39];
 80024f2:	4b27      	ldr	r3, [pc, #156]	; (8002590 <main+0x14dc>)
 80024f4:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80024f8:	4b24      	ldr	r3, [pc, #144]	; (800258c <main+0x14d8>)
 80024fa:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[78] = ADCsum_Value[39] & 0xff;
 80024fc:	4b24      	ldr	r3, [pc, #144]	; (8002590 <main+0x14dc>)
 80024fe:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002502:	b2da      	uxtb	r2, r3
 8002504:	4b20      	ldr	r3, [pc, #128]	; (8002588 <main+0x14d4>)
 8002506:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

    ADCconvert_Value[79] = (midvalue >> 8) & 0x0f;
 800250a:	4b20      	ldr	r3, [pc, #128]	; (800258c <main+0x14d8>)
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	b29b      	uxth	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <main+0x14d4>)
 800251c:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

    HAL_Delay(3);
 8002520:	2003      	movs	r0, #3
 8002522:	f000 fb1d 	bl	8002b60 <HAL_Delay>

    midvalue=ADCsum_Value[40];
 8002526:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <main+0x14dc>)
 8002528:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800252c:	4b17      	ldr	r3, [pc, #92]	; (800258c <main+0x14d8>)
 800252e:	801a      	strh	r2, [r3, #0]

    ADCconvert_Value[80] = ADCsum_Value[40] & 0xff;
 8002530:	4b17      	ldr	r3, [pc, #92]	; (8002590 <main+0x14dc>)
 8002532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002536:	b2da      	uxtb	r2, r3
 8002538:	4b13      	ldr	r3, [pc, #76]	; (8002588 <main+0x14d4>)
 800253a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    ADCconvert_Value[81] = (midvalue >> 8) & 0x0f;
 800253e:	4b13      	ldr	r3, [pc, #76]	; (800258c <main+0x14d8>)
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	b29b      	uxth	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <main+0x14d4>)
 8002550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    HAL_Delay(3);
 8002554:	2003      	movs	r0, #3
 8002556:	f000 fb03 	bl	8002b60 <HAL_Delay>


//    HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10,  GPIO_PIN_RESET);
 800255a:	2200      	movs	r2, #0
 800255c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002560:	480c      	ldr	r0, [pc, #48]	; (8002594 <main+0x14e0>)
 8002562:	f002 f8f1 	bl	8004748 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi3, (uint8_t *)ADCconvert_Value, sizeof((uint8_t *)ADCconvert_Value));
 8002566:	2204      	movs	r2, #4
 8002568:	4907      	ldr	r1, [pc, #28]	; (8002588 <main+0x14d4>)
 800256a:	480b      	ldr	r0, [pc, #44]	; (8002598 <main+0x14e4>)
 800256c:	f003 fd1a 	bl	8005fa4 <HAL_SPI_Transmit_DMA>
//    		HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
    		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8002570:	2201      	movs	r2, #1
 8002572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002576:	4807      	ldr	r0, [pc, #28]	; (8002594 <main+0x14e0>)
 8002578:	f002 f8e6 	bl	8004748 <HAL_GPIO_WritePin>
    		HAL_Delay(500);
 800257c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002580:	f000 faee 	bl	8002b60 <HAL_Delay>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADC1_Value, 110);
 8002584:	f7fe bdac 	b.w	80010e0 <main+0x2c>
 8002588:	20000630 	.word	0x20000630
 800258c:	2000083c 	.word	0x2000083c
 8002590:	20000844 	.word	0x20000844
 8002594:	48000800 	.word	0x48000800
 8002598:	20000af0 	.word	0x20000af0

0800259c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b0a6      	sub	sp, #152	; 0x98
 80025a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025a6:	2228      	movs	r2, #40	; 0x28
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f004 fb9a 	bl	8006ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	2258      	movs	r2, #88	; 0x58
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f004 fb8c 	bl	8006ce4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025cc:	2301      	movs	r3, #1
 80025ce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025d4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025d6:	2301      	movs	r3, #1
 80025d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025da:	2302      	movs	r3, #2
 80025dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80025ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025fa:	4618      	mov	r0, r3
 80025fc:	f002 f8bc 	bl	8004778 <HAL_RCC_OscConfig>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002606:	f000 f82f 	bl	8002668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800260a:	230f      	movs	r3, #15
 800260c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800260e:	2302      	movs	r3, #2
 8002610:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002612:	2300      	movs	r3, #0
 8002614:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800261a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800261c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002620:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002622:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002626:	2102      	movs	r1, #2
 8002628:	4618      	mov	r0, r3
 800262a:	f002 ffbb 	bl	80055a4 <HAL_RCC_ClockConfig>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002634:	f000 f818 	bl	8002668 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8002638:	f44f 73c1 	mov.w	r3, #386	; 0x182
 800263c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002648:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800264c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	4618      	mov	r0, r3
 8002652:	f003 f9dd 	bl	8005a10 <HAL_RCCEx_PeriphCLKConfig>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800265c:	f000 f804 	bl	8002668 <Error_Handler>
  }
}
 8002660:	bf00      	nop
 8002662:	3798      	adds	r7, #152	; 0x98
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800266c:	b672      	cpsid	i
}
 800266e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002670:	e7fe      	b.n	8002670 <Error_Handler+0x8>
	...

08002674 <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <MX_SPI3_Init+0x74>)
 800267a:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <MX_SPI3_Init+0x78>)
 800267c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800267e:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <MX_SPI3_Init+0x74>)
 8002680:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002684:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <MX_SPI3_Init+0x74>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800268c:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <MX_SPI3_Init+0x74>)
 800268e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002692:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <MX_SPI3_Init+0x74>)
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <MX_SPI3_Init+0x74>)
 800269c:	2200      	movs	r2, #0
 800269e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_SPI3_Init+0x74>)
 80026a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026a6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <MX_SPI3_Init+0x74>)
 80026aa:	2230      	movs	r2, #48	; 0x30
 80026ac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_SPI3_Init+0x74>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <MX_SPI3_Init+0x74>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <MX_SPI3_Init+0x74>)
 80026bc:	2200      	movs	r2, #0
 80026be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MX_SPI3_Init+0x74>)
 80026c2:	2207      	movs	r2, #7
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <MX_SPI3_Init+0x74>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_SPI3_Init+0x74>)
 80026ce:	2208      	movs	r2, #8
 80026d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_SPI3_Init+0x74>)
 80026d4:	f003 fbba 	bl	8005e4c <HAL_SPI_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80026de:	f7ff ffc3 	bl	8002668 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000af0 	.word	0x20000af0
 80026ec:	40003c00 	.word	0x40003c00

080026f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a3d      	ldr	r2, [pc, #244]	; (8002804 <HAL_SPI_MspInit+0x114>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d174      	bne.n	80027fc <HAL_SPI_MspInit+0x10c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002712:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <HAL_SPI_MspInit+0x118>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4a3c      	ldr	r2, [pc, #240]	; (8002808 <HAL_SPI_MspInit+0x118>)
 8002718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800271c:	61d3      	str	r3, [r2, #28]
 800271e:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <HAL_SPI_MspInit+0x118>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800272a:	4b37      	ldr	r3, [pc, #220]	; (8002808 <HAL_SPI_MspInit+0x118>)
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	4a36      	ldr	r2, [pc, #216]	; (8002808 <HAL_SPI_MspInit+0x118>)
 8002730:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002734:	6153      	str	r3, [r2, #20]
 8002736:	4b34      	ldr	r3, [pc, #208]	; (8002808 <HAL_SPI_MspInit+0x118>)
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002742:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002750:	2303      	movs	r3, #3
 8002752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002754:	2306      	movs	r3, #6
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4619      	mov	r1, r3
 800275e:	482b      	ldr	r0, [pc, #172]	; (800280c <HAL_SPI_MspInit+0x11c>)
 8002760:	f001 fe68 	bl	8004434 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8002764:	4b2a      	ldr	r3, [pc, #168]	; (8002810 <HAL_SPI_MspInit+0x120>)
 8002766:	4a2b      	ldr	r2, [pc, #172]	; (8002814 <HAL_SPI_MspInit+0x124>)
 8002768:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800276a:	4b29      	ldr	r3, [pc, #164]	; (8002810 <HAL_SPI_MspInit+0x120>)
 800276c:	2200      	movs	r2, #0
 800276e:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002770:	4b27      	ldr	r3, [pc, #156]	; (8002810 <HAL_SPI_MspInit+0x120>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002776:	4b26      	ldr	r3, [pc, #152]	; (8002810 <HAL_SPI_MspInit+0x120>)
 8002778:	2280      	movs	r2, #128	; 0x80
 800277a:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800277c:	4b24      	ldr	r3, [pc, #144]	; (8002810 <HAL_SPI_MspInit+0x120>)
 800277e:	2200      	movs	r2, #0
 8002780:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002782:	4b23      	ldr	r3, [pc, #140]	; (8002810 <HAL_SPI_MspInit+0x120>)
 8002784:	2200      	movs	r2, #0
 8002786:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8002788:	4b21      	ldr	r3, [pc, #132]	; (8002810 <HAL_SPI_MspInit+0x120>)
 800278a:	2220      	movs	r2, #32
 800278c:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <HAL_SPI_MspInit+0x120>)
 8002790:	2200      	movs	r2, #0
 8002792:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8002794:	481e      	ldr	r0, [pc, #120]	; (8002810 <HAL_SPI_MspInit+0x120>)
 8002796:	f001 fc9a 	bl	80040ce <HAL_DMA_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 80027a0:	f7ff ff62 	bl	8002668 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a1a      	ldr	r2, [pc, #104]	; (8002810 <HAL_SPI_MspInit+0x120>)
 80027a8:	659a      	str	r2, [r3, #88]	; 0x58
 80027aa:	4a19      	ldr	r2, [pc, #100]	; (8002810 <HAL_SPI_MspInit+0x120>)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA2_Channel2;
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_SPI_MspInit+0x128>)
 80027b2:	4a1a      	ldr	r2, [pc, #104]	; (800281c <HAL_SPI_MspInit+0x12c>)
 80027b4:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027b6:	4b18      	ldr	r3, [pc, #96]	; (8002818 <HAL_SPI_MspInit+0x128>)
 80027b8:	2210      	movs	r2, #16
 80027ba:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027bc:	4b16      	ldr	r3, [pc, #88]	; (8002818 <HAL_SPI_MspInit+0x128>)
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <HAL_SPI_MspInit+0x128>)
 80027c4:	2280      	movs	r2, #128	; 0x80
 80027c6:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027c8:	4b13      	ldr	r3, [pc, #76]	; (8002818 <HAL_SPI_MspInit+0x128>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_SPI_MspInit+0x128>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80027d4:	4b10      	ldr	r3, [pc, #64]	; (8002818 <HAL_SPI_MspInit+0x128>)
 80027d6:	2220      	movs	r2, #32
 80027d8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <HAL_SPI_MspInit+0x128>)
 80027dc:	2200      	movs	r2, #0
 80027de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80027e0:	480d      	ldr	r0, [pc, #52]	; (8002818 <HAL_SPI_MspInit+0x128>)
 80027e2:	f001 fc74 	bl	80040ce <HAL_DMA_Init>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_SPI_MspInit+0x100>
    {
      Error_Handler();
 80027ec:	f7ff ff3c 	bl	8002668 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a09      	ldr	r2, [pc, #36]	; (8002818 <HAL_SPI_MspInit+0x128>)
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
 80027f6:	4a08      	ldr	r2, [pc, #32]	; (8002818 <HAL_SPI_MspInit+0x128>)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80027fc:	bf00      	nop
 80027fe:	3728      	adds	r7, #40	; 0x28
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40003c00 	.word	0x40003c00
 8002808:	40021000 	.word	0x40021000
 800280c:	48000800 	.word	0x48000800
 8002810:	20000b98 	.word	0x20000b98
 8002814:	40020408 	.word	0x40020408
 8002818:	20000b54 	.word	0x20000b54
 800281c:	4002041c 	.word	0x4002041c

08002820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002826:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <HAL_MspInit+0x44>)
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	4a0e      	ldr	r2, [pc, #56]	; (8002864 <HAL_MspInit+0x44>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6193      	str	r3, [r2, #24]
 8002832:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <HAL_MspInit+0x44>)
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <HAL_MspInit+0x44>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4a08      	ldr	r2, [pc, #32]	; (8002864 <HAL_MspInit+0x44>)
 8002844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002848:	61d3      	str	r3, [r2, #28]
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_MspInit+0x44>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000

08002868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800286c:	e7fe      	b.n	800286c <NMI_Handler+0x4>

0800286e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002872:	e7fe      	b.n	8002872 <HardFault_Handler+0x4>

08002874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002878:	e7fe      	b.n	8002878 <MemManage_Handler+0x4>

0800287a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800287e:	e7fe      	b.n	800287e <BusFault_Handler+0x4>

08002880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002884:	e7fe      	b.n	8002884 <UsageFault_Handler+0x4>

08002886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028b4:	f000 f934 	bl	8002b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}

080028bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028c0:	4802      	ldr	r0, [pc, #8]	; (80028cc <DMA1_Channel1_IRQHandler+0x10>)
 80028c2:	f001 fcaa 	bl	800421a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	200001ac 	.word	0x200001ac

080028d0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80028d4:	4802      	ldr	r0, [pc, #8]	; (80028e0 <DMA2_Channel1_IRQHandler+0x10>)
 80028d6:	f001 fca0 	bl	800421a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000b98 	.word	0x20000b98

080028e4 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80028e8:	4802      	ldr	r0, [pc, #8]	; (80028f4 <DMA2_Channel2_IRQHandler+0x10>)
 80028ea:	f001 fc96 	bl	800421a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000b54 	.word	0x20000b54

080028f8 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80028fc:	4802      	ldr	r0, [pc, #8]	; (8002908 <DMA2_Channel3_IRQHandler+0x10>)
 80028fe:	f001 fc8c 	bl	800421a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000240 	.word	0x20000240

0800290c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8002910:	4802      	ldr	r0, [pc, #8]	; (800291c <DMA2_Channel4_IRQHandler+0x10>)
 8002912:	f001 fc82 	bl	800421a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000034 	.word	0x20000034

08002920 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002924:	4802      	ldr	r0, [pc, #8]	; (8002930 <DMA2_Channel5_IRQHandler+0x10>)
 8002926:	f001 fc78 	bl	800421a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	200000c8 	.word	0x200000c8

08002934 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <SystemInit+0x20>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	4a05      	ldr	r2, [pc, #20]	; (8002954 <SystemInit+0x20>)
 8002940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800295c:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <MX_USART2_UART_Init+0x58>)
 800295e:	4a15      	ldr	r2, [pc, #84]	; (80029b4 <MX_USART2_UART_Init+0x5c>)
 8002960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002962:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <MX_USART2_UART_Init+0x58>)
 8002964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800296a:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <MX_USART2_UART_Init+0x58>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002970:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <MX_USART2_UART_Init+0x58>)
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002976:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <MX_USART2_UART_Init+0x58>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <MX_USART2_UART_Init+0x58>)
 800297e:	220c      	movs	r2, #12
 8002980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <MX_USART2_UART_Init+0x58>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <MX_USART2_UART_Init+0x58>)
 800298a:	2200      	movs	r2, #0
 800298c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <MX_USART2_UART_Init+0x58>)
 8002990:	2200      	movs	r2, #0
 8002992:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <MX_USART2_UART_Init+0x58>)
 8002996:	2200      	movs	r2, #0
 8002998:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800299a:	4805      	ldr	r0, [pc, #20]	; (80029b0 <MX_USART2_UART_Init+0x58>)
 800299c:	f003 fdf2 	bl	8006584 <HAL_UART_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80029a6:	f7ff fe5f 	bl	8002668 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000bdc 	.word	0x20000bdc
 80029b4:	40004400 	.word	0x40004400

080029b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a17      	ldr	r2, [pc, #92]	; (8002a34 <HAL_UART_MspInit+0x7c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d127      	bne.n	8002a2a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029da:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <HAL_UART_MspInit+0x80>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	4a16      	ldr	r2, [pc, #88]	; (8002a38 <HAL_UART_MspInit+0x80>)
 80029e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e4:	61d3      	str	r3, [r2, #28]
 80029e6:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <HAL_UART_MspInit+0x80>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f2:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <HAL_UART_MspInit+0x80>)
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	4a10      	ldr	r2, [pc, #64]	; (8002a38 <HAL_UART_MspInit+0x80>)
 80029f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029fc:	6153      	str	r3, [r2, #20]
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <HAL_UART_MspInit+0x80>)
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002a0a:	2360      	movs	r3, #96	; 0x60
 8002a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a16:	2303      	movs	r3, #3
 8002a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a1a:	2307      	movs	r3, #7
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	4619      	mov	r1, r3
 8002a24:	4805      	ldr	r0, [pc, #20]	; (8002a3c <HAL_UART_MspInit+0x84>)
 8002a26:	f001 fd05 	bl	8004434 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	3728      	adds	r7, #40	; 0x28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40004400 	.word	0x40004400
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	48000c00 	.word	0x48000c00

08002a40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a78 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a44:	480d      	ldr	r0, [pc, #52]	; (8002a7c <LoopForever+0x6>)
  ldr r1, =_edata
 8002a46:	490e      	ldr	r1, [pc, #56]	; (8002a80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a48:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <LoopForever+0xe>)
  movs r3, #0
 8002a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a4c:	e002      	b.n	8002a54 <LoopCopyDataInit>

08002a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a52:	3304      	adds	r3, #4

08002a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a58:	d3f9      	bcc.n	8002a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a5a:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a5c:	4c0b      	ldr	r4, [pc, #44]	; (8002a8c <LoopForever+0x16>)
  movs r3, #0
 8002a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a60:	e001      	b.n	8002a66 <LoopFillZerobss>

08002a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a64:	3204      	adds	r2, #4

08002a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a68:	d3fb      	bcc.n	8002a62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a6a:	f7ff ff63 	bl	8002934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a6e:	f004 f915 	bl	8006c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a72:	f7fe fb1f 	bl	80010b4 <main>

08002a76 <LoopForever>:

LoopForever:
    b LoopForever
 8002a76:	e7fe      	b.n	8002a76 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a80:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002a84:	08006d4c 	.word	0x08006d4c
  ldr r2, =_sbss
 8002a88:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002a8c:	20000c64 	.word	0x20000c64

08002a90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a90:	e7fe      	b.n	8002a90 <ADC1_2_IRQHandler>
	...

08002a94 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a98:	4b08      	ldr	r3, [pc, #32]	; (8002abc <HAL_Init+0x28>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a07      	ldr	r2, [pc, #28]	; (8002abc <HAL_Init+0x28>)
 8002a9e:	f043 0310 	orr.w	r3, r3, #16
 8002aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa4:	2003      	movs	r0, #3
 8002aa6:	f001 fad1 	bl	800404c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f000 f808 	bl	8002ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ab0:	f7ff feb6 	bl	8002820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40022000 	.word	0x40022000

08002ac0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ac8:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <HAL_InitTick+0x54>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_InitTick+0x58>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f001 fae9 	bl	80040b6 <HAL_SYSTICK_Config>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e00e      	b.n	8002b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b0f      	cmp	r3, #15
 8002af2:	d80a      	bhi.n	8002b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002af4:	2200      	movs	r2, #0
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	f04f 30ff 	mov.w	r0, #4294967295
 8002afc:	f001 fab1 	bl	8004062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b00:	4a06      	ldr	r2, [pc, #24]	; (8002b1c <HAL_InitTick+0x5c>)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e000      	b.n	8002b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20000004 	.word	0x20000004
 8002b18:	2000000c 	.word	0x2000000c
 8002b1c:	20000008 	.word	0x20000008

08002b20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <HAL_IncTick+0x20>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <HAL_IncTick+0x24>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4413      	add	r3, r2
 8002b30:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <HAL_IncTick+0x24>)
 8002b32:	6013      	str	r3, [r2, #0]
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	2000000c 	.word	0x2000000c
 8002b44:	20000c60 	.word	0x20000c60

08002b48 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return uwTick;  
 8002b4c:	4b03      	ldr	r3, [pc, #12]	; (8002b5c <HAL_GetTick+0x14>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	20000c60 	.word	0x20000c60

08002b60 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b68:	f7ff ffee 	bl	8002b48 <HAL_GetTick>
 8002b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d005      	beq.n	8002b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <HAL_Delay+0x44>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002b86:	bf00      	nop
 8002b88:	f7ff ffde 	bl	8002b48 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d8f7      	bhi.n	8002b88 <HAL_Delay+0x28>
  {
  }
}
 8002b98:	bf00      	nop
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	2000000c 	.word	0x2000000c

08002ba8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b09a      	sub	sp, #104	; 0x68
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e1e3      	b.n	8002fcc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d176      	bne.n	8002d04 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d152      	bne.n	8002cc4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7fd fee1 	bl	8000a00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d13b      	bne.n	8002cc4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f001 f8cd 	bl	8003dec <ADC_Disable>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d12f      	bne.n	8002cc4 <HAL_ADC_Init+0xe0>
 8002c64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d12b      	bne.n	8002cc4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c74:	f023 0302 	bic.w	r3, r3, #2
 8002c78:	f043 0202 	orr.w	r2, r3, #2
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c8e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c9e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ca0:	4b92      	ldr	r3, [pc, #584]	; (8002eec <HAL_ADC_Init+0x308>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a92      	ldr	r2, [pc, #584]	; (8002ef0 <HAL_ADC_Init+0x30c>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	0c9a      	lsrs	r2, r3, #18
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cb6:	e002      	b.n	8002cbe <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1f9      	bne.n	8002cb8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ce0:	d110      	bne.n	8002d04 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f023 0312 	bic.w	r3, r3, #18
 8002cea:	f043 0210 	orr.w	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	f043 0201 	orr.w	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f040 8150 	bne.w	8002fb2 <HAL_ADC_Init+0x3ce>
 8002d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f040 814b 	bne.w	8002fb2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f040 8143 	bne.w	8002fb2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d34:	f043 0202 	orr.w	r2, r3, #2
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d44:	d004      	beq.n	8002d50 <HAL_ADC_Init+0x16c>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6a      	ldr	r2, [pc, #424]	; (8002ef4 <HAL_ADC_Init+0x310>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d101      	bne.n	8002d54 <HAL_ADC_Init+0x170>
 8002d50:	4b69      	ldr	r3, [pc, #420]	; (8002ef8 <HAL_ADC_Init+0x314>)
 8002d52:	e000      	b.n	8002d56 <HAL_ADC_Init+0x172>
 8002d54:	4b69      	ldr	r3, [pc, #420]	; (8002efc <HAL_ADC_Init+0x318>)
 8002d56:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d60:	d102      	bne.n	8002d68 <HAL_ADC_Init+0x184>
 8002d62:	4b64      	ldr	r3, [pc, #400]	; (8002ef4 <HAL_ADC_Init+0x310>)
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	e01a      	b.n	8002d9e <HAL_ADC_Init+0x1ba>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a61      	ldr	r2, [pc, #388]	; (8002ef4 <HAL_ADC_Init+0x310>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d103      	bne.n	8002d7a <HAL_ADC_Init+0x196>
 8002d72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	e011      	b.n	8002d9e <HAL_ADC_Init+0x1ba>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a60      	ldr	r2, [pc, #384]	; (8002f00 <HAL_ADC_Init+0x31c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d102      	bne.n	8002d8a <HAL_ADC_Init+0x1a6>
 8002d84:	4b5f      	ldr	r3, [pc, #380]	; (8002f04 <HAL_ADC_Init+0x320>)
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	e009      	b.n	8002d9e <HAL_ADC_Init+0x1ba>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a5d      	ldr	r2, [pc, #372]	; (8002f04 <HAL_ADC_Init+0x320>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d102      	bne.n	8002d9a <HAL_ADC_Init+0x1b6>
 8002d94:	4b5a      	ldr	r3, [pc, #360]	; (8002f00 <HAL_ADC_Init+0x31c>)
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	e001      	b.n	8002d9e <HAL_ADC_Init+0x1ba>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d108      	bne.n	8002dbe <HAL_ADC_Init+0x1da>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_Init+0x1da>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <HAL_ADC_Init+0x1dc>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d11c      	bne.n	8002dfe <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002dc4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d010      	beq.n	8002dec <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d107      	bne.n	8002de6 <HAL_ADC_Init+0x202>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_ADC_Init+0x202>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_ADC_Init+0x204>
 8002de6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d108      	bne.n	8002dfe <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dfc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	7e5b      	ldrb	r3, [r3, #25]
 8002e02:	035b      	lsls	r3, r3, #13
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e08:	2a01      	cmp	r2, #1
 8002e0a:	d002      	beq.n	8002e12 <HAL_ADC_Init+0x22e>
 8002e0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e10:	e000      	b.n	8002e14 <HAL_ADC_Init+0x230>
 8002e12:	2200      	movs	r2, #0
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e24:	4313      	orrs	r3, r2
 8002e26:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d11b      	bne.n	8002e6a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	7e5b      	ldrb	r3, [r3, #25]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	045a      	lsls	r2, r3, #17
 8002e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e4c:	e00d      	b.n	8002e6a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002e56:	f043 0220 	orr.w	r2, r3, #32
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	f043 0201 	orr.w	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d054      	beq.n	8002f1c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a22      	ldr	r2, [pc, #136]	; (8002f00 <HAL_ADC_Init+0x31c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d004      	beq.n	8002e86 <HAL_ADC_Init+0x2a2>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a20      	ldr	r2, [pc, #128]	; (8002f04 <HAL_ADC_Init+0x320>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d140      	bne.n	8002f08 <HAL_ADC_Init+0x324>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002e8e:	d02a      	beq.n	8002ee6 <HAL_ADC_Init+0x302>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e98:	d022      	beq.n	8002ee0 <HAL_ADC_Init+0x2fc>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002ea2:	d01a      	beq.n	8002eda <HAL_ADC_Init+0x2f6>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002eac:	d012      	beq.n	8002ed4 <HAL_ADC_Init+0x2f0>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002eb6:	d00a      	beq.n	8002ece <HAL_ADC_Init+0x2ea>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_ADC_Init+0x2e4>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	e023      	b.n	8002f10 <HAL_ADC_Init+0x32c>
 8002ec8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002ecc:	e020      	b.n	8002f10 <HAL_ADC_Init+0x32c>
 8002ece:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002ed2:	e01d      	b.n	8002f10 <HAL_ADC_Init+0x32c>
 8002ed4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002ed8:	e01a      	b.n	8002f10 <HAL_ADC_Init+0x32c>
 8002eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ede:	e017      	b.n	8002f10 <HAL_ADC_Init+0x32c>
 8002ee0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002ee4:	e014      	b.n	8002f10 <HAL_ADC_Init+0x32c>
 8002ee6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002eea:	e011      	b.n	8002f10 <HAL_ADC_Init+0x32c>
 8002eec:	20000004 	.word	0x20000004
 8002ef0:	431bde83 	.word	0x431bde83
 8002ef4:	50000100 	.word	0x50000100
 8002ef8:	50000300 	.word	0x50000300
 8002efc:	50000700 	.word	0x50000700
 8002f00:	50000400 	.word	0x50000400
 8002f04:	50000500 	.word	0x50000500
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f14:	4313      	orrs	r3, r2
 8002f16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d114      	bne.n	8002f54 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f38:	f023 0302 	bic.w	r3, r3, #2
 8002f3c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7e1b      	ldrb	r3, [r3, #24]
 8002f42:	039a      	lsls	r2, r3, #14
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f50:	4313      	orrs	r3, r2
 8002f52:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <HAL_ADC_Init+0x3f0>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002f64:	430b      	orrs	r3, r1
 8002f66:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d10c      	bne.n	8002f8a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f023 010f 	bic.w	r1, r3, #15
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	1e5a      	subs	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
 8002f88:	e007      	b.n	8002f9a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 020f 	bic.w	r2, r2, #15
 8002f98:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f023 0303 	bic.w	r3, r3, #3
 8002fa8:	f043 0201 	orr.w	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40
 8002fb0:	e00a      	b.n	8002fc8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f023 0312 	bic.w	r3, r3, #18
 8002fba:	f043 0210 	orr.w	r2, r3, #16
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002fc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3768      	adds	r7, #104	; 0x68
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	fff0c007 	.word	0xfff0c007

08002fd8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f040 80f7 	bne.w	80031e6 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_ADC_Start_DMA+0x2e>
 8003002:	2302      	movs	r3, #2
 8003004:	e0f2      	b.n	80031ec <HAL_ADC_Start_DMA+0x214>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003016:	d004      	beq.n	8003022 <HAL_ADC_Start_DMA+0x4a>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a75      	ldr	r2, [pc, #468]	; (80031f4 <HAL_ADC_Start_DMA+0x21c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d109      	bne.n	8003036 <HAL_ADC_Start_DMA+0x5e>
 8003022:	4b75      	ldr	r3, [pc, #468]	; (80031f8 <HAL_ADC_Start_DMA+0x220>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 031f 	and.w	r3, r3, #31
 800302a:	2b00      	cmp	r3, #0
 800302c:	bf0c      	ite	eq
 800302e:	2301      	moveq	r3, #1
 8003030:	2300      	movne	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	e008      	b.n	8003048 <HAL_ADC_Start_DMA+0x70>
 8003036:	4b71      	ldr	r3, [pc, #452]	; (80031fc <HAL_ADC_Start_DMA+0x224>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	2b00      	cmp	r3, #0
 8003040:	bf0c      	ite	eq
 8003042:	2301      	moveq	r3, #1
 8003044:	2300      	movne	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 80c5 	beq.w	80031d8 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 fe6e 	bl	8003d30 <ADC_Enable>
 8003054:	4603      	mov	r3, r0
 8003056:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003058:	7dfb      	ldrb	r3, [r7, #23]
 800305a:	2b00      	cmp	r3, #0
 800305c:	f040 80b7 	bne.w	80031ce <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800307c:	d004      	beq.n	8003088 <HAL_ADC_Start_DMA+0xb0>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a5c      	ldr	r2, [pc, #368]	; (80031f4 <HAL_ADC_Start_DMA+0x21c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d106      	bne.n	8003096 <HAL_ADC_Start_DMA+0xbe>
 8003088:	4b5b      	ldr	r3, [pc, #364]	; (80031f8 <HAL_ADC_Start_DMA+0x220>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	2b00      	cmp	r3, #0
 8003092:	d010      	beq.n	80030b6 <HAL_ADC_Start_DMA+0xde>
 8003094:	e005      	b.n	80030a2 <HAL_ADC_Start_DMA+0xca>
 8003096:	4b59      	ldr	r3, [pc, #356]	; (80031fc <HAL_ADC_Start_DMA+0x224>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <HAL_ADC_Start_DMA+0xde>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030aa:	d004      	beq.n	80030b6 <HAL_ADC_Start_DMA+0xde>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a53      	ldr	r2, [pc, #332]	; (8003200 <HAL_ADC_Start_DMA+0x228>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d115      	bne.n	80030e2 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d036      	beq.n	800313e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80030e0:	e02d      	b.n	800313e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030f6:	d004      	beq.n	8003102 <HAL_ADC_Start_DMA+0x12a>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a3d      	ldr	r2, [pc, #244]	; (80031f4 <HAL_ADC_Start_DMA+0x21c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d10a      	bne.n	8003118 <HAL_ADC_Start_DMA+0x140>
 8003102:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e008      	b.n	800312a <HAL_ADC_Start_DMA+0x152>
 8003118:	4b39      	ldr	r3, [pc, #228]	; (8003200 <HAL_ADC_Start_DMA+0x228>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf14      	ite	ne
 8003124:	2301      	movne	r3, #1
 8003126:	2300      	moveq	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003136:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314a:	d106      	bne.n	800315a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003150:	f023 0206 	bic.w	r2, r3, #6
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	645a      	str	r2, [r3, #68]	; 0x44
 8003158:	e002      	b.n	8003160 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	4a25      	ldr	r2, [pc, #148]	; (8003204 <HAL_ADC_Start_DMA+0x22c>)
 800316e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	4a24      	ldr	r2, [pc, #144]	; (8003208 <HAL_ADC_Start_DMA+0x230>)
 8003176:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317c:	4a23      	ldr	r2, [pc, #140]	; (800320c <HAL_ADC_Start_DMA+0x234>)
 800317e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	221c      	movs	r2, #28
 8003186:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0210 	orr.w	r2, r2, #16
 8003196:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3340      	adds	r3, #64	; 0x40
 80031b2:	4619      	mov	r1, r3
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f000 ffd0 	bl	800415c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0204 	orr.w	r2, r2, #4
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	e00d      	b.n	80031ea <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031d6:	e008      	b.n	80031ea <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031e4:	e001      	b.n	80031ea <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031e6:	2302      	movs	r3, #2
 80031e8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80031ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	50000100 	.word	0x50000100
 80031f8:	50000300 	.word	0x50000300
 80031fc:	50000700 	.word	0x50000700
 8003200:	50000400 	.word	0x50000400
 8003204:	08003c65 	.word	0x08003c65
 8003208:	08003cdf 	.word	0x08003cdf
 800320c:	08003cfb 	.word	0x08003cfb

08003210 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003210:	b480      	push	{r7}
 8003212:	b09b      	sub	sp, #108	; 0x6c
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x22>
 800322e:	2302      	movs	r3, #2
 8003230:	e2cb      	b.n	80037ca <HAL_ADC_ConfigChannel+0x5ba>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	f040 82af 	bne.w	80037a8 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b04      	cmp	r3, #4
 8003250:	d81c      	bhi.n	800328c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	461a      	mov	r2, r3
 8003266:	231f      	movs	r3, #31
 8003268:	4093      	lsls	r3, r2
 800326a:	43db      	mvns	r3, r3
 800326c:	4019      	ands	r1, r3
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	4413      	add	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	fa00 f203 	lsl.w	r2, r0, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	631a      	str	r2, [r3, #48]	; 0x30
 800328a:	e063      	b.n	8003354 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b09      	cmp	r3, #9
 8003292:	d81e      	bhi.n	80032d2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	4413      	add	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	3b1e      	subs	r3, #30
 80032a8:	221f      	movs	r2, #31
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43db      	mvns	r3, r3
 80032b0:	4019      	ands	r1, r3
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	3b1e      	subs	r3, #30
 80032c4:	fa00 f203 	lsl.w	r2, r0, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	635a      	str	r2, [r3, #52]	; 0x34
 80032d0:	e040      	b.n	8003354 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b0e      	cmp	r3, #14
 80032d8:	d81e      	bhi.n	8003318 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	3b3c      	subs	r3, #60	; 0x3c
 80032ee:	221f      	movs	r2, #31
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	4019      	ands	r1, r3
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4413      	add	r3, r2
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	3b3c      	subs	r3, #60	; 0x3c
 800330a:	fa00 f203 	lsl.w	r2, r0, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	639a      	str	r2, [r3, #56]	; 0x38
 8003316:	e01d      	b.n	8003354 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	3b5a      	subs	r3, #90	; 0x5a
 800332c:	221f      	movs	r2, #31
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	4019      	ands	r1, r3
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	4413      	add	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	3b5a      	subs	r3, #90	; 0x5a
 8003348:	fa00 f203 	lsl.w	r2, r0, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b00      	cmp	r3, #0
 8003360:	f040 80e5 	bne.w	800352e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b09      	cmp	r3, #9
 800336a:	d91c      	bls.n	80033a6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6999      	ldr	r1, [r3, #24]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	3b1e      	subs	r3, #30
 800337e:	2207      	movs	r2, #7
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	4019      	ands	r1, r3
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	6898      	ldr	r0, [r3, #8]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4413      	add	r3, r2
 8003396:	3b1e      	subs	r3, #30
 8003398:	fa00 f203 	lsl.w	r2, r0, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	619a      	str	r2, [r3, #24]
 80033a4:	e019      	b.n	80033da <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6959      	ldr	r1, [r3, #20]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4613      	mov	r3, r2
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	4413      	add	r3, r2
 80033b6:	2207      	movs	r2, #7
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	4019      	ands	r1, r3
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	6898      	ldr	r0, [r3, #8]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4413      	add	r3, r2
 80033ce:	fa00 f203 	lsl.w	r2, r0, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	08db      	lsrs	r3, r3, #3
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d84f      	bhi.n	800349c <HAL_ADC_ConfigChannel+0x28c>
 80033fc:	a201      	add	r2, pc, #4	; (adr r2, 8003404 <HAL_ADC_ConfigChannel+0x1f4>)
 80033fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003402:	bf00      	nop
 8003404:	08003415 	.word	0x08003415
 8003408:	08003437 	.word	0x08003437
 800340c:	08003459 	.word	0x08003459
 8003410:	0800347b 	.word	0x0800347b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800341a:	4b9f      	ldr	r3, [pc, #636]	; (8003698 <HAL_ADC_ConfigChannel+0x488>)
 800341c:	4013      	ands	r3, r2
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	0691      	lsls	r1, r2, #26
 8003424:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003426:	430a      	orrs	r2, r1
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003432:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003434:	e07e      	b.n	8003534 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800343c:	4b96      	ldr	r3, [pc, #600]	; (8003698 <HAL_ADC_ConfigChannel+0x488>)
 800343e:	4013      	ands	r3, r2
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	0691      	lsls	r1, r2, #26
 8003446:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003448:	430a      	orrs	r2, r1
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003454:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003456:	e06d      	b.n	8003534 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800345e:	4b8e      	ldr	r3, [pc, #568]	; (8003698 <HAL_ADC_ConfigChannel+0x488>)
 8003460:	4013      	ands	r3, r2
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	0691      	lsls	r1, r2, #26
 8003468:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800346a:	430a      	orrs	r2, r1
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003476:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003478:	e05c      	b.n	8003534 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003480:	4b85      	ldr	r3, [pc, #532]	; (8003698 <HAL_ADC_ConfigChannel+0x488>)
 8003482:	4013      	ands	r3, r2
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	0691      	lsls	r1, r2, #26
 800348a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800348c:	430a      	orrs	r2, r1
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003498:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800349a:	e04b      	b.n	8003534 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	069b      	lsls	r3, r3, #26
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d107      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034be:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	069b      	lsls	r3, r3, #26
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d107      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034e2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	069b      	lsls	r3, r3, #26
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d107      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003506:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800350e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	069b      	lsls	r3, r3, #26
 8003518:	429a      	cmp	r2, r3
 800351a:	d10a      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800352a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800352c:	e001      	b.n	8003532 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800352e:	bf00      	nop
 8003530:	e000      	b.n	8003534 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003532:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b01      	cmp	r3, #1
 8003540:	d108      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x344>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x344>
 8003550:	2301      	movs	r3, #1
 8003552:	e000      	b.n	8003556 <HAL_ADC_ConfigChannel+0x346>
 8003554:	2300      	movs	r3, #0
 8003556:	2b00      	cmp	r3, #0
 8003558:	f040 8131 	bne.w	80037be <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d00f      	beq.n	8003584 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2201      	movs	r2, #1
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43da      	mvns	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	400a      	ands	r2, r1
 800357e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003582:	e049      	b.n	8003618 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2201      	movs	r2, #1
 8003592:	409a      	lsls	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b09      	cmp	r3, #9
 80035a4:	d91c      	bls.n	80035e0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6999      	ldr	r1, [r3, #24]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	4613      	mov	r3, r2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4413      	add	r3, r2
 80035b6:	3b1b      	subs	r3, #27
 80035b8:	2207      	movs	r2, #7
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	4019      	ands	r1, r3
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6898      	ldr	r0, [r3, #8]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	4613      	mov	r3, r2
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	4413      	add	r3, r2
 80035d0:	3b1b      	subs	r3, #27
 80035d2:	fa00 f203 	lsl.w	r2, r0, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	619a      	str	r2, [r3, #24]
 80035de:	e01b      	b.n	8003618 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6959      	ldr	r1, [r3, #20]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	4613      	mov	r3, r2
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	4413      	add	r3, r2
 80035f2:	2207      	movs	r2, #7
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	4019      	ands	r1, r3
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	6898      	ldr	r0, [r3, #8]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	4613      	mov	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	fa00 f203 	lsl.w	r2, r0, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003620:	d004      	beq.n	800362c <HAL_ADC_ConfigChannel+0x41c>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1d      	ldr	r2, [pc, #116]	; (800369c <HAL_ADC_ConfigChannel+0x48c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d101      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x420>
 800362c:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <HAL_ADC_ConfigChannel+0x490>)
 800362e:	e000      	b.n	8003632 <HAL_ADC_ConfigChannel+0x422>
 8003630:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <HAL_ADC_ConfigChannel+0x494>)
 8003632:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b10      	cmp	r3, #16
 800363a:	d105      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800363c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003644:	2b00      	cmp	r3, #0
 8003646:	d015      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800364c:	2b11      	cmp	r3, #17
 800364e:	d105      	bne.n	800365c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00b      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003660:	2b12      	cmp	r3, #18
 8003662:	f040 80ac 	bne.w	80037be <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800366e:	2b00      	cmp	r3, #0
 8003670:	f040 80a5 	bne.w	80037be <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800367c:	d102      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x474>
 800367e:	4b07      	ldr	r3, [pc, #28]	; (800369c <HAL_ADC_ConfigChannel+0x48c>)
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	e023      	b.n	80036cc <HAL_ADC_ConfigChannel+0x4bc>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a04      	ldr	r2, [pc, #16]	; (800369c <HAL_ADC_ConfigChannel+0x48c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d10c      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x498>
 800368e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	e01a      	b.n	80036cc <HAL_ADC_ConfigChannel+0x4bc>
 8003696:	bf00      	nop
 8003698:	83fff000 	.word	0x83fff000
 800369c:	50000100 	.word	0x50000100
 80036a0:	50000300 	.word	0x50000300
 80036a4:	50000700 	.word	0x50000700
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a4a      	ldr	r2, [pc, #296]	; (80037d8 <HAL_ADC_ConfigChannel+0x5c8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d102      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x4a8>
 80036b2:	4b4a      	ldr	r3, [pc, #296]	; (80037dc <HAL_ADC_ConfigChannel+0x5cc>)
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	e009      	b.n	80036cc <HAL_ADC_ConfigChannel+0x4bc>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a47      	ldr	r2, [pc, #284]	; (80037dc <HAL_ADC_ConfigChannel+0x5cc>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d102      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x4b8>
 80036c2:	4b45      	ldr	r3, [pc, #276]	; (80037d8 <HAL_ADC_ConfigChannel+0x5c8>)
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	e001      	b.n	80036cc <HAL_ADC_ConfigChannel+0x4bc>
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d108      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x4dc>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x4dc>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <HAL_ADC_ConfigChannel+0x4de>
 80036ec:	2300      	movs	r3, #0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d150      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80036f2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d010      	beq.n	800371a <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	2b01      	cmp	r3, #1
 8003702:	d107      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x504>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x504>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_ADC_ConfigChannel+0x506>
 8003714:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003716:	2b00      	cmp	r3, #0
 8003718:	d13c      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b10      	cmp	r3, #16
 8003720:	d11d      	bne.n	800375e <HAL_ADC_ConfigChannel+0x54e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800372a:	d118      	bne.n	800375e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800372c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003736:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003738:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <HAL_ADC_ConfigChannel+0x5d0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a29      	ldr	r2, [pc, #164]	; (80037e4 <HAL_ADC_ConfigChannel+0x5d4>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	0c9a      	lsrs	r2, r3, #18
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800374e:	e002      	b.n	8003756 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	3b01      	subs	r3, #1
 8003754:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f9      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800375c:	e02e      	b.n	80037bc <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b11      	cmp	r3, #17
 8003764:	d10b      	bne.n	800377e <HAL_ADC_ConfigChannel+0x56e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800376e:	d106      	bne.n	800377e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800377a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800377c:	e01e      	b.n	80037bc <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b12      	cmp	r3, #18
 8003784:	d11a      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800378e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003790:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003792:	e013      	b.n	80037bc <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	f043 0220 	orr.w	r2, r3, #32
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80037a6:	e00a      	b.n	80037be <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80037ba:	e000      	b.n	80037be <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80037bc:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80037c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	376c      	adds	r7, #108	; 0x6c
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	50000400 	.word	0x50000400
 80037dc:	50000500 	.word	0x50000500
 80037e0:	20000004 	.word	0x20000004
 80037e4:	431bde83 	.word	0x431bde83

080037e8 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc ADC handle
  * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b089      	sub	sp, #36	; 0x24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	77fb      	strb	r3, [r7, #31]

  /* Verify if threshold is within the selected ADC resolution */
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));

  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037fe:	d003      	beq.n	8003808 <HAL_ADC_AnalogWDGConfig+0x20>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8003804:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_ADC_AnalogWDGConfig+0x2e>
 8003812:	2302      	movs	r3, #2
 8003814:	e12c      	b.n	8003a70 <HAL_ADC_AnalogWDGConfig+0x288>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular and injected groups:                      */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 030c 	and.w	r3, r3, #12
 8003828:	2b00      	cmp	r3, #0
 800382a:	f040 8114 	bne.w	8003a56 <HAL_ADC_AnalogWDGConfig+0x26e>
  {
  
    /* Analog watchdogs configuration */
    if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d14f      	bne.n	80038d6 <HAL_ADC_AnalogWDGConfig+0xee>
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: regular and/or injected      */
      /*    groups, one or overall group of channels.                         */
      /*  - Set the Analog watchdog channel (is not used if watchdog          */
      /*    mode "all channels": ADC_CFGR_AWD1SGL=0U).                         */
      MODIFY_REG(hadc->Instance->CFGR                             ,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f023 43fb 	bic.w	r3, r3, #2105540608	; 0x7d800000
 8003840:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	6851      	ldr	r1, [r2, #4]
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	6892      	ldr	r2, [r2, #8]
 800384c:	0692      	lsls	r2, r2, #26
 800384e:	4311      	orrs	r1, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	430b      	orrs	r3, r1
 8003856:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR_AWD1CH_SHIFT(AnalogWDGConfig->Channel)   );

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11U, the LSB (right bits)   */
      /* are set to 0                                                         */ 
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	08db      	lsrs	r3, r3, #3
 8003864:	f003 0303 	and.w	r3, r3, #3
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	613b      	str	r3, [r7, #16]
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	08db      	lsrs	r3, r3, #3
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	60fb      	str	r3, [r7, #12]
      
      /* Set the high and low thresholds */
      MODIFY_REG(hadc->Instance->TR1                                ,
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	f003 21f0 	and.w	r1, r3, #4026593280	; 0xf000f000
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	041a      	lsls	r2, r3, #16
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	621a      	str	r2, [r3, #32]
                 tmpAWDLowThresholdShifted                           );
      
      /* Clear the ADC Analog watchdog flag (in case of left enabled by       */
      /* previous ADC operations) to be ready to use for HAL_ADC_IRQHandler() */
      /* or HAL_ADC_PollForEvent().                                           */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_IT_AWD1);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2280      	movs	r2, #128	; 0x80
 80038a8:	601a      	str	r2, [r3, #0]
      
      /* Configure ADC Analog watchdog interrupt */
      if(AnalogWDGConfig->ITMode == ENABLE)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	7b1b      	ldrb	r3, [r3, #12]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d108      	bne.n	80038c4 <HAL_ADC_AnalogWDGConfig+0xdc>
      {
        /* Enable the ADC Analog watchdog interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD1);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	e0d0      	b.n	8003a66 <HAL_ADC_AnalogWDGConfig+0x27e>
      }
      else
      {
        /* Disable the ADC Analog watchdog interrupt */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038d2:	605a      	str	r2, [r3, #4]
 80038d4:	e0c7      	b.n	8003a66 <HAL_ADC_AnalogWDGConfig+0x27e>
    /* Case of ADC_ANALOGWATCHDOG_2 and ADC_ANALOGWATCHDOG_3 */
    else
    {
    /* Shift the threshold in function of the selected ADC resolution */
    /* have to be left-aligned on bit 7U, the LSB (right bits) are set to 0    */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 0318 	and.w	r3, r3, #24
 80038e0:	2b18      	cmp	r3, #24
 80038e2:	d00d      	beq.n	8003900 <HAL_ADC_AnalogWDGConfig+0x118>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	08db      	lsrs	r3, r3, #3
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	f1c3 0302 	rsb	r3, r3, #2
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	fa22 f303 	lsr.w	r3, r2, r3
 80038fe:	e002      	b.n	8003906 <HAL_ADC_AnalogWDGConfig+0x11e>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	613b      	str	r3, [r7, #16]
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f003 0318 	and.w	r3, r3, #24
 8003912:	2b18      	cmp	r3, #24
 8003914:	d00d      	beq.n	8003932 <HAL_ADC_AnalogWDGConfig+0x14a>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	08db      	lsrs	r3, r3, #3
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	f1c3 0302 	rsb	r3, r3, #2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
 8003930:	e002      	b.n	8003938 <HAL_ADC_AnalogWDGConfig+0x150>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	60fb      	str	r3, [r7, #12]

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b02      	cmp	r3, #2
 8003940:	d137      	bne.n	80039b2 <HAL_ADC_AnalogWDGConfig+0x1ca>
      {
        /* Set the Analog watchdog channel or group of channels. This also    */
        /* enables the watchdog.                                              */
        /* Note: Conditional register reset, because several channels can be  */
        /*       set by successive calls of this function.                    */
        if (AnalogWDGConfig->WatchdogMode != ADC_ANALOGWATCHDOG_NONE) 
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d01a      	beq.n	8003980 <HAL_ADC_AnalogWDGConfig+0x198>
        {
          /* Set the high and low thresholds */
          MODIFY_REG(hadc->Instance->TR2                                ,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f003 21ff 	and.w	r1, r3, #4278255360	; 0xff00ff00
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	041a      	lsls	r2, r3, #16
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	625a      	str	r2, [r3, #36]	; 0x24
                     ADC_TR2_HT2 |
                     ADC_TR2_LT2                                        ,
                     ADC_TRX_HIGHTHRESHOLD(tmpAWDHighThresholdShifted) |
                     tmpAWDLowThresholdShifted                           );
          
          SET_BIT(hadc->Instance->AWD2CR, ADC_CFGR_AWD23CR(AnalogWDGConfig->Channel));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2201      	movs	r2, #1
 8003972:	409a      	lsls	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800397e:	e011      	b.n	80039a4 <HAL_ADC_AnalogWDGConfig+0x1bc>
        }
        else
        {
          CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 800398e:	625a      	str	r2, [r3, #36]	; 0x24
          CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <HAL_ADC_AnalogWDGConfig+0x294>)
 800399e:	400b      	ands	r3, r1
 80039a0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        }
                
        /* Set temporary variable to flag and IT of AWD2 or AWD3 for further  */
        /* settings.                                                          */
        tmpADCFlagAWD2orAWD3 = ADC_FLAG_AWD2;
 80039a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039a8:	61bb      	str	r3, [r7, #24]
        tmpADCITAWD2orAWD3 = ADC_IT_AWD2;
 80039aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	e036      	b.n	8003a20 <HAL_ADC_AnalogWDGConfig+0x238>
      {
        /* Set the Analog watchdog channel or group of channels. This also    */
        /* enables the watchdog.                                              */
        /* Note: Conditionnal register reset, because several channels can be */
        /*       set by successive calls of this function.                    */
        if (AnalogWDGConfig->WatchdogMode != ADC_ANALOGWATCHDOG_NONE) 
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d01a      	beq.n	80039f0 <HAL_ADC_AnalogWDGConfig+0x208>
        {
          /* Set the high and low thresholds */
          MODIFY_REG(hadc->Instance->TR3                                ,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	f003 21ff 	and.w	r1, r3, #4278255360	; 0xff00ff00
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	041a      	lsls	r2, r3, #16
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28
                     ADC_TR3_HT3 |
                     ADC_TR3_LT3                                        ,
                     ADC_TRX_HIGHTHRESHOLD(tmpAWDHighThresholdShifted) |
                     tmpAWDLowThresholdShifted                           );
          
          SET_BIT(hadc->Instance->AWD3CR, ADC_CFGR_AWD23CR(AnalogWDGConfig->Channel));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2201      	movs	r2, #1
 80039e2:	409a      	lsls	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80039ee:	e011      	b.n	8003a14 <HAL_ADC_AnalogWDGConfig+0x22c>
        }
        else
        {
          CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28
          CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <HAL_ADC_AnalogWDGConfig+0x294>)
 8003a0e:	400b      	ands	r3, r1
 8003a10:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
        }
        
        /* Set temporary variable to flag and IT of AWD2 or AWD3 for further  */
        /* settings.                                                          */
        tmpADCFlagAWD2orAWD3 = ADC_FLAG_AWD3;
 8003a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a18:	61bb      	str	r3, [r7, #24]
        tmpADCITAWD2orAWD3 = ADC_IT_AWD3;
 8003a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a1e:	617b      	str	r3, [r7, #20]
      }

      /* Clear the ADC Analog watchdog flag (in case of left enabled by       */
      /* previous ADC operations) to be ready to use for HAL_ADC_IRQHandler() */
      /* or HAL_ADC_PollForEvent().                                           */
      __HAL_ADC_CLEAR_FLAG(hadc, tmpADCFlagAWD2orAWD3);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	601a      	str	r2, [r3, #0]

      /* Configure ADC Analog watchdog interrupt */
      if(AnalogWDGConfig->ITMode == ENABLE)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	7b1b      	ldrb	r3, [r3, #12]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d108      	bne.n	8003a42 <HAL_ADC_AnalogWDGConfig+0x25a>
      {
        __HAL_ADC_ENABLE_IT(hadc, tmpADCITAWD2orAWD3);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6859      	ldr	r1, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]
 8003a40:	e011      	b.n	8003a66 <HAL_ADC_AnalogWDGConfig+0x27e>
      }
      else
      {
        __HAL_ADC_DISABLE_IT(hadc, tmpADCITAWD2orAWD3);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	43da      	mvns	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	400a      	ands	r2, r1
 8003a52:	605a      	str	r2, [r3, #4]
 8003a54:	e007      	b.n	8003a66 <HAL_ADC_AnalogWDGConfig+0x27e>
  /* If a conversion is on going on regular or injected groups, no update     */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f043 0220 	orr.w	r2, r3, #32
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	77fb      	strb	r3, [r7, #31]
  }
  
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003a6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3724      	adds	r7, #36	; 0x24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	fff80001 	.word	0xfff80001

08003a80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b099      	sub	sp, #100	; 0x64
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a98:	d102      	bne.n	8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003a9a:	4b6d      	ldr	r3, [pc, #436]	; (8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	e01a      	b.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a6a      	ldr	r2, [pc, #424]	; (8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d103      	bne.n	8003ab2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003aaa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	e011      	b.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a67      	ldr	r2, [pc, #412]	; (8003c54 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d102      	bne.n	8003ac2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003abc:	4b66      	ldr	r3, [pc, #408]	; (8003c58 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	e009      	b.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a64      	ldr	r2, [pc, #400]	; (8003c58 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d102      	bne.n	8003ad2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003acc:	4b61      	ldr	r3, [pc, #388]	; (8003c54 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	e001      	b.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0b0      	b.n	8003c42 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e0a9      	b.n	8003c42 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f040 808d 	bne.w	8003c20 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f040 8086 	bne.w	8003c20 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b1c:	d004      	beq.n	8003b28 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a4b      	ldr	r2, [pc, #300]	; (8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d101      	bne.n	8003b2c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003b28:	4b4c      	ldr	r3, [pc, #304]	; (8003c5c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003b2a:	e000      	b.n	8003b2e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003b2c:	4b4c      	ldr	r3, [pc, #304]	; (8003c60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003b2e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d040      	beq.n	8003bba <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003b38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	6859      	ldr	r1, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b4a:	035b      	lsls	r3, r3, #13
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b52:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d108      	bne.n	8003b74 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003b74:	2300      	movs	r3, #0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d15c      	bne.n	8003c34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d107      	bne.n	8003b96 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003b96:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d14b      	bne.n	8003c34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003ba4:	f023 030f 	bic.w	r3, r3, #15
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	6811      	ldr	r1, [r2, #0]
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	6892      	ldr	r2, [r2, #8]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bb6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bb8:	e03c      	b.n	8003c34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003bba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bc4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d108      	bne.n	8003be6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003be6:	2300      	movs	r3, #0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d123      	bne.n	8003c34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d107      	bne.n	8003c08 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003c08:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d112      	bne.n	8003c34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003c0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c16:	f023 030f 	bic.w	r3, r3, #15
 8003c1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c1c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c1e:	e009      	b.n	8003c34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	f043 0220 	orr.w	r2, r3, #32
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003c32:	e000      	b.n	8003c36 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c34:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003c3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003c42:	4618      	mov	r0, r3
 8003c44:	3764      	adds	r7, #100	; 0x64
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	50000100 	.word	0x50000100
 8003c54:	50000400 	.word	0x50000400
 8003c58:	50000500 	.word	0x50000500
 8003c5c:	50000300 	.word	0x50000300
 8003c60:	50000700 	.word	0x50000700

08003c64 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d126      	bne.n	8003ccc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d115      	bne.n	8003cc4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d111      	bne.n	8003cc4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d105      	bne.n	8003cc4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f043 0201 	orr.w	r2, r3, #1
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f7fe ff6f 	bl	8002ba8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003cca:	e004      	b.n	8003cd6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4798      	blx	r3
}
 8003cd6:	bf00      	nop
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f7fe ff65 	bl	8002bbc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d18:	f043 0204 	orr.w	r2, r3, #4
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f7fe ff55 	bl	8002bd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d108      	bne.n	8003d5c <ADC_Enable+0x2c>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <ADC_Enable+0x2c>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <ADC_Enable+0x2e>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d13c      	bne.n	8003ddc <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	4b1f      	ldr	r3, [pc, #124]	; (8003de8 <ADC_Enable+0xb8>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00d      	beq.n	8003d8c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	f043 0210 	orr.w	r2, r3, #16
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d80:	f043 0201 	orr.w	r2, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e028      	b.n	8003dde <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003d9c:	f7fe fed4 	bl	8002b48 <HAL_GetTick>
 8003da0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003da2:	e014      	b.n	8003dce <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003da4:	f7fe fed0 	bl	8002b48 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d90d      	bls.n	8003dce <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f043 0210 	orr.w	r2, r3, #16
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	f043 0201 	orr.w	r2, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e007      	b.n	8003dde <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d1e3      	bne.n	8003da4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	8000003f 	.word	0x8000003f

08003dec <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d108      	bne.n	8003e18 <ADC_Disable+0x2c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <ADC_Disable+0x2c>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <ADC_Disable+0x2e>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d040      	beq.n	8003ea0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 030d 	and.w	r3, r3, #13
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d10f      	bne.n	8003e4c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0202 	orr.w	r2, r2, #2
 8003e3a:	609a      	str	r2, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2203      	movs	r2, #3
 8003e42:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003e44:	f7fe fe80 	bl	8002b48 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003e4a:	e022      	b.n	8003e92 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	f043 0210 	orr.w	r2, r3, #16
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5c:	f043 0201 	orr.w	r2, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e01c      	b.n	8003ea2 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e68:	f7fe fe6e 	bl	8002b48 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d90d      	bls.n	8003e92 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f043 0210 	orr.w	r2, r3, #16
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	f043 0201 	orr.w	r2, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e007      	b.n	8003ea2 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d0e3      	beq.n	8003e68 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ec8:	4013      	ands	r3, r2
 8003eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ede:	4a04      	ldr	r2, [pc, #16]	; (8003ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	60d3      	str	r3, [r2, #12]
}
 8003ee4:	bf00      	nop
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ef8:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <__NVIC_GetPriorityGrouping+0x18>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	0a1b      	lsrs	r3, r3, #8
 8003efe:	f003 0307 	and.w	r3, r3, #7
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	e000ed00 	.word	0xe000ed00

08003f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	db0b      	blt.n	8003f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f22:	79fb      	ldrb	r3, [r7, #7]
 8003f24:	f003 021f 	and.w	r2, r3, #31
 8003f28:	4907      	ldr	r1, [pc, #28]	; (8003f48 <__NVIC_EnableIRQ+0x38>)
 8003f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	2001      	movs	r0, #1
 8003f32:	fa00 f202 	lsl.w	r2, r0, r2
 8003f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	e000e100 	.word	0xe000e100

08003f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	6039      	str	r1, [r7, #0]
 8003f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	db0a      	blt.n	8003f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	490c      	ldr	r1, [pc, #48]	; (8003f98 <__NVIC_SetPriority+0x4c>)
 8003f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6a:	0112      	lsls	r2, r2, #4
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	440b      	add	r3, r1
 8003f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f74:	e00a      	b.n	8003f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	4908      	ldr	r1, [pc, #32]	; (8003f9c <__NVIC_SetPriority+0x50>)
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	3b04      	subs	r3, #4
 8003f84:	0112      	lsls	r2, r2, #4
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	440b      	add	r3, r1
 8003f8a:	761a      	strb	r2, [r3, #24]
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	e000e100 	.word	0xe000e100
 8003f9c:	e000ed00 	.word	0xe000ed00

08003fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b089      	sub	sp, #36	; 0x24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f1c3 0307 	rsb	r3, r3, #7
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	bf28      	it	cs
 8003fbe:	2304      	movcs	r3, #4
 8003fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	2b06      	cmp	r3, #6
 8003fc8:	d902      	bls.n	8003fd0 <NVIC_EncodePriority+0x30>
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	3b03      	subs	r3, #3
 8003fce:	e000      	b.n	8003fd2 <NVIC_EncodePriority+0x32>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	43da      	mvns	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	401a      	ands	r2, r3
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff2:	43d9      	mvns	r1, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ff8:	4313      	orrs	r3, r2
         );
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3724      	adds	r7, #36	; 0x24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3b01      	subs	r3, #1
 8004014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004018:	d301      	bcc.n	800401e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800401a:	2301      	movs	r3, #1
 800401c:	e00f      	b.n	800403e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800401e:	4a0a      	ldr	r2, [pc, #40]	; (8004048 <SysTick_Config+0x40>)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3b01      	subs	r3, #1
 8004024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004026:	210f      	movs	r1, #15
 8004028:	f04f 30ff 	mov.w	r0, #4294967295
 800402c:	f7ff ff8e 	bl	8003f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <SysTick_Config+0x40>)
 8004032:	2200      	movs	r2, #0
 8004034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004036:	4b04      	ldr	r3, [pc, #16]	; (8004048 <SysTick_Config+0x40>)
 8004038:	2207      	movs	r2, #7
 800403a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	e000e010 	.word	0xe000e010

0800404c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff ff29 	bl	8003eac <__NVIC_SetPriorityGrouping>
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b086      	sub	sp, #24
 8004066:	af00      	add	r7, sp, #0
 8004068:	4603      	mov	r3, r0
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004074:	f7ff ff3e 	bl	8003ef4 <__NVIC_GetPriorityGrouping>
 8004078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	6978      	ldr	r0, [r7, #20]
 8004080:	f7ff ff8e 	bl	8003fa0 <NVIC_EncodePriority>
 8004084:	4602      	mov	r2, r0
 8004086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff ff5d 	bl	8003f4c <__NVIC_SetPriority>
}
 8004092:	bf00      	nop
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	4603      	mov	r3, r0
 80040a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff ff31 	bl	8003f10 <__NVIC_EnableIRQ>
}
 80040ae:	bf00      	nop
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff ffa2 	bl	8004008 <SysTick_Config>
 80040c4:	4603      	mov	r3, r0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e037      	b.n	8004154 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80040fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80040fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f940 	bl	80043bc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}  
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_DMA_Start_IT+0x20>
 8004178:	2302      	movs	r3, #2
 800417a:	e04a      	b.n	8004212 <HAL_DMA_Start_IT+0xb6>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800418a:	2b01      	cmp	r3, #1
 800418c:	d13a      	bne.n	8004204 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2202      	movs	r2, #2
 8004192:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f8d4 	bl	8004360 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 020e 	orr.w	r2, r2, #14
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	e00f      	b.n	80041f2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 020a 	orr.w	r2, r2, #10
 80041e0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0204 	bic.w	r2, r2, #4
 80041f0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0201 	orr.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	e005      	b.n	8004210 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800420c:	2302      	movs	r3, #2
 800420e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004210:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	2204      	movs	r2, #4
 8004238:	409a      	lsls	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4013      	ands	r3, r2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d024      	beq.n	800428c <HAL_DMA_IRQHandler+0x72>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01f      	beq.n	800428c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b00      	cmp	r3, #0
 8004258:	d107      	bne.n	800426a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0204 	bic.w	r2, r2, #4
 8004268:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004272:	2104      	movs	r1, #4
 8004274:	fa01 f202 	lsl.w	r2, r1, r2
 8004278:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	2b00      	cmp	r3, #0
 8004280:	d06a      	beq.n	8004358 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800428a:	e065      	b.n	8004358 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	2202      	movs	r2, #2
 8004292:	409a      	lsls	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4013      	ands	r3, r2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d02c      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xdc>
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d027      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10b      	bne.n	80042cc <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 020a 	bic.w	r2, r2, #10
 80042c2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d4:	2102      	movs	r1, #2
 80042d6:	fa01 f202 	lsl.w	r2, r1, r2
 80042da:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d035      	beq.n	8004358 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80042f4:	e030      	b.n	8004358 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	2208      	movs	r2, #8
 80042fc:	409a      	lsls	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4013      	ands	r3, r2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d028      	beq.n	8004358 <HAL_DMA_IRQHandler+0x13e>
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d023      	beq.n	8004358 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 020e 	bic.w	r2, r2, #14
 800431e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004328:	2101      	movs	r1, #1
 800432a:	fa01 f202 	lsl.w	r2, r1, r2
 800432e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	2b00      	cmp	r3, #0
 800434c:	d004      	beq.n	8004358 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	4798      	blx	r3
    }
  }
}  
 8004356:	e7ff      	b.n	8004358 <HAL_DMA_IRQHandler+0x13e>
 8004358:	bf00      	nop
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004376:	2101      	movs	r1, #1
 8004378:	fa01 f202 	lsl.w	r2, r1, r2
 800437c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b10      	cmp	r3, #16
 800438c:	d108      	bne.n	80043a0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800439e:	e007      	b.n	80043b0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	60da      	str	r2, [r3, #12]
}
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	4b14      	ldr	r3, [pc, #80]	; (800441c <DMA_CalcBaseAndBitshift+0x60>)
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d80f      	bhi.n	80043f0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	4b12      	ldr	r3, [pc, #72]	; (8004420 <DMA_CalcBaseAndBitshift+0x64>)
 80043d8:	4413      	add	r3, r2
 80043da:	4a12      	ldr	r2, [pc, #72]	; (8004424 <DMA_CalcBaseAndBitshift+0x68>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	009a      	lsls	r2, r3, #2
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a0f      	ldr	r2, [pc, #60]	; (8004428 <DMA_CalcBaseAndBitshift+0x6c>)
 80043ec:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80043ee:	e00e      	b.n	800440e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	4b0d      	ldr	r3, [pc, #52]	; (800442c <DMA_CalcBaseAndBitshift+0x70>)
 80043f8:	4413      	add	r3, r2
 80043fa:	4a0a      	ldr	r2, [pc, #40]	; (8004424 <DMA_CalcBaseAndBitshift+0x68>)
 80043fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004400:	091b      	lsrs	r3, r3, #4
 8004402:	009a      	lsls	r2, r3, #2
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a09      	ldr	r2, [pc, #36]	; (8004430 <DMA_CalcBaseAndBitshift+0x74>)
 800440c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40020407 	.word	0x40020407
 8004420:	bffdfff8 	.word	0xbffdfff8
 8004424:	cccccccd 	.word	0xcccccccd
 8004428:	40020000 	.word	0x40020000
 800442c:	bffdfbf8 	.word	0xbffdfbf8
 8004430:	40020400 	.word	0x40020400

08004434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004442:	e160      	b.n	8004706 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	2101      	movs	r1, #1
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	fa01 f303 	lsl.w	r3, r1, r3
 8004450:	4013      	ands	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 8152 	beq.w	8004700 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d00b      	beq.n	800447c <HAL_GPIO_Init+0x48>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d007      	beq.n	800447c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004470:	2b11      	cmp	r3, #17
 8004472:	d003      	beq.n	800447c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b12      	cmp	r3, #18
 800447a:	d130      	bne.n	80044de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	2203      	movs	r2, #3
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	43db      	mvns	r3, r3
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4013      	ands	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044b2:	2201      	movs	r2, #1
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	43db      	mvns	r3, r3
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4013      	ands	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	091b      	lsrs	r3, r3, #4
 80044c8:	f003 0201 	and.w	r2, r3, #1
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	2203      	movs	r2, #3
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	43db      	mvns	r3, r3
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4013      	ands	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d003      	beq.n	800451e <HAL_GPIO_Init+0xea>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b12      	cmp	r3, #18
 800451c:	d123      	bne.n	8004566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	08da      	lsrs	r2, r3, #3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3208      	adds	r2, #8
 8004526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800452a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	220f      	movs	r2, #15
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	43db      	mvns	r3, r3
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4013      	ands	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	08da      	lsrs	r2, r3, #3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3208      	adds	r2, #8
 8004560:	6939      	ldr	r1, [r7, #16]
 8004562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	2203      	movs	r2, #3
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	43db      	mvns	r3, r3
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4013      	ands	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f003 0203 	and.w	r2, r3, #3
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 80ac 	beq.w	8004700 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045a8:	4b5e      	ldr	r3, [pc, #376]	; (8004724 <HAL_GPIO_Init+0x2f0>)
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	4a5d      	ldr	r2, [pc, #372]	; (8004724 <HAL_GPIO_Init+0x2f0>)
 80045ae:	f043 0301 	orr.w	r3, r3, #1
 80045b2:	6193      	str	r3, [r2, #24]
 80045b4:	4b5b      	ldr	r3, [pc, #364]	; (8004724 <HAL_GPIO_Init+0x2f0>)
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80045c0:	4a59      	ldr	r2, [pc, #356]	; (8004728 <HAL_GPIO_Init+0x2f4>)
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	089b      	lsrs	r3, r3, #2
 80045c6:	3302      	adds	r3, #2
 80045c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f003 0303 	and.w	r3, r3, #3
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	220f      	movs	r2, #15
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	43db      	mvns	r3, r3
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4013      	ands	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045ea:	d025      	beq.n	8004638 <HAL_GPIO_Init+0x204>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a4f      	ldr	r2, [pc, #316]	; (800472c <HAL_GPIO_Init+0x2f8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d01f      	beq.n	8004634 <HAL_GPIO_Init+0x200>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a4e      	ldr	r2, [pc, #312]	; (8004730 <HAL_GPIO_Init+0x2fc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d019      	beq.n	8004630 <HAL_GPIO_Init+0x1fc>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a4d      	ldr	r2, [pc, #308]	; (8004734 <HAL_GPIO_Init+0x300>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d013      	beq.n	800462c <HAL_GPIO_Init+0x1f8>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a4c      	ldr	r2, [pc, #304]	; (8004738 <HAL_GPIO_Init+0x304>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00d      	beq.n	8004628 <HAL_GPIO_Init+0x1f4>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a4b      	ldr	r2, [pc, #300]	; (800473c <HAL_GPIO_Init+0x308>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d007      	beq.n	8004624 <HAL_GPIO_Init+0x1f0>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a4a      	ldr	r2, [pc, #296]	; (8004740 <HAL_GPIO_Init+0x30c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d101      	bne.n	8004620 <HAL_GPIO_Init+0x1ec>
 800461c:	2306      	movs	r3, #6
 800461e:	e00c      	b.n	800463a <HAL_GPIO_Init+0x206>
 8004620:	2307      	movs	r3, #7
 8004622:	e00a      	b.n	800463a <HAL_GPIO_Init+0x206>
 8004624:	2305      	movs	r3, #5
 8004626:	e008      	b.n	800463a <HAL_GPIO_Init+0x206>
 8004628:	2304      	movs	r3, #4
 800462a:	e006      	b.n	800463a <HAL_GPIO_Init+0x206>
 800462c:	2303      	movs	r3, #3
 800462e:	e004      	b.n	800463a <HAL_GPIO_Init+0x206>
 8004630:	2302      	movs	r3, #2
 8004632:	e002      	b.n	800463a <HAL_GPIO_Init+0x206>
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <HAL_GPIO_Init+0x206>
 8004638:	2300      	movs	r3, #0
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	f002 0203 	and.w	r2, r2, #3
 8004640:	0092      	lsls	r2, r2, #2
 8004642:	4093      	lsls	r3, r2
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800464a:	4937      	ldr	r1, [pc, #220]	; (8004728 <HAL_GPIO_Init+0x2f4>)
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	089b      	lsrs	r3, r3, #2
 8004650:	3302      	adds	r3, #2
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004658:	4b3a      	ldr	r3, [pc, #232]	; (8004744 <HAL_GPIO_Init+0x310>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	43db      	mvns	r3, r3
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4013      	ands	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800467c:	4a31      	ldr	r2, [pc, #196]	; (8004744 <HAL_GPIO_Init+0x310>)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004682:	4b30      	ldr	r3, [pc, #192]	; (8004744 <HAL_GPIO_Init+0x310>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	43db      	mvns	r3, r3
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4013      	ands	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80046a6:	4a27      	ldr	r2, [pc, #156]	; (8004744 <HAL_GPIO_Init+0x310>)
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046ac:	4b25      	ldr	r3, [pc, #148]	; (8004744 <HAL_GPIO_Init+0x310>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	43db      	mvns	r3, r3
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4013      	ands	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80046d0:	4a1c      	ldr	r2, [pc, #112]	; (8004744 <HAL_GPIO_Init+0x310>)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046d6:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <HAL_GPIO_Init+0x310>)
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	43db      	mvns	r3, r3
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4013      	ands	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80046fa:	4a12      	ldr	r2, [pc, #72]	; (8004744 <HAL_GPIO_Init+0x310>)
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	3301      	adds	r3, #1
 8004704:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	f47f ae97 	bne.w	8004444 <HAL_GPIO_Init+0x10>
  }
}
 8004716:	bf00      	nop
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	40021000 	.word	0x40021000
 8004728:	40010000 	.word	0x40010000
 800472c:	48000400 	.word	0x48000400
 8004730:	48000800 	.word	0x48000800
 8004734:	48000c00 	.word	0x48000c00
 8004738:	48001000 	.word	0x48001000
 800473c:	48001400 	.word	0x48001400
 8004740:	48001800 	.word	0x48001800
 8004744:	40010400 	.word	0x40010400

08004748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	807b      	strh	r3, [r7, #2]
 8004754:	4613      	mov	r3, r2
 8004756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004758:	787b      	ldrb	r3, [r7, #1]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800475e:	887a      	ldrh	r2, [r7, #2]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004764:	e002      	b.n	800476c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004766:	887a      	ldrh	r2, [r7, #2]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800477e:	af00      	add	r7, sp, #0
 8004780:	1d3b      	adds	r3, r7, #4
 8004782:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004784:	1d3b      	adds	r3, r7, #4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d102      	bne.n	8004792 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	f000 bf01 	b.w	8005594 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004792:	1d3b      	adds	r3, r7, #4
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 8160 	beq.w	8004a62 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80047a2:	4bae      	ldr	r3, [pc, #696]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d00c      	beq.n	80047c8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047ae:	4bab      	ldr	r3, [pc, #684]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d159      	bne.n	800486e <HAL_RCC_OscConfig+0xf6>
 80047ba:	4ba8      	ldr	r3, [pc, #672]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80047c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c6:	d152      	bne.n	800486e <HAL_RCC_OscConfig+0xf6>
 80047c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047cc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80047d4:	fa93 f3a3 	rbit	r3, r3
 80047d8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80047dc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e0:	fab3 f383 	clz	r3, r3
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d102      	bne.n	80047fa <HAL_RCC_OscConfig+0x82>
 80047f4:	4b99      	ldr	r3, [pc, #612]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	e015      	b.n	8004826 <HAL_RCC_OscConfig+0xae>
 80047fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004802:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004806:	fa93 f3a3 	rbit	r3, r3
 800480a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800480e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004812:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004816:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800481a:	fa93 f3a3 	rbit	r3, r3
 800481e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004822:	4b8e      	ldr	r3, [pc, #568]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800482a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800482e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004832:	fa92 f2a2 	rbit	r2, r2
 8004836:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800483a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800483e:	fab2 f282 	clz	r2, r2
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	f042 0220 	orr.w	r2, r2, #32
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	f002 021f 	and.w	r2, r2, #31
 800484e:	2101      	movs	r1, #1
 8004850:	fa01 f202 	lsl.w	r2, r1, r2
 8004854:	4013      	ands	r3, r2
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 8102 	beq.w	8004a60 <HAL_RCC_OscConfig+0x2e8>
 800485c:	1d3b      	adds	r3, r7, #4
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f040 80fc 	bne.w	8004a60 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	f000 be93 	b.w	8005594 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800486e:	1d3b      	adds	r3, r7, #4
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004878:	d106      	bne.n	8004888 <HAL_RCC_OscConfig+0x110>
 800487a:	4b78      	ldr	r3, [pc, #480]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a77      	ldr	r2, [pc, #476]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 8004880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	e030      	b.n	80048ea <HAL_RCC_OscConfig+0x172>
 8004888:	1d3b      	adds	r3, r7, #4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10c      	bne.n	80048ac <HAL_RCC_OscConfig+0x134>
 8004892:	4b72      	ldr	r3, [pc, #456]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a71      	ldr	r2, [pc, #452]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 8004898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	4b6f      	ldr	r3, [pc, #444]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a6e      	ldr	r2, [pc, #440]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 80048a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	e01e      	b.n	80048ea <HAL_RCC_OscConfig+0x172>
 80048ac:	1d3b      	adds	r3, r7, #4
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048b6:	d10c      	bne.n	80048d2 <HAL_RCC_OscConfig+0x15a>
 80048b8:	4b68      	ldr	r3, [pc, #416]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a67      	ldr	r2, [pc, #412]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 80048be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	4b65      	ldr	r3, [pc, #404]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a64      	ldr	r2, [pc, #400]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 80048ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	e00b      	b.n	80048ea <HAL_RCC_OscConfig+0x172>
 80048d2:	4b62      	ldr	r3, [pc, #392]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a61      	ldr	r2, [pc, #388]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 80048d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	4b5f      	ldr	r3, [pc, #380]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a5e      	ldr	r2, [pc, #376]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 80048e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048e8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048ea:	1d3b      	adds	r3, r7, #4
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d059      	beq.n	80049a8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f4:	f7fe f928 	bl	8002b48 <HAL_GetTick>
 80048f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fc:	e00a      	b.n	8004914 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048fe:	f7fe f923 	bl	8002b48 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b64      	cmp	r3, #100	; 0x64
 800490c:	d902      	bls.n	8004914 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	f000 be40 	b.w	8005594 <HAL_RCC_OscConfig+0xe1c>
 8004914:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004918:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004920:	fa93 f3a3 	rbit	r3, r3
 8004924:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004928:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492c:	fab3 f383 	clz	r3, r3
 8004930:	b2db      	uxtb	r3, r3
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	b2db      	uxtb	r3, r3
 8004936:	f043 0301 	orr.w	r3, r3, #1
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b01      	cmp	r3, #1
 800493e:	d102      	bne.n	8004946 <HAL_RCC_OscConfig+0x1ce>
 8004940:	4b46      	ldr	r3, [pc, #280]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	e015      	b.n	8004972 <HAL_RCC_OscConfig+0x1fa>
 8004946:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800494a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004952:	fa93 f3a3 	rbit	r3, r3
 8004956:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800495a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800495e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004962:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004966:	fa93 f3a3 	rbit	r3, r3
 800496a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800496e:	4b3b      	ldr	r3, [pc, #236]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004976:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800497a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800497e:	fa92 f2a2 	rbit	r2, r2
 8004982:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004986:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800498a:	fab2 f282 	clz	r2, r2
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	f042 0220 	orr.w	r2, r2, #32
 8004994:	b2d2      	uxtb	r2, r2
 8004996:	f002 021f 	and.w	r2, r2, #31
 800499a:	2101      	movs	r1, #1
 800499c:	fa01 f202 	lsl.w	r2, r1, r2
 80049a0:	4013      	ands	r3, r2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0ab      	beq.n	80048fe <HAL_RCC_OscConfig+0x186>
 80049a6:	e05c      	b.n	8004a62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a8:	f7fe f8ce 	bl	8002b48 <HAL_GetTick>
 80049ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b0:	e00a      	b.n	80049c8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049b2:	f7fe f8c9 	bl	8002b48 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b64      	cmp	r3, #100	; 0x64
 80049c0:	d902      	bls.n	80049c8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	f000 bde6 	b.w	8005594 <HAL_RCC_OscConfig+0xe1c>
 80049c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049cc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80049d4:	fa93 f3a3 	rbit	r3, r3
 80049d8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80049dc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e0:	fab3 f383 	clz	r3, r3
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d102      	bne.n	80049fa <HAL_RCC_OscConfig+0x282>
 80049f4:	4b19      	ldr	r3, [pc, #100]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	e015      	b.n	8004a26 <HAL_RCC_OscConfig+0x2ae>
 80049fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049fe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a02:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004a06:	fa93 f3a3 	rbit	r3, r3
 8004a0a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004a0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a12:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004a16:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004a1a:	fa93 f3a3 	rbit	r3, r3
 8004a1e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004a22:	4b0e      	ldr	r3, [pc, #56]	; (8004a5c <HAL_RCC_OscConfig+0x2e4>)
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a2a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004a2e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004a32:	fa92 f2a2 	rbit	r2, r2
 8004a36:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004a3a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004a3e:	fab2 f282 	clz	r2, r2
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	f042 0220 	orr.w	r2, r2, #32
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	f002 021f 	and.w	r2, r2, #31
 8004a4e:	2101      	movs	r1, #1
 8004a50:	fa01 f202 	lsl.w	r2, r1, r2
 8004a54:	4013      	ands	r3, r2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1ab      	bne.n	80049b2 <HAL_RCC_OscConfig+0x23a>
 8004a5a:	e002      	b.n	8004a62 <HAL_RCC_OscConfig+0x2ea>
 8004a5c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a62:	1d3b      	adds	r3, r7, #4
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 8170 	beq.w	8004d52 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004a72:	4bd0      	ldr	r3, [pc, #832]	; (8004db4 <HAL_RCC_OscConfig+0x63c>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f003 030c 	and.w	r3, r3, #12
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00c      	beq.n	8004a98 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004a7e:	4bcd      	ldr	r3, [pc, #820]	; (8004db4 <HAL_RCC_OscConfig+0x63c>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f003 030c 	and.w	r3, r3, #12
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d16d      	bne.n	8004b66 <HAL_RCC_OscConfig+0x3ee>
 8004a8a:	4bca      	ldr	r3, [pc, #808]	; (8004db4 <HAL_RCC_OscConfig+0x63c>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a96:	d166      	bne.n	8004b66 <HAL_RCC_OscConfig+0x3ee>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004aa2:	fa93 f3a3 	rbit	r3, r3
 8004aa6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004aaa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aae:	fab3 f383 	clz	r3, r3
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d102      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x350>
 8004ac2:	4bbc      	ldr	r3, [pc, #752]	; (8004db4 <HAL_RCC_OscConfig+0x63c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	e013      	b.n	8004af0 <HAL_RCC_OscConfig+0x378>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ace:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004ad2:	fa93 f3a3 	rbit	r3, r3
 8004ad6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004ada:	2302      	movs	r3, #2
 8004adc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004ae0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004ae4:	fa93 f3a3 	rbit	r3, r3
 8004ae8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004aec:	4bb1      	ldr	r3, [pc, #708]	; (8004db4 <HAL_RCC_OscConfig+0x63c>)
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	2202      	movs	r2, #2
 8004af2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004af6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004afa:	fa92 f2a2 	rbit	r2, r2
 8004afe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004b02:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004b06:	fab2 f282 	clz	r2, r2
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	f042 0220 	orr.w	r2, r2, #32
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	f002 021f 	and.w	r2, r2, #31
 8004b16:	2101      	movs	r1, #1
 8004b18:	fa01 f202 	lsl.w	r2, r1, r2
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d007      	beq.n	8004b32 <HAL_RCC_OscConfig+0x3ba>
 8004b22:	1d3b      	adds	r3, r7, #4
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d002      	beq.n	8004b32 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f000 bd31 	b.w	8005594 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b32:	4ba0      	ldr	r3, [pc, #640]	; (8004db4 <HAL_RCC_OscConfig+0x63c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	21f8      	movs	r1, #248	; 0xf8
 8004b42:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b46:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004b4a:	fa91 f1a1 	rbit	r1, r1
 8004b4e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004b52:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004b56:	fab1 f181 	clz	r1, r1
 8004b5a:	b2c9      	uxtb	r1, r1
 8004b5c:	408b      	lsls	r3, r1
 8004b5e:	4995      	ldr	r1, [pc, #596]	; (8004db4 <HAL_RCC_OscConfig+0x63c>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b64:	e0f5      	b.n	8004d52 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b66:	1d3b      	adds	r3, r7, #4
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8085 	beq.w	8004c7c <HAL_RCC_OscConfig+0x504>
 8004b72:	2301      	movs	r3, #1
 8004b74:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b78:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004b7c:	fa93 f3a3 	rbit	r3, r3
 8004b80:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004b84:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b88:	fab3 f383 	clz	r3, r3
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	461a      	mov	r2, r3
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9e:	f7fd ffd3 	bl	8002b48 <HAL_GetTick>
 8004ba2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba6:	e00a      	b.n	8004bbe <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ba8:	f7fd ffce 	bl	8002b48 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d902      	bls.n	8004bbe <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	f000 bceb 	b.w	8005594 <HAL_RCC_OscConfig+0xe1c>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004bc8:	fa93 f3a3 	rbit	r3, r3
 8004bcc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004bd0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd4:	fab3 f383 	clz	r3, r3
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d102      	bne.n	8004bee <HAL_RCC_OscConfig+0x476>
 8004be8:	4b72      	ldr	r3, [pc, #456]	; (8004db4 <HAL_RCC_OscConfig+0x63c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	e013      	b.n	8004c16 <HAL_RCC_OscConfig+0x49e>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004bf8:	fa93 f3a3 	rbit	r3, r3
 8004bfc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004c00:	2302      	movs	r3, #2
 8004c02:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004c06:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004c0a:	fa93 f3a3 	rbit	r3, r3
 8004c0e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004c12:	4b68      	ldr	r3, [pc, #416]	; (8004db4 <HAL_RCC_OscConfig+0x63c>)
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	2202      	movs	r2, #2
 8004c18:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004c1c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004c20:	fa92 f2a2 	rbit	r2, r2
 8004c24:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004c28:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004c2c:	fab2 f282 	clz	r2, r2
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	f042 0220 	orr.w	r2, r2, #32
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	f002 021f 	and.w	r2, r2, #31
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0af      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c48:	4b5a      	ldr	r3, [pc, #360]	; (8004db4 <HAL_RCC_OscConfig+0x63c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c50:	1d3b      	adds	r3, r7, #4
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	21f8      	movs	r1, #248	; 0xf8
 8004c58:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004c60:	fa91 f1a1 	rbit	r1, r1
 8004c64:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004c68:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004c6c:	fab1 f181 	clz	r1, r1
 8004c70:	b2c9      	uxtb	r1, r1
 8004c72:	408b      	lsls	r3, r1
 8004c74:	494f      	ldr	r1, [pc, #316]	; (8004db4 <HAL_RCC_OscConfig+0x63c>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	600b      	str	r3, [r1, #0]
 8004c7a:	e06a      	b.n	8004d52 <HAL_RCC_OscConfig+0x5da>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c82:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004c86:	fa93 f3a3 	rbit	r3, r3
 8004c8a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004c8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c92:	fab3 f383 	clz	r3, r3
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca8:	f7fd ff4e 	bl	8002b48 <HAL_GetTick>
 8004cac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cb0:	e00a      	b.n	8004cc8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cb2:	f7fd ff49 	bl	8002b48 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d902      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	f000 bc66 	b.w	8005594 <HAL_RCC_OscConfig+0xe1c>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004cd2:	fa93 f3a3 	rbit	r3, r3
 8004cd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004cda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cde:	fab3 f383 	clz	r3, r3
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d102      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x580>
 8004cf2:	4b30      	ldr	r3, [pc, #192]	; (8004db4 <HAL_RCC_OscConfig+0x63c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	e013      	b.n	8004d20 <HAL_RCC_OscConfig+0x5a8>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d02:	fa93 f3a3 	rbit	r3, r3
 8004d06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d10:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d14:	fa93 f3a3 	rbit	r3, r3
 8004d18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d1c:	4b25      	ldr	r3, [pc, #148]	; (8004db4 <HAL_RCC_OscConfig+0x63c>)
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	2202      	movs	r2, #2
 8004d22:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004d26:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004d2a:	fa92 f2a2 	rbit	r2, r2
 8004d2e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004d32:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004d36:	fab2 f282 	clz	r2, r2
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	f042 0220 	orr.w	r2, r2, #32
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	f002 021f 	and.w	r2, r2, #31
 8004d46:	2101      	movs	r1, #1
 8004d48:	fa01 f202 	lsl.w	r2, r1, r2
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1af      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d52:	1d3b      	adds	r3, r7, #4
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80da 	beq.w	8004f16 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d62:	1d3b      	adds	r3, r7, #4
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d069      	beq.n	8004e40 <HAL_RCC_OscConfig+0x6c8>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d76:	fa93 f3a3 	rbit	r3, r3
 8004d7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004d7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d82:	fab3 f383 	clz	r3, r3
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <HAL_RCC_OscConfig+0x640>)
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	461a      	mov	r2, r3
 8004d92:	2301      	movs	r3, #1
 8004d94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d96:	f7fd fed7 	bl	8002b48 <HAL_GetTick>
 8004d9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d9e:	e00d      	b.n	8004dbc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004da0:	f7fd fed2 	bl	8002b48 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d905      	bls.n	8004dbc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e3ef      	b.n	8005594 <HAL_RCC_OscConfig+0xe1c>
 8004db4:	40021000 	.word	0x40021000
 8004db8:	10908120 	.word	0x10908120
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc6:	fa93 f2a3 	rbit	r2, r3
 8004dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	fa93 f2a3 	rbit	r2, r3
 8004de2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004dec:	2202      	movs	r2, #2
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	fa93 f2a3 	rbit	r2, r3
 8004dfa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004dfe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e00:	4ba4      	ldr	r3, [pc, #656]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8004e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e04:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004e08:	2102      	movs	r1, #2
 8004e0a:	6019      	str	r1, [r3, #0]
 8004e0c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	fa93 f1a3 	rbit	r1, r3
 8004e16:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004e1a:	6019      	str	r1, [r3, #0]
  return result;
 8004e1c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	fab3 f383 	clz	r3, r3
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	f003 031f 	and.w	r3, r3, #31
 8004e32:	2101      	movs	r1, #1
 8004e34:	fa01 f303 	lsl.w	r3, r1, r3
 8004e38:	4013      	ands	r3, r2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0b0      	beq.n	8004da0 <HAL_RCC_OscConfig+0x628>
 8004e3e:	e06a      	b.n	8004f16 <HAL_RCC_OscConfig+0x79e>
 8004e40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004e44:	2201      	movs	r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e48:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	fa93 f2a3 	rbit	r2, r3
 8004e52:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004e56:	601a      	str	r2, [r3, #0]
  return result;
 8004e58:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004e5c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e5e:	fab3 f383 	clz	r3, r3
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	461a      	mov	r2, r3
 8004e66:	4b8c      	ldr	r3, [pc, #560]	; (8005098 <HAL_RCC_OscConfig+0x920>)
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	2300      	movs	r3, #0
 8004e70:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e72:	f7fd fe69 	bl	8002b48 <HAL_GetTick>
 8004e76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e7a:	e009      	b.n	8004e90 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e7c:	f7fd fe64 	bl	8002b48 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e381      	b.n	8005594 <HAL_RCC_OscConfig+0xe1c>
 8004e90:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004e94:	2202      	movs	r2, #2
 8004e96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e98:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	fa93 f2a3 	rbit	r2, r3
 8004ea2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004eac:	2202      	movs	r2, #2
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	fa93 f2a3 	rbit	r2, r3
 8004eba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	fa93 f2a3 	rbit	r2, r3
 8004ed2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004ed6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed8:	4b6e      	ldr	r3, [pc, #440]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8004eda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004edc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004ee0:	2102      	movs	r1, #2
 8004ee2:	6019      	str	r1, [r3, #0]
 8004ee4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	fa93 f1a3 	rbit	r1, r3
 8004eee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004ef2:	6019      	str	r1, [r3, #0]
  return result;
 8004ef4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	fab3 f383 	clz	r3, r3
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	f003 031f 	and.w	r3, r3, #31
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f10:	4013      	ands	r3, r2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1b2      	bne.n	8004e7c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f16:	1d3b      	adds	r3, r7, #4
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8157 	beq.w	80051d4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f26:	2300      	movs	r3, #0
 8004f28:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f2c:	4b59      	ldr	r3, [pc, #356]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d112      	bne.n	8004f5e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f38:	4b56      	ldr	r3, [pc, #344]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	4a55      	ldr	r2, [pc, #340]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8004f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f42:	61d3      	str	r3, [r2, #28]
 8004f44:	4b53      	ldr	r3, [pc, #332]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004f4c:	f107 030c 	add.w	r3, r7, #12
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	f107 030c 	add.w	r3, r7, #12
 8004f56:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5e:	4b4f      	ldr	r3, [pc, #316]	; (800509c <HAL_RCC_OscConfig+0x924>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d11a      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f6a:	4b4c      	ldr	r3, [pc, #304]	; (800509c <HAL_RCC_OscConfig+0x924>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a4b      	ldr	r2, [pc, #300]	; (800509c <HAL_RCC_OscConfig+0x924>)
 8004f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f76:	f7fd fde7 	bl	8002b48 <HAL_GetTick>
 8004f7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7e:	e009      	b.n	8004f94 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f80:	f7fd fde2 	bl	8002b48 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b64      	cmp	r3, #100	; 0x64
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e2ff      	b.n	8005594 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f94:	4b41      	ldr	r3, [pc, #260]	; (800509c <HAL_RCC_OscConfig+0x924>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0ef      	beq.n	8004f80 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fa0:	1d3b      	adds	r3, r7, #4
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d106      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x840>
 8004faa:	4b3a      	ldr	r3, [pc, #232]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	4a39      	ldr	r2, [pc, #228]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	6213      	str	r3, [r2, #32]
 8004fb6:	e02f      	b.n	8005018 <HAL_RCC_OscConfig+0x8a0>
 8004fb8:	1d3b      	adds	r3, r7, #4
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10c      	bne.n	8004fdc <HAL_RCC_OscConfig+0x864>
 8004fc2:	4b34      	ldr	r3, [pc, #208]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	4a33      	ldr	r2, [pc, #204]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8004fc8:	f023 0301 	bic.w	r3, r3, #1
 8004fcc:	6213      	str	r3, [r2, #32]
 8004fce:	4b31      	ldr	r3, [pc, #196]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	4a30      	ldr	r2, [pc, #192]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8004fd4:	f023 0304 	bic.w	r3, r3, #4
 8004fd8:	6213      	str	r3, [r2, #32]
 8004fda:	e01d      	b.n	8005018 <HAL_RCC_OscConfig+0x8a0>
 8004fdc:	1d3b      	adds	r3, r7, #4
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b05      	cmp	r3, #5
 8004fe4:	d10c      	bne.n	8005000 <HAL_RCC_OscConfig+0x888>
 8004fe6:	4b2b      	ldr	r3, [pc, #172]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	4a2a      	ldr	r2, [pc, #168]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8004fec:	f043 0304 	orr.w	r3, r3, #4
 8004ff0:	6213      	str	r3, [r2, #32]
 8004ff2:	4b28      	ldr	r3, [pc, #160]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	4a27      	ldr	r2, [pc, #156]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8004ff8:	f043 0301 	orr.w	r3, r3, #1
 8004ffc:	6213      	str	r3, [r2, #32]
 8004ffe:	e00b      	b.n	8005018 <HAL_RCC_OscConfig+0x8a0>
 8005000:	4b24      	ldr	r3, [pc, #144]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	4a23      	ldr	r2, [pc, #140]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8005006:	f023 0301 	bic.w	r3, r3, #1
 800500a:	6213      	str	r3, [r2, #32]
 800500c:	4b21      	ldr	r3, [pc, #132]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	4a20      	ldr	r2, [pc, #128]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8005012:	f023 0304 	bic.w	r3, r3, #4
 8005016:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005018:	1d3b      	adds	r3, r7, #4
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d06a      	beq.n	80050f8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005022:	f7fd fd91 	bl	8002b48 <HAL_GetTick>
 8005026:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502a:	e00b      	b.n	8005044 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800502c:	f7fd fd8c 	bl	8002b48 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	f241 3288 	movw	r2, #5000	; 0x1388
 800503c:	4293      	cmp	r3, r2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e2a7      	b.n	8005594 <HAL_RCC_OscConfig+0xe1c>
 8005044:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005048:	2202      	movs	r2, #2
 800504a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	fa93 f2a3 	rbit	r2, r3
 8005056:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005060:	2202      	movs	r2, #2
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	fa93 f2a3 	rbit	r2, r3
 800506e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005072:	601a      	str	r2, [r3, #0]
  return result;
 8005074:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005078:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800507a:	fab3 f383 	clz	r3, r3
 800507e:	b2db      	uxtb	r3, r3
 8005080:	095b      	lsrs	r3, r3, #5
 8005082:	b2db      	uxtb	r3, r3
 8005084:	f043 0302 	orr.w	r3, r3, #2
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d108      	bne.n	80050a0 <HAL_RCC_OscConfig+0x928>
 800508e:	4b01      	ldr	r3, [pc, #4]	; (8005094 <HAL_RCC_OscConfig+0x91c>)
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	e013      	b.n	80050bc <HAL_RCC_OscConfig+0x944>
 8005094:	40021000 	.word	0x40021000
 8005098:	10908120 	.word	0x10908120
 800509c:	40007000 	.word	0x40007000
 80050a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80050a4:	2202      	movs	r2, #2
 80050a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	fa93 f2a3 	rbit	r2, r3
 80050b2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	4bc0      	ldr	r3, [pc, #768]	; (80053bc <HAL_RCC_OscConfig+0xc44>)
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80050c0:	2102      	movs	r1, #2
 80050c2:	6011      	str	r1, [r2, #0]
 80050c4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80050c8:	6812      	ldr	r2, [r2, #0]
 80050ca:	fa92 f1a2 	rbit	r1, r2
 80050ce:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80050d2:	6011      	str	r1, [r2, #0]
  return result;
 80050d4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80050d8:	6812      	ldr	r2, [r2, #0]
 80050da:	fab2 f282 	clz	r2, r2
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	f002 021f 	and.w	r2, r2, #31
 80050ea:	2101      	movs	r1, #1
 80050ec:	fa01 f202 	lsl.w	r2, r1, r2
 80050f0:	4013      	ands	r3, r2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d09a      	beq.n	800502c <HAL_RCC_OscConfig+0x8b4>
 80050f6:	e063      	b.n	80051c0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050f8:	f7fd fd26 	bl	8002b48 <HAL_GetTick>
 80050fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005100:	e00b      	b.n	800511a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005102:	f7fd fd21 	bl	8002b48 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e23c      	b.n	8005594 <HAL_RCC_OscConfig+0xe1c>
 800511a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800511e:	2202      	movs	r2, #2
 8005120:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005122:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	fa93 f2a3 	rbit	r2, r3
 800512c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005136:	2202      	movs	r2, #2
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	fa93 f2a3 	rbit	r2, r3
 8005144:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005148:	601a      	str	r2, [r3, #0]
  return result;
 800514a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800514e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005150:	fab3 f383 	clz	r3, r3
 8005154:	b2db      	uxtb	r3, r3
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	b2db      	uxtb	r3, r3
 800515a:	f043 0302 	orr.w	r3, r3, #2
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d102      	bne.n	800516a <HAL_RCC_OscConfig+0x9f2>
 8005164:	4b95      	ldr	r3, [pc, #596]	; (80053bc <HAL_RCC_OscConfig+0xc44>)
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	e00d      	b.n	8005186 <HAL_RCC_OscConfig+0xa0e>
 800516a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800516e:	2202      	movs	r2, #2
 8005170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005172:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	fa93 f2a3 	rbit	r2, r3
 800517c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	4b8e      	ldr	r3, [pc, #568]	; (80053bc <HAL_RCC_OscConfig+0xc44>)
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800518a:	2102      	movs	r1, #2
 800518c:	6011      	str	r1, [r2, #0]
 800518e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005192:	6812      	ldr	r2, [r2, #0]
 8005194:	fa92 f1a2 	rbit	r1, r2
 8005198:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800519c:	6011      	str	r1, [r2, #0]
  return result;
 800519e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80051a2:	6812      	ldr	r2, [r2, #0]
 80051a4:	fab2 f282 	clz	r2, r2
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	f002 021f 	and.w	r2, r2, #31
 80051b4:	2101      	movs	r1, #1
 80051b6:	fa01 f202 	lsl.w	r2, r1, r2
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1a0      	bne.n	8005102 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051c0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d105      	bne.n	80051d4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c8:	4b7c      	ldr	r3, [pc, #496]	; (80053bc <HAL_RCC_OscConfig+0xc44>)
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	4a7b      	ldr	r2, [pc, #492]	; (80053bc <HAL_RCC_OscConfig+0xc44>)
 80051ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051d2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051d4:	1d3b      	adds	r3, r7, #4
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 81d9 	beq.w	8005592 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051e0:	4b76      	ldr	r3, [pc, #472]	; (80053bc <HAL_RCC_OscConfig+0xc44>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f003 030c 	and.w	r3, r3, #12
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	f000 81a6 	beq.w	800553a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ee:	1d3b      	adds	r3, r7, #4
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	f040 811e 	bne.w	8005436 <HAL_RCC_OscConfig+0xcbe>
 80051fa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80051fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005202:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005204:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	fa93 f2a3 	rbit	r2, r3
 800520e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005212:	601a      	str	r2, [r3, #0]
  return result;
 8005214:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005218:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521a:	fab3 f383 	clz	r3, r3
 800521e:	b2db      	uxtb	r3, r3
 8005220:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005224:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	461a      	mov	r2, r3
 800522c:	2300      	movs	r3, #0
 800522e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005230:	f7fd fc8a 	bl	8002b48 <HAL_GetTick>
 8005234:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005238:	e009      	b.n	800524e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800523a:	f7fd fc85 	bl	8002b48 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e1a2      	b.n	8005594 <HAL_RCC_OscConfig+0xe1c>
 800524e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005252:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005256:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005258:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	fa93 f2a3 	rbit	r2, r3
 8005262:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005266:	601a      	str	r2, [r3, #0]
  return result;
 8005268:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800526c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800526e:	fab3 f383 	clz	r3, r3
 8005272:	b2db      	uxtb	r3, r3
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	b2db      	uxtb	r3, r3
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b01      	cmp	r3, #1
 8005280:	d102      	bne.n	8005288 <HAL_RCC_OscConfig+0xb10>
 8005282:	4b4e      	ldr	r3, [pc, #312]	; (80053bc <HAL_RCC_OscConfig+0xc44>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	e01b      	b.n	80052c0 <HAL_RCC_OscConfig+0xb48>
 8005288:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800528c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005292:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	fa93 f2a3 	rbit	r2, r3
 800529c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80052a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	fa93 f2a3 	rbit	r2, r3
 80052b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	4b3f      	ldr	r3, [pc, #252]	; (80053bc <HAL_RCC_OscConfig+0xc44>)
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80052c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80052c8:	6011      	str	r1, [r2, #0]
 80052ca:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80052ce:	6812      	ldr	r2, [r2, #0]
 80052d0:	fa92 f1a2 	rbit	r1, r2
 80052d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80052d8:	6011      	str	r1, [r2, #0]
  return result;
 80052da:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	fab2 f282 	clz	r2, r2
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	f042 0220 	orr.w	r2, r2, #32
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	f002 021f 	and.w	r2, r2, #31
 80052f0:	2101      	movs	r1, #1
 80052f2:	fa01 f202 	lsl.w	r2, r1, r2
 80052f6:	4013      	ands	r3, r2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d19e      	bne.n	800523a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052fc:	4b2f      	ldr	r3, [pc, #188]	; (80053bc <HAL_RCC_OscConfig+0xc44>)
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	f023 020f 	bic.w	r2, r3, #15
 8005304:	1d3b      	adds	r3, r7, #4
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	492c      	ldr	r1, [pc, #176]	; (80053bc <HAL_RCC_OscConfig+0xc44>)
 800530c:	4313      	orrs	r3, r2
 800530e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005310:	4b2a      	ldr	r3, [pc, #168]	; (80053bc <HAL_RCC_OscConfig+0xc44>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005318:	1d3b      	adds	r3, r7, #4
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6a19      	ldr	r1, [r3, #32]
 800531e:	1d3b      	adds	r3, r7, #4
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	430b      	orrs	r3, r1
 8005326:	4925      	ldr	r1, [pc, #148]	; (80053bc <HAL_RCC_OscConfig+0xc44>)
 8005328:	4313      	orrs	r3, r2
 800532a:	604b      	str	r3, [r1, #4]
 800532c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005330:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005334:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005336:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	fa93 f2a3 	rbit	r2, r3
 8005340:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005344:	601a      	str	r2, [r3, #0]
  return result;
 8005346:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800534a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800534c:	fab3 f383 	clz	r3, r3
 8005350:	b2db      	uxtb	r3, r3
 8005352:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005356:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	461a      	mov	r2, r3
 800535e:	2301      	movs	r3, #1
 8005360:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005362:	f7fd fbf1 	bl	8002b48 <HAL_GetTick>
 8005366:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800536a:	e009      	b.n	8005380 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800536c:	f7fd fbec 	bl	8002b48 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e109      	b.n	8005594 <HAL_RCC_OscConfig+0xe1c>
 8005380:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005384:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005388:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800538a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	fa93 f2a3 	rbit	r2, r3
 8005394:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005398:	601a      	str	r2, [r3, #0]
  return result;
 800539a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800539e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053a0:	fab3 f383 	clz	r3, r3
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	f043 0301 	orr.w	r3, r3, #1
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d105      	bne.n	80053c0 <HAL_RCC_OscConfig+0xc48>
 80053b4:	4b01      	ldr	r3, [pc, #4]	; (80053bc <HAL_RCC_OscConfig+0xc44>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	e01e      	b.n	80053f8 <HAL_RCC_OscConfig+0xc80>
 80053ba:	bf00      	nop
 80053bc:	40021000 	.word	0x40021000
 80053c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80053c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	fa93 f2a3 	rbit	r2, r3
 80053d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80053de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	fa93 f2a3 	rbit	r2, r3
 80053ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	4b6a      	ldr	r3, [pc, #424]	; (80055a0 <HAL_RCC_OscConfig+0xe28>)
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80053fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005400:	6011      	str	r1, [r2, #0]
 8005402:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005406:	6812      	ldr	r2, [r2, #0]
 8005408:	fa92 f1a2 	rbit	r1, r2
 800540c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005410:	6011      	str	r1, [r2, #0]
  return result;
 8005412:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	fab2 f282 	clz	r2, r2
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	f042 0220 	orr.w	r2, r2, #32
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	f002 021f 	and.w	r2, r2, #31
 8005428:	2101      	movs	r1, #1
 800542a:	fa01 f202 	lsl.w	r2, r1, r2
 800542e:	4013      	ands	r3, r2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d09b      	beq.n	800536c <HAL_RCC_OscConfig+0xbf4>
 8005434:	e0ad      	b.n	8005592 <HAL_RCC_OscConfig+0xe1a>
 8005436:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800543a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800543e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005440:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	fa93 f2a3 	rbit	r2, r3
 800544a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800544e:	601a      	str	r2, [r3, #0]
  return result;
 8005450:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005454:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005456:	fab3 f383 	clz	r3, r3
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005460:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	461a      	mov	r2, r3
 8005468:	2300      	movs	r3, #0
 800546a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800546c:	f7fd fb6c 	bl	8002b48 <HAL_GetTick>
 8005470:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005474:	e009      	b.n	800548a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005476:	f7fd fb67 	bl	8002b48 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e084      	b.n	8005594 <HAL_RCC_OscConfig+0xe1c>
 800548a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800548e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005492:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	fa93 f2a3 	rbit	r2, r3
 800549e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054a2:	601a      	str	r2, [r3, #0]
  return result;
 80054a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054aa:	fab3 f383 	clz	r3, r3
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	f043 0301 	orr.w	r3, r3, #1
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d102      	bne.n	80054c4 <HAL_RCC_OscConfig+0xd4c>
 80054be:	4b38      	ldr	r3, [pc, #224]	; (80055a0 <HAL_RCC_OscConfig+0xe28>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	e01b      	b.n	80054fc <HAL_RCC_OscConfig+0xd84>
 80054c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	fa93 f2a3 	rbit	r2, r3
 80054d8:	f107 0320 	add.w	r3, r7, #32
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	f107 031c 	add.w	r3, r7, #28
 80054e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	f107 031c 	add.w	r3, r7, #28
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	fa93 f2a3 	rbit	r2, r3
 80054f2:	f107 0318 	add.w	r3, r7, #24
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	4b29      	ldr	r3, [pc, #164]	; (80055a0 <HAL_RCC_OscConfig+0xe28>)
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	f107 0214 	add.w	r2, r7, #20
 8005500:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005504:	6011      	str	r1, [r2, #0]
 8005506:	f107 0214 	add.w	r2, r7, #20
 800550a:	6812      	ldr	r2, [r2, #0]
 800550c:	fa92 f1a2 	rbit	r1, r2
 8005510:	f107 0210 	add.w	r2, r7, #16
 8005514:	6011      	str	r1, [r2, #0]
  return result;
 8005516:	f107 0210 	add.w	r2, r7, #16
 800551a:	6812      	ldr	r2, [r2, #0]
 800551c:	fab2 f282 	clz	r2, r2
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	f042 0220 	orr.w	r2, r2, #32
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	f002 021f 	and.w	r2, r2, #31
 800552c:	2101      	movs	r1, #1
 800552e:	fa01 f202 	lsl.w	r2, r1, r2
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d19e      	bne.n	8005476 <HAL_RCC_OscConfig+0xcfe>
 8005538:	e02b      	b.n	8005592 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800553a:	1d3b      	adds	r3, r7, #4
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e025      	b.n	8005594 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005548:	4b15      	ldr	r3, [pc, #84]	; (80055a0 <HAL_RCC_OscConfig+0xe28>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005550:	4b13      	ldr	r3, [pc, #76]	; (80055a0 <HAL_RCC_OscConfig+0xe28>)
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005558:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800555c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005560:	1d3b      	adds	r3, r7, #4
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	429a      	cmp	r2, r3
 8005568:	d111      	bne.n	800558e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800556a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800556e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005572:	1d3b      	adds	r3, r7, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005578:	429a      	cmp	r2, r3
 800557a:	d108      	bne.n	800558e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800557c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005580:	f003 020f 	and.w	r2, r3, #15
 8005584:	1d3b      	adds	r3, r7, #4
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800558a:	429a      	cmp	r2, r3
 800558c:	d001      	beq.n	8005592 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	40021000 	.word	0x40021000

080055a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b09e      	sub	sp, #120	; 0x78
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e162      	b.n	8005882 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055bc:	4b90      	ldr	r3, [pc, #576]	; (8005800 <HAL_RCC_ClockConfig+0x25c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d910      	bls.n	80055ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ca:	4b8d      	ldr	r3, [pc, #564]	; (8005800 <HAL_RCC_ClockConfig+0x25c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f023 0207 	bic.w	r2, r3, #7
 80055d2:	498b      	ldr	r1, [pc, #556]	; (8005800 <HAL_RCC_ClockConfig+0x25c>)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055da:	4b89      	ldr	r3, [pc, #548]	; (8005800 <HAL_RCC_ClockConfig+0x25c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d001      	beq.n	80055ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e14a      	b.n	8005882 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d008      	beq.n	800560a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055f8:	4b82      	ldr	r3, [pc, #520]	; (8005804 <HAL_RCC_ClockConfig+0x260>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	497f      	ldr	r1, [pc, #508]	; (8005804 <HAL_RCC_ClockConfig+0x260>)
 8005606:	4313      	orrs	r3, r2
 8005608:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 80dc 	beq.w	80057d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d13c      	bne.n	800569a <HAL_RCC_ClockConfig+0xf6>
 8005620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005624:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005628:	fa93 f3a3 	rbit	r3, r3
 800562c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800562e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005630:	fab3 f383 	clz	r3, r3
 8005634:	b2db      	uxtb	r3, r3
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	b2db      	uxtb	r3, r3
 800563a:	f043 0301 	orr.w	r3, r3, #1
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	d102      	bne.n	800564a <HAL_RCC_ClockConfig+0xa6>
 8005644:	4b6f      	ldr	r3, [pc, #444]	; (8005804 <HAL_RCC_ClockConfig+0x260>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	e00f      	b.n	800566a <HAL_RCC_ClockConfig+0xc6>
 800564a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800564e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005650:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005652:	fa93 f3a3 	rbit	r3, r3
 8005656:	667b      	str	r3, [r7, #100]	; 0x64
 8005658:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800565c:	663b      	str	r3, [r7, #96]	; 0x60
 800565e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005660:	fa93 f3a3 	rbit	r3, r3
 8005664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005666:	4b67      	ldr	r3, [pc, #412]	; (8005804 <HAL_RCC_ClockConfig+0x260>)
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800566e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005670:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005672:	fa92 f2a2 	rbit	r2, r2
 8005676:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005678:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800567a:	fab2 f282 	clz	r2, r2
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	f042 0220 	orr.w	r2, r2, #32
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	f002 021f 	and.w	r2, r2, #31
 800568a:	2101      	movs	r1, #1
 800568c:	fa01 f202 	lsl.w	r2, r1, r2
 8005690:	4013      	ands	r3, r2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d17b      	bne.n	800578e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e0f3      	b.n	8005882 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d13c      	bne.n	800571c <HAL_RCC_ClockConfig+0x178>
 80056a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056aa:	fa93 f3a3 	rbit	r3, r3
 80056ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80056b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056b2:	fab3 f383 	clz	r3, r3
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	f043 0301 	orr.w	r3, r3, #1
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d102      	bne.n	80056cc <HAL_RCC_ClockConfig+0x128>
 80056c6:	4b4f      	ldr	r3, [pc, #316]	; (8005804 <HAL_RCC_ClockConfig+0x260>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	e00f      	b.n	80056ec <HAL_RCC_ClockConfig+0x148>
 80056cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d4:	fa93 f3a3 	rbit	r3, r3
 80056d8:	647b      	str	r3, [r7, #68]	; 0x44
 80056da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056de:	643b      	str	r3, [r7, #64]	; 0x40
 80056e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e2:	fa93 f3a3 	rbit	r3, r3
 80056e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e8:	4b46      	ldr	r3, [pc, #280]	; (8005804 <HAL_RCC_ClockConfig+0x260>)
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056f0:	63ba      	str	r2, [r7, #56]	; 0x38
 80056f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056f4:	fa92 f2a2 	rbit	r2, r2
 80056f8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80056fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056fc:	fab2 f282 	clz	r2, r2
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	f042 0220 	orr.w	r2, r2, #32
 8005706:	b2d2      	uxtb	r2, r2
 8005708:	f002 021f 	and.w	r2, r2, #31
 800570c:	2101      	movs	r1, #1
 800570e:	fa01 f202 	lsl.w	r2, r1, r2
 8005712:	4013      	ands	r3, r2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d13a      	bne.n	800578e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0b2      	b.n	8005882 <HAL_RCC_ClockConfig+0x2de>
 800571c:	2302      	movs	r3, #2
 800571e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	fa93 f3a3 	rbit	r3, r3
 8005726:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800572a:	fab3 f383 	clz	r3, r3
 800572e:	b2db      	uxtb	r3, r3
 8005730:	095b      	lsrs	r3, r3, #5
 8005732:	b2db      	uxtb	r3, r3
 8005734:	f043 0301 	orr.w	r3, r3, #1
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b01      	cmp	r3, #1
 800573c:	d102      	bne.n	8005744 <HAL_RCC_ClockConfig+0x1a0>
 800573e:	4b31      	ldr	r3, [pc, #196]	; (8005804 <HAL_RCC_ClockConfig+0x260>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	e00d      	b.n	8005760 <HAL_RCC_ClockConfig+0x1bc>
 8005744:	2302      	movs	r3, #2
 8005746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	fa93 f3a3 	rbit	r3, r3
 800574e:	627b      	str	r3, [r7, #36]	; 0x24
 8005750:	2302      	movs	r3, #2
 8005752:	623b      	str	r3, [r7, #32]
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	fa93 f3a3 	rbit	r3, r3
 800575a:	61fb      	str	r3, [r7, #28]
 800575c:	4b29      	ldr	r3, [pc, #164]	; (8005804 <HAL_RCC_ClockConfig+0x260>)
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	2202      	movs	r2, #2
 8005762:	61ba      	str	r2, [r7, #24]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	fa92 f2a2 	rbit	r2, r2
 800576a:	617a      	str	r2, [r7, #20]
  return result;
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	fab2 f282 	clz	r2, r2
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	f042 0220 	orr.w	r2, r2, #32
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	f002 021f 	and.w	r2, r2, #31
 800577e:	2101      	movs	r1, #1
 8005780:	fa01 f202 	lsl.w	r2, r1, r2
 8005784:	4013      	ands	r3, r2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e079      	b.n	8005882 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800578e:	4b1d      	ldr	r3, [pc, #116]	; (8005804 <HAL_RCC_ClockConfig+0x260>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f023 0203 	bic.w	r2, r3, #3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	491a      	ldr	r1, [pc, #104]	; (8005804 <HAL_RCC_ClockConfig+0x260>)
 800579c:	4313      	orrs	r3, r2
 800579e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057a0:	f7fd f9d2 	bl	8002b48 <HAL_GetTick>
 80057a4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a6:	e00a      	b.n	80057be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a8:	f7fd f9ce 	bl	8002b48 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e061      	b.n	8005882 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057be:	4b11      	ldr	r3, [pc, #68]	; (8005804 <HAL_RCC_ClockConfig+0x260>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f003 020c 	and.w	r2, r3, #12
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d1eb      	bne.n	80057a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057d0:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <HAL_RCC_ClockConfig+0x25c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d214      	bcs.n	8005808 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057de:	4b08      	ldr	r3, [pc, #32]	; (8005800 <HAL_RCC_ClockConfig+0x25c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f023 0207 	bic.w	r2, r3, #7
 80057e6:	4906      	ldr	r1, [pc, #24]	; (8005800 <HAL_RCC_ClockConfig+0x25c>)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ee:	4b04      	ldr	r3, [pc, #16]	; (8005800 <HAL_RCC_ClockConfig+0x25c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d005      	beq.n	8005808 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e040      	b.n	8005882 <HAL_RCC_ClockConfig+0x2de>
 8005800:	40022000 	.word	0x40022000
 8005804:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b00      	cmp	r3, #0
 8005812:	d008      	beq.n	8005826 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005814:	4b1d      	ldr	r3, [pc, #116]	; (800588c <HAL_RCC_ClockConfig+0x2e8>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	491a      	ldr	r1, [pc, #104]	; (800588c <HAL_RCC_ClockConfig+0x2e8>)
 8005822:	4313      	orrs	r3, r2
 8005824:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0308 	and.w	r3, r3, #8
 800582e:	2b00      	cmp	r3, #0
 8005830:	d009      	beq.n	8005846 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005832:	4b16      	ldr	r3, [pc, #88]	; (800588c <HAL_RCC_ClockConfig+0x2e8>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	4912      	ldr	r1, [pc, #72]	; (800588c <HAL_RCC_ClockConfig+0x2e8>)
 8005842:	4313      	orrs	r3, r2
 8005844:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005846:	f000 f829 	bl	800589c <HAL_RCC_GetSysClockFreq>
 800584a:	4601      	mov	r1, r0
 800584c:	4b0f      	ldr	r3, [pc, #60]	; (800588c <HAL_RCC_ClockConfig+0x2e8>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005854:	22f0      	movs	r2, #240	; 0xf0
 8005856:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	fa92 f2a2 	rbit	r2, r2
 800585e:	60fa      	str	r2, [r7, #12]
  return result;
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	fab2 f282 	clz	r2, r2
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	40d3      	lsrs	r3, r2
 800586a:	4a09      	ldr	r2, [pc, #36]	; (8005890 <HAL_RCC_ClockConfig+0x2ec>)
 800586c:	5cd3      	ldrb	r3, [r2, r3]
 800586e:	fa21 f303 	lsr.w	r3, r1, r3
 8005872:	4a08      	ldr	r2, [pc, #32]	; (8005894 <HAL_RCC_ClockConfig+0x2f0>)
 8005874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005876:	4b08      	ldr	r3, [pc, #32]	; (8005898 <HAL_RCC_ClockConfig+0x2f4>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f7fd f920 	bl	8002ac0 <HAL_InitTick>
  
  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3778      	adds	r7, #120	; 0x78
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	40021000 	.word	0x40021000
 8005890:	08006d0c 	.word	0x08006d0c
 8005894:	20000004 	.word	0x20000004
 8005898:	20000008 	.word	0x20000008

0800589c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800589c:	b480      	push	{r7}
 800589e:	b08b      	sub	sp, #44	; 0x2c
 80058a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61fb      	str	r3, [r7, #28]
 80058a6:	2300      	movs	r3, #0
 80058a8:	61bb      	str	r3, [r7, #24]
 80058aa:	2300      	movs	r3, #0
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
 80058ae:	2300      	movs	r3, #0
 80058b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80058b6:	4b2a      	ldr	r3, [pc, #168]	; (8005960 <HAL_RCC_GetSysClockFreq+0xc4>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f003 030c 	and.w	r3, r3, #12
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d002      	beq.n	80058cc <HAL_RCC_GetSysClockFreq+0x30>
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d003      	beq.n	80058d2 <HAL_RCC_GetSysClockFreq+0x36>
 80058ca:	e03f      	b.n	800594c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80058cc:	4b25      	ldr	r3, [pc, #148]	; (8005964 <HAL_RCC_GetSysClockFreq+0xc8>)
 80058ce:	623b      	str	r3, [r7, #32]
      break;
 80058d0:	e03f      	b.n	8005952 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80058d8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80058dc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	fa92 f2a2 	rbit	r2, r2
 80058e4:	607a      	str	r2, [r7, #4]
  return result;
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	fab2 f282 	clz	r2, r2
 80058ec:	b2d2      	uxtb	r2, r2
 80058ee:	40d3      	lsrs	r3, r2
 80058f0:	4a1d      	ldr	r2, [pc, #116]	; (8005968 <HAL_RCC_GetSysClockFreq+0xcc>)
 80058f2:	5cd3      	ldrb	r3, [r2, r3]
 80058f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80058f6:	4b1a      	ldr	r3, [pc, #104]	; (8005960 <HAL_RCC_GetSysClockFreq+0xc4>)
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	220f      	movs	r2, #15
 8005900:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	fa92 f2a2 	rbit	r2, r2
 8005908:	60fa      	str	r2, [r7, #12]
  return result;
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	fab2 f282 	clz	r2, r2
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	40d3      	lsrs	r3, r2
 8005914:	4a15      	ldr	r2, [pc, #84]	; (800596c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005916:	5cd3      	ldrb	r3, [r2, r3]
 8005918:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005924:	4a0f      	ldr	r2, [pc, #60]	; (8005964 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	fbb2 f2f3 	udiv	r2, r2, r3
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	fb02 f303 	mul.w	r3, r2, r3
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
 8005934:	e007      	b.n	8005946 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005936:	4a0b      	ldr	r2, [pc, #44]	; (8005964 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	fbb2 f2f3 	udiv	r2, r2, r3
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	fb02 f303 	mul.w	r3, r2, r3
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	623b      	str	r3, [r7, #32]
      break;
 800594a:	e002      	b.n	8005952 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800594c:	4b05      	ldr	r3, [pc, #20]	; (8005964 <HAL_RCC_GetSysClockFreq+0xc8>)
 800594e:	623b      	str	r3, [r7, #32]
      break;
 8005950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005952:	6a3b      	ldr	r3, [r7, #32]
}
 8005954:	4618      	mov	r0, r3
 8005956:	372c      	adds	r7, #44	; 0x2c
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	40021000 	.word	0x40021000
 8005964:	007a1200 	.word	0x007a1200
 8005968:	08006d24 	.word	0x08006d24
 800596c:	08006d34 	.word	0x08006d34

08005970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005974:	4b03      	ldr	r3, [pc, #12]	; (8005984 <HAL_RCC_GetHCLKFreq+0x14>)
 8005976:	681b      	ldr	r3, [r3, #0]
}
 8005978:	4618      	mov	r0, r3
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	20000004 	.word	0x20000004

08005988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800598e:	f7ff ffef 	bl	8005970 <HAL_RCC_GetHCLKFreq>
 8005992:	4601      	mov	r1, r0
 8005994:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800599c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80059a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	fa92 f2a2 	rbit	r2, r2
 80059a8:	603a      	str	r2, [r7, #0]
  return result;
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	fab2 f282 	clz	r2, r2
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	40d3      	lsrs	r3, r2
 80059b4:	4a04      	ldr	r2, [pc, #16]	; (80059c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80059b6:	5cd3      	ldrb	r3, [r2, r3]
 80059b8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40021000 	.word	0x40021000
 80059c8:	08006d1c 	.word	0x08006d1c

080059cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80059d2:	f7ff ffcd 	bl	8005970 <HAL_RCC_GetHCLKFreq>
 80059d6:	4601      	mov	r1, r0
 80059d8:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80059e0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80059e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	fa92 f2a2 	rbit	r2, r2
 80059ec:	603a      	str	r2, [r7, #0]
  return result;
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	fab2 f282 	clz	r2, r2
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	40d3      	lsrs	r3, r2
 80059f8:	4a04      	ldr	r2, [pc, #16]	; (8005a0c <HAL_RCC_GetPCLK2Freq+0x40>)
 80059fa:	5cd3      	ldrb	r3, [r2, r3]
 80059fc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005a00:	4618      	mov	r0, r3
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	08006d1c 	.word	0x08006d1c

08005a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b092      	sub	sp, #72	; 0x48
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005a20:	2300      	movs	r3, #0
 8005a22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 80d4 	beq.w	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a34:	4b4e      	ldr	r3, [pc, #312]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10e      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a40:	4b4b      	ldr	r3, [pc, #300]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	4a4a      	ldr	r2, [pc, #296]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a4a:	61d3      	str	r3, [r2, #28]
 8005a4c:	4b48      	ldr	r3, [pc, #288]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a5e:	4b45      	ldr	r3, [pc, #276]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d118      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a6a:	4b42      	ldr	r3, [pc, #264]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a41      	ldr	r2, [pc, #260]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a76:	f7fd f867 	bl	8002b48 <HAL_GetTick>
 8005a7a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a7c:	e008      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a7e:	f7fd f863 	bl	8002b48 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b64      	cmp	r3, #100	; 0x64
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e1d6      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a90:	4b38      	ldr	r3, [pc, #224]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0f0      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a9c:	4b34      	ldr	r3, [pc, #208]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 8084 	beq.w	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d07c      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005abc:	4b2c      	ldr	r3, [pc, #176]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005aca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	fa93 f3a3 	rbit	r3, r3
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ad6:	fab3 f383 	clz	r3, r3
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	461a      	mov	r2, r3
 8005ade:	4b26      	ldr	r3, [pc, #152]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005aee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af2:	fa93 f3a3 	rbit	r3, r3
 8005af6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005afa:	fab3 f383 	clz	r3, r3
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	4b1d      	ldr	r3, [pc, #116]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b04:	4413      	add	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	461a      	mov	r2, r3
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b0e:	4a18      	ldr	r2, [pc, #96]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b12:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d04b      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1e:	f7fd f813 	bl	8002b48 <HAL_GetTick>
 8005b22:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b24:	e00a      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b26:	f7fd f80f 	bl	8002b48 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e180      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	fa93 f3a3 	rbit	r3, r3
 8005b46:	627b      	str	r3, [r7, #36]	; 0x24
 8005b48:	2302      	movs	r3, #2
 8005b4a:	623b      	str	r3, [r7, #32]
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	fa93 f3a3 	rbit	r3, r3
 8005b52:	61fb      	str	r3, [r7, #28]
  return result;
 8005b54:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b56:	fab3 f383 	clz	r3, r3
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	095b      	lsrs	r3, r3, #5
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f043 0302 	orr.w	r3, r3, #2
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d108      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005b6a:	4b01      	ldr	r3, [pc, #4]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	e00d      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005b70:	40021000 	.word	0x40021000
 8005b74:	40007000 	.word	0x40007000
 8005b78:	10908100 	.word	0x10908100
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	fa93 f3a3 	rbit	r3, r3
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	4ba0      	ldr	r3, [pc, #640]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	613a      	str	r2, [r7, #16]
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	fa92 f2a2 	rbit	r2, r2
 8005b96:	60fa      	str	r2, [r7, #12]
  return result;
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	fab2 f282 	clz	r2, r2
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	f002 021f 	and.w	r2, r2, #31
 8005baa:	2101      	movs	r1, #1
 8005bac:	fa01 f202 	lsl.w	r2, r1, r2
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0b7      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005bb6:	4b95      	ldr	r3, [pc, #596]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	4992      	ldr	r1, [pc, #584]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005bc8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d105      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bd0:	4b8e      	ldr	r3, [pc, #568]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	4a8d      	ldr	r2, [pc, #564]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d008      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005be8:	4b88      	ldr	r3, [pc, #544]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bec:	f023 0203 	bic.w	r2, r3, #3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	4985      	ldr	r1, [pc, #532]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d008      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c06:	4b81      	ldr	r3, [pc, #516]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	497e      	ldr	r1, [pc, #504]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d008      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c24:	4b79      	ldr	r3, [pc, #484]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	4976      	ldr	r1, [pc, #472]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d008      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c42:	4b72      	ldr	r3, [pc, #456]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c46:	f023 0210 	bic.w	r2, r3, #16
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	496f      	ldr	r1, [pc, #444]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005c60:	4b6a      	ldr	r3, [pc, #424]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6c:	4967      	ldr	r1, [pc, #412]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d008      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c7e:	4b63      	ldr	r3, [pc, #396]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c82:	f023 0220 	bic.w	r2, r3, #32
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	4960      	ldr	r1, [pc, #384]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c9c:	4b5b      	ldr	r3, [pc, #364]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	4958      	ldr	r1, [pc, #352]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d008      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cba:	4b54      	ldr	r3, [pc, #336]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	4951      	ldr	r1, [pc, #324]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0310 	and.w	r3, r3, #16
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d008      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005cd8:	4b4c      	ldr	r3, [pc, #304]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cdc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	4949      	ldr	r1, [pc, #292]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d008      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005cf6:	4b45      	ldr	r3, [pc, #276]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d02:	4942      	ldr	r1, [pc, #264]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d14:	4b3d      	ldr	r3, [pc, #244]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d20:	493a      	ldr	r1, [pc, #232]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d008      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005d32:	4b36      	ldr	r3, [pc, #216]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d36:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3e:	4933      	ldr	r1, [pc, #204]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d008      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005d50:	4b2e      	ldr	r3, [pc, #184]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5c:	492b      	ldr	r1, [pc, #172]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d008      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005d6e:	4b27      	ldr	r3, [pc, #156]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d72:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	4924      	ldr	r1, [pc, #144]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d008      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005d8c:	4b1f      	ldr	r3, [pc, #124]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	491c      	ldr	r1, [pc, #112]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d008      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005daa:	4b18      	ldr	r3, [pc, #96]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db6:	4915      	ldr	r1, [pc, #84]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d008      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005dc8:	4b10      	ldr	r3, [pc, #64]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dcc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd4:	490d      	ldr	r1, [pc, #52]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d008      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005de6:	4b09      	ldr	r3, [pc, #36]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dea:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005df2:	4906      	ldr	r1, [pc, #24]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00c      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005e04:	4b01      	ldr	r3, [pc, #4]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e08:	e002      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005e0a:	bf00      	nop
 8005e0c:	40021000 	.word	0x40021000
 8005e10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e18:	490b      	ldr	r1, [pc, #44]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d008      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005e2a:	4b07      	ldr	r3, [pc, #28]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e36:	4904      	ldr	r1, [pc, #16]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3748      	adds	r7, #72	; 0x48
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40021000 	.word	0x40021000

08005e4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e09d      	b.n	8005f9a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d108      	bne.n	8005e78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e6e:	d009      	beq.n	8005e84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	61da      	str	r2, [r3, #28]
 8005e76:	e005      	b.n	8005e84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d106      	bne.n	8005ea4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7fc fc26 	bl	80026f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ec4:	d902      	bls.n	8005ecc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e002      	b.n	8005ed2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ed0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005eda:	d007      	beq.n	8005eec <HAL_SPI_Init+0xa0>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ee4:	d002      	beq.n	8005eec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005efc:	431a      	orrs	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	431a      	orrs	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	431a      	orrs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f24:	431a      	orrs	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2e:	ea42 0103 	orr.w	r1, r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	0c1b      	lsrs	r3, r3, #16
 8005f48:	f003 0204 	and.w	r2, r3, #4
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	f003 0310 	and.w	r3, r3, #16
 8005f54:	431a      	orrs	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f68:	ea42 0103 	orr.w	r1, r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69da      	ldr	r2, [r3, #28]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
	...

08005fa4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_SPI_Transmit_DMA+0x20>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e0d8      	b.n	8006176 <HAL_SPI_Transmit_DMA+0x1d2>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d002      	beq.n	8005fde <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005fd8:	2302      	movs	r3, #2
 8005fda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fdc:	e0c6      	b.n	800616c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <HAL_SPI_Transmit_DMA+0x46>
 8005fe4:	88fb      	ldrh	r3, [r7, #6]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fee:	e0bd      	b.n	800616c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2203      	movs	r2, #3
 8005ff4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	88fa      	ldrh	r2, [r7, #6]
 8006008:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	88fa      	ldrh	r2, [r7, #6]
 800600e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800603a:	d10f      	bne.n	800605c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800604a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800605a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006060:	4a47      	ldr	r2, [pc, #284]	; (8006180 <HAL_SPI_Transmit_DMA+0x1dc>)
 8006062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006068:	4a46      	ldr	r2, [pc, #280]	; (8006184 <HAL_SPI_Transmit_DMA+0x1e0>)
 800606a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006070:	4a45      	ldr	r2, [pc, #276]	; (8006188 <HAL_SPI_Transmit_DMA+0x1e4>)
 8006072:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006078:	2200      	movs	r2, #0
 800607a:	635a      	str	r2, [r3, #52]	; 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800608a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006094:	d82d      	bhi.n	80060f2 <HAL_SPI_Transmit_DMA+0x14e>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a0:	d127      	bne.n	80060f2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10f      	bne.n	80060d0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060be:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	085b      	lsrs	r3, r3, #1
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060ce:	e010      	b.n	80060f2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060de:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	085b      	lsrs	r3, r3, #1
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	3301      	adds	r3, #1
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	4619      	mov	r1, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	330c      	adds	r3, #12
 8006102:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006108:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800610a:	f7fe f827 	bl	800415c <HAL_DMA_Start_IT>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00c      	beq.n	800612e <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006118:	f043 0210 	orr.w	r2, r3, #16
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800612c:	e01e      	b.n	800616c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006138:	2b40      	cmp	r3, #64	; 0x40
 800613a:	d007      	beq.n	800614c <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800614a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0220 	orr.w	r2, r2, #32
 800615a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0202 	orr.w	r2, r2, #2
 800616a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006174:	7dfb      	ldrb	r3, [r7, #23]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	0800626f 	.word	0x0800626f
 8006184:	080061c9 	.word	0x080061c9
 8006188:	0800628b 	.word	0x0800628b

0800618c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061d6:	f7fc fcb7 	bl	8002b48 <HAL_GetTick>
 80061da:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0320 	and.w	r3, r3, #32
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	d03b      	beq.n	8006262 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 0220 	bic.w	r2, r2, #32
 80061f8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0202 	bic.w	r2, r2, #2
 8006208:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	2164      	movs	r1, #100	; 0x64
 800620e:	6978      	ldr	r0, [r7, #20]
 8006210:	f000 f972 	bl	80064f8 <SPI_EndRxTxTransaction>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d005      	beq.n	8006226 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800621e:	f043 0220 	orr.w	r2, r3, #32
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10a      	bne.n	8006244 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	2200      	movs	r2, #0
 8006248:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800625a:	6978      	ldr	r0, [r7, #20]
 800625c:	f7ff ffaa 	bl	80061b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006260:	e002      	b.n	8006268 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006262:	6978      	ldr	r0, [r7, #20]
 8006264:	f7ff ff92 	bl	800618c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006268:	3718      	adds	r7, #24
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f7ff ff8f 	bl	80061a0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006282:	bf00      	nop
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0203 	bic.w	r2, r2, #3
 80062a6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ac:	f043 0210 	orr.w	r2, r3, #16
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f7ff ff79 	bl	80061b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80062c2:	bf00      	nop
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	4613      	mov	r3, r2
 80062da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062dc:	f7fc fc34 	bl	8002b48 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e4:	1a9b      	subs	r3, r3, r2
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	4413      	add	r3, r2
 80062ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062ec:	f7fc fc2c 	bl	8002b48 <HAL_GetTick>
 80062f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062f2:	4b39      	ldr	r3, [pc, #228]	; (80063d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	015b      	lsls	r3, r3, #5
 80062f8:	0d1b      	lsrs	r3, r3, #20
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	fb02 f303 	mul.w	r3, r2, r3
 8006300:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006302:	e054      	b.n	80063ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630a:	d050      	beq.n	80063ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800630c:	f7fc fc1c 	bl	8002b48 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	69fa      	ldr	r2, [r7, #28]
 8006318:	429a      	cmp	r2, r3
 800631a:	d902      	bls.n	8006322 <SPI_WaitFlagStateUntilTimeout+0x56>
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d13d      	bne.n	800639e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006330:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800633a:	d111      	bne.n	8006360 <SPI_WaitFlagStateUntilTimeout+0x94>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006344:	d004      	beq.n	8006350 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800634e:	d107      	bne.n	8006360 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800635e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006368:	d10f      	bne.n	800638a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006388:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e017      	b.n	80063ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4013      	ands	r3, r2
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	bf0c      	ite	eq
 80063be:	2301      	moveq	r3, #1
 80063c0:	2300      	movne	r3, #0
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d19b      	bne.n	8006304 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3720      	adds	r7, #32
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000004 	.word	0x20000004

080063dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80063ea:	f7fc fbad 	bl	8002b48 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	1a9b      	subs	r3, r3, r2
 80063f4:	683a      	ldr	r2, [r7, #0]
 80063f6:	4413      	add	r3, r2
 80063f8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063fa:	f7fc fba5 	bl	8002b48 <HAL_GetTick>
 80063fe:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006400:	4b3c      	ldr	r3, [pc, #240]	; (80064f4 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	4613      	mov	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	00da      	lsls	r2, r3, #3
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	0d1b      	lsrs	r3, r3, #20
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	fb02 f303 	mul.w	r3, r2, r3
 8006416:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8006418:	e05f      	b.n	80064da <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006420:	d106      	bne.n	8006430 <SPI_WaitFifoStateUntilTimeout+0x54>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d103      	bne.n	8006430 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	330c      	adds	r3, #12
 800642e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006436:	d050      	beq.n	80064da <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006438:	f7fc fb86 	bl	8002b48 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	69fa      	ldr	r2, [r7, #28]
 8006444:	429a      	cmp	r2, r3
 8006446:	d902      	bls.n	800644e <SPI_WaitFifoStateUntilTimeout+0x72>
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d13d      	bne.n	80064ca <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800645c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006466:	d111      	bne.n	800648c <SPI_WaitFifoStateUntilTimeout+0xb0>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006470:	d004      	beq.n	800647c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800647a:	d107      	bne.n	800648c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800648a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006494:	d10f      	bne.n	80064b6 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e010      	b.n	80064ec <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	3b01      	subs	r3, #1
 80064d8:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4013      	ands	r3, r2
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d197      	bne.n	800641a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3720      	adds	r7, #32
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20000004 	.word	0x20000004

080064f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af02      	add	r7, sp, #8
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2200      	movs	r2, #0
 800650c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f7ff ff63 	bl	80063dc <SPI_WaitFifoStateUntilTimeout>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d007      	beq.n	800652c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006520:	f043 0220 	orr.w	r2, r3, #32
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e027      	b.n	800657c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2200      	movs	r2, #0
 8006534:	2180      	movs	r1, #128	; 0x80
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f7ff fec8 	bl	80062cc <SPI_WaitFlagStateUntilTimeout>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d007      	beq.n	8006552 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006546:	f043 0220 	orr.w	r2, r3, #32
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e014      	b.n	800657c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	2200      	movs	r2, #0
 800655a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f7ff ff3c 	bl	80063dc <SPI_WaitFifoStateUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d007      	beq.n	800657a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800656e:	f043 0220 	orr.w	r2, r3, #32
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e000      	b.n	800657c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e040      	b.n	8006618 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7fc fa06 	bl	80029b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2224      	movs	r2, #36	; 0x24
 80065b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0201 	bic.w	r2, r2, #1
 80065c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f82c 	bl	8006620 <UART_SetConfig>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d101      	bne.n	80065d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e022      	b.n	8006618 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f9f6 	bl	80069cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689a      	ldr	r2, [r3, #8]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0201 	orr.w	r2, r2, #1
 800660e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fa7d 	bl	8006b10 <UART_CheckIdleState>
 8006616:	4603      	mov	r3, r0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	431a      	orrs	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	431a      	orrs	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	4313      	orrs	r3, r2
 8006642:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	4bab      	ldr	r3, [pc, #684]	; (80068f8 <UART_SetConfig+0x2d8>)
 800664c:	4013      	ands	r3, r2
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6812      	ldr	r2, [r2, #0]
 8006652:	6979      	ldr	r1, [r7, #20]
 8006654:	430b      	orrs	r3, r1
 8006656:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68da      	ldr	r2, [r3, #12]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	4313      	orrs	r3, r2
 800667c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	430a      	orrs	r2, r1
 8006690:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a99      	ldr	r2, [pc, #612]	; (80068fc <UART_SetConfig+0x2dc>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d120      	bne.n	80066de <UART_SetConfig+0xbe>
 800669c:	4b98      	ldr	r3, [pc, #608]	; (8006900 <UART_SetConfig+0x2e0>)
 800669e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a0:	f003 0303 	and.w	r3, r3, #3
 80066a4:	2b03      	cmp	r3, #3
 80066a6:	d817      	bhi.n	80066d8 <UART_SetConfig+0xb8>
 80066a8:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <UART_SetConfig+0x90>)
 80066aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ae:	bf00      	nop
 80066b0:	080066c1 	.word	0x080066c1
 80066b4:	080066cd 	.word	0x080066cd
 80066b8:	080066d3 	.word	0x080066d3
 80066bc:	080066c7 	.word	0x080066c7
 80066c0:	2301      	movs	r3, #1
 80066c2:	77fb      	strb	r3, [r7, #31]
 80066c4:	e0b5      	b.n	8006832 <UART_SetConfig+0x212>
 80066c6:	2302      	movs	r3, #2
 80066c8:	77fb      	strb	r3, [r7, #31]
 80066ca:	e0b2      	b.n	8006832 <UART_SetConfig+0x212>
 80066cc:	2304      	movs	r3, #4
 80066ce:	77fb      	strb	r3, [r7, #31]
 80066d0:	e0af      	b.n	8006832 <UART_SetConfig+0x212>
 80066d2:	2308      	movs	r3, #8
 80066d4:	77fb      	strb	r3, [r7, #31]
 80066d6:	e0ac      	b.n	8006832 <UART_SetConfig+0x212>
 80066d8:	2310      	movs	r3, #16
 80066da:	77fb      	strb	r3, [r7, #31]
 80066dc:	e0a9      	b.n	8006832 <UART_SetConfig+0x212>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a88      	ldr	r2, [pc, #544]	; (8006904 <UART_SetConfig+0x2e4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d124      	bne.n	8006732 <UART_SetConfig+0x112>
 80066e8:	4b85      	ldr	r3, [pc, #532]	; (8006900 <UART_SetConfig+0x2e0>)
 80066ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066f4:	d011      	beq.n	800671a <UART_SetConfig+0xfa>
 80066f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066fa:	d817      	bhi.n	800672c <UART_SetConfig+0x10c>
 80066fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006700:	d011      	beq.n	8006726 <UART_SetConfig+0x106>
 8006702:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006706:	d811      	bhi.n	800672c <UART_SetConfig+0x10c>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <UART_SetConfig+0xf4>
 800670c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006710:	d006      	beq.n	8006720 <UART_SetConfig+0x100>
 8006712:	e00b      	b.n	800672c <UART_SetConfig+0x10c>
 8006714:	2300      	movs	r3, #0
 8006716:	77fb      	strb	r3, [r7, #31]
 8006718:	e08b      	b.n	8006832 <UART_SetConfig+0x212>
 800671a:	2302      	movs	r3, #2
 800671c:	77fb      	strb	r3, [r7, #31]
 800671e:	e088      	b.n	8006832 <UART_SetConfig+0x212>
 8006720:	2304      	movs	r3, #4
 8006722:	77fb      	strb	r3, [r7, #31]
 8006724:	e085      	b.n	8006832 <UART_SetConfig+0x212>
 8006726:	2308      	movs	r3, #8
 8006728:	77fb      	strb	r3, [r7, #31]
 800672a:	e082      	b.n	8006832 <UART_SetConfig+0x212>
 800672c:	2310      	movs	r3, #16
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e07f      	b.n	8006832 <UART_SetConfig+0x212>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a74      	ldr	r2, [pc, #464]	; (8006908 <UART_SetConfig+0x2e8>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d124      	bne.n	8006786 <UART_SetConfig+0x166>
 800673c:	4b70      	ldr	r3, [pc, #448]	; (8006900 <UART_SetConfig+0x2e0>)
 800673e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006740:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006744:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006748:	d011      	beq.n	800676e <UART_SetConfig+0x14e>
 800674a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800674e:	d817      	bhi.n	8006780 <UART_SetConfig+0x160>
 8006750:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006754:	d011      	beq.n	800677a <UART_SetConfig+0x15a>
 8006756:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800675a:	d811      	bhi.n	8006780 <UART_SetConfig+0x160>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <UART_SetConfig+0x148>
 8006760:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006764:	d006      	beq.n	8006774 <UART_SetConfig+0x154>
 8006766:	e00b      	b.n	8006780 <UART_SetConfig+0x160>
 8006768:	2300      	movs	r3, #0
 800676a:	77fb      	strb	r3, [r7, #31]
 800676c:	e061      	b.n	8006832 <UART_SetConfig+0x212>
 800676e:	2302      	movs	r3, #2
 8006770:	77fb      	strb	r3, [r7, #31]
 8006772:	e05e      	b.n	8006832 <UART_SetConfig+0x212>
 8006774:	2304      	movs	r3, #4
 8006776:	77fb      	strb	r3, [r7, #31]
 8006778:	e05b      	b.n	8006832 <UART_SetConfig+0x212>
 800677a:	2308      	movs	r3, #8
 800677c:	77fb      	strb	r3, [r7, #31]
 800677e:	e058      	b.n	8006832 <UART_SetConfig+0x212>
 8006780:	2310      	movs	r3, #16
 8006782:	77fb      	strb	r3, [r7, #31]
 8006784:	e055      	b.n	8006832 <UART_SetConfig+0x212>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a60      	ldr	r2, [pc, #384]	; (800690c <UART_SetConfig+0x2ec>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d124      	bne.n	80067da <UART_SetConfig+0x1ba>
 8006790:	4b5b      	ldr	r3, [pc, #364]	; (8006900 <UART_SetConfig+0x2e0>)
 8006792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006794:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006798:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800679c:	d011      	beq.n	80067c2 <UART_SetConfig+0x1a2>
 800679e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067a2:	d817      	bhi.n	80067d4 <UART_SetConfig+0x1b4>
 80067a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067a8:	d011      	beq.n	80067ce <UART_SetConfig+0x1ae>
 80067aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067ae:	d811      	bhi.n	80067d4 <UART_SetConfig+0x1b4>
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <UART_SetConfig+0x19c>
 80067b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067b8:	d006      	beq.n	80067c8 <UART_SetConfig+0x1a8>
 80067ba:	e00b      	b.n	80067d4 <UART_SetConfig+0x1b4>
 80067bc:	2300      	movs	r3, #0
 80067be:	77fb      	strb	r3, [r7, #31]
 80067c0:	e037      	b.n	8006832 <UART_SetConfig+0x212>
 80067c2:	2302      	movs	r3, #2
 80067c4:	77fb      	strb	r3, [r7, #31]
 80067c6:	e034      	b.n	8006832 <UART_SetConfig+0x212>
 80067c8:	2304      	movs	r3, #4
 80067ca:	77fb      	strb	r3, [r7, #31]
 80067cc:	e031      	b.n	8006832 <UART_SetConfig+0x212>
 80067ce:	2308      	movs	r3, #8
 80067d0:	77fb      	strb	r3, [r7, #31]
 80067d2:	e02e      	b.n	8006832 <UART_SetConfig+0x212>
 80067d4:	2310      	movs	r3, #16
 80067d6:	77fb      	strb	r3, [r7, #31]
 80067d8:	e02b      	b.n	8006832 <UART_SetConfig+0x212>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a4c      	ldr	r2, [pc, #304]	; (8006910 <UART_SetConfig+0x2f0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d124      	bne.n	800682e <UART_SetConfig+0x20e>
 80067e4:	4b46      	ldr	r3, [pc, #280]	; (8006900 <UART_SetConfig+0x2e0>)
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80067ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80067f0:	d011      	beq.n	8006816 <UART_SetConfig+0x1f6>
 80067f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80067f6:	d817      	bhi.n	8006828 <UART_SetConfig+0x208>
 80067f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067fc:	d011      	beq.n	8006822 <UART_SetConfig+0x202>
 80067fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006802:	d811      	bhi.n	8006828 <UART_SetConfig+0x208>
 8006804:	2b00      	cmp	r3, #0
 8006806:	d003      	beq.n	8006810 <UART_SetConfig+0x1f0>
 8006808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800680c:	d006      	beq.n	800681c <UART_SetConfig+0x1fc>
 800680e:	e00b      	b.n	8006828 <UART_SetConfig+0x208>
 8006810:	2300      	movs	r3, #0
 8006812:	77fb      	strb	r3, [r7, #31]
 8006814:	e00d      	b.n	8006832 <UART_SetConfig+0x212>
 8006816:	2302      	movs	r3, #2
 8006818:	77fb      	strb	r3, [r7, #31]
 800681a:	e00a      	b.n	8006832 <UART_SetConfig+0x212>
 800681c:	2304      	movs	r3, #4
 800681e:	77fb      	strb	r3, [r7, #31]
 8006820:	e007      	b.n	8006832 <UART_SetConfig+0x212>
 8006822:	2308      	movs	r3, #8
 8006824:	77fb      	strb	r3, [r7, #31]
 8006826:	e004      	b.n	8006832 <UART_SetConfig+0x212>
 8006828:	2310      	movs	r3, #16
 800682a:	77fb      	strb	r3, [r7, #31]
 800682c:	e001      	b.n	8006832 <UART_SetConfig+0x212>
 800682e:	2310      	movs	r3, #16
 8006830:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800683a:	d16d      	bne.n	8006918 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 800683c:	7ffb      	ldrb	r3, [r7, #31]
 800683e:	2b08      	cmp	r3, #8
 8006840:	d827      	bhi.n	8006892 <UART_SetConfig+0x272>
 8006842:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <UART_SetConfig+0x228>)
 8006844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006848:	0800686d 	.word	0x0800686d
 800684c:	08006875 	.word	0x08006875
 8006850:	0800687d 	.word	0x0800687d
 8006854:	08006893 	.word	0x08006893
 8006858:	08006883 	.word	0x08006883
 800685c:	08006893 	.word	0x08006893
 8006860:	08006893 	.word	0x08006893
 8006864:	08006893 	.word	0x08006893
 8006868:	0800688b 	.word	0x0800688b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800686c:	f7ff f88c 	bl	8005988 <HAL_RCC_GetPCLK1Freq>
 8006870:	61b8      	str	r0, [r7, #24]
        break;
 8006872:	e013      	b.n	800689c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006874:	f7ff f8aa 	bl	80059cc <HAL_RCC_GetPCLK2Freq>
 8006878:	61b8      	str	r0, [r7, #24]
        break;
 800687a:	e00f      	b.n	800689c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800687c:	4b25      	ldr	r3, [pc, #148]	; (8006914 <UART_SetConfig+0x2f4>)
 800687e:	61bb      	str	r3, [r7, #24]
        break;
 8006880:	e00c      	b.n	800689c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006882:	f7ff f80b 	bl	800589c <HAL_RCC_GetSysClockFreq>
 8006886:	61b8      	str	r0, [r7, #24]
        break;
 8006888:	e008      	b.n	800689c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800688a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800688e:	61bb      	str	r3, [r7, #24]
        break;
 8006890:	e004      	b.n	800689c <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	77bb      	strb	r3, [r7, #30]
        break;
 800689a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 8086 	beq.w	80069b0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	005a      	lsls	r2, r3, #1
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	085b      	lsrs	r3, r3, #1
 80068ae:	441a      	add	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	2b0f      	cmp	r3, #15
 80068c0:	d916      	bls.n	80068f0 <UART_SetConfig+0x2d0>
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c8:	d212      	bcs.n	80068f0 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f023 030f 	bic.w	r3, r3, #15
 80068d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	085b      	lsrs	r3, r3, #1
 80068d8:	b29b      	uxth	r3, r3
 80068da:	f003 0307 	and.w	r3, r3, #7
 80068de:	b29a      	uxth	r2, r3
 80068e0:	89fb      	ldrh	r3, [r7, #14]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	89fa      	ldrh	r2, [r7, #14]
 80068ec:	60da      	str	r2, [r3, #12]
 80068ee:	e05f      	b.n	80069b0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	77bb      	strb	r3, [r7, #30]
 80068f4:	e05c      	b.n	80069b0 <UART_SetConfig+0x390>
 80068f6:	bf00      	nop
 80068f8:	efff69f3 	.word	0xefff69f3
 80068fc:	40013800 	.word	0x40013800
 8006900:	40021000 	.word	0x40021000
 8006904:	40004400 	.word	0x40004400
 8006908:	40004800 	.word	0x40004800
 800690c:	40004c00 	.word	0x40004c00
 8006910:	40005000 	.word	0x40005000
 8006914:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8006918:	7ffb      	ldrb	r3, [r7, #31]
 800691a:	2b08      	cmp	r3, #8
 800691c:	d827      	bhi.n	800696e <UART_SetConfig+0x34e>
 800691e:	a201      	add	r2, pc, #4	; (adr r2, 8006924 <UART_SetConfig+0x304>)
 8006920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006924:	08006949 	.word	0x08006949
 8006928:	08006951 	.word	0x08006951
 800692c:	08006959 	.word	0x08006959
 8006930:	0800696f 	.word	0x0800696f
 8006934:	0800695f 	.word	0x0800695f
 8006938:	0800696f 	.word	0x0800696f
 800693c:	0800696f 	.word	0x0800696f
 8006940:	0800696f 	.word	0x0800696f
 8006944:	08006967 	.word	0x08006967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006948:	f7ff f81e 	bl	8005988 <HAL_RCC_GetPCLK1Freq>
 800694c:	61b8      	str	r0, [r7, #24]
        break;
 800694e:	e013      	b.n	8006978 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006950:	f7ff f83c 	bl	80059cc <HAL_RCC_GetPCLK2Freq>
 8006954:	61b8      	str	r0, [r7, #24]
        break;
 8006956:	e00f      	b.n	8006978 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006958:	4b1b      	ldr	r3, [pc, #108]	; (80069c8 <UART_SetConfig+0x3a8>)
 800695a:	61bb      	str	r3, [r7, #24]
        break;
 800695c:	e00c      	b.n	8006978 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800695e:	f7fe ff9d 	bl	800589c <HAL_RCC_GetSysClockFreq>
 8006962:	61b8      	str	r0, [r7, #24]
        break;
 8006964:	e008      	b.n	8006978 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800696a:	61bb      	str	r3, [r7, #24]
        break;
 800696c:	e004      	b.n	8006978 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	77bb      	strb	r3, [r7, #30]
        break;
 8006976:	bf00      	nop
    }

    if (pclk != 0U)
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d018      	beq.n	80069b0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	085a      	lsrs	r2, r3, #1
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	441a      	add	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006990:	b29b      	uxth	r3, r3
 8006992:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	2b0f      	cmp	r3, #15
 8006998:	d908      	bls.n	80069ac <UART_SetConfig+0x38c>
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069a0:	d204      	bcs.n	80069ac <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	60da      	str	r2, [r3, #12]
 80069aa:	e001      	b.n	80069b0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80069bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3720      	adds	r7, #32
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	007a1200 	.word	0x007a1200

080069cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00a      	beq.n	80069f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1c:	f003 0304 	and.w	r3, r3, #4
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00a      	beq.n	8006a3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3e:	f003 0308 	and.w	r3, r3, #8
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	f003 0310 	and.w	r3, r3, #16
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00a      	beq.n	8006a7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	f003 0320 	and.w	r3, r3, #32
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d01a      	beq.n	8006ae2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aca:	d10a      	bne.n	8006ae2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	605a      	str	r2, [r3, #4]
  }
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b20:	f7fc f812 	bl	8002b48 <HAL_GetTick>
 8006b24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0308 	and.w	r3, r3, #8
 8006b30:	2b08      	cmp	r3, #8
 8006b32:	d10e      	bne.n	8006b52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f82d 	bl	8006ba2 <UART_WaitOnFlagUntilTimeout>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e023      	b.n	8006b9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	d10e      	bne.n	8006b7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f817 	bl	8006ba2 <UART_WaitOnFlagUntilTimeout>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d001      	beq.n	8006b7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e00d      	b.n	8006b9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2220      	movs	r2, #32
 8006b82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2220      	movs	r2, #32
 8006b88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	603b      	str	r3, [r7, #0]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb2:	e05e      	b.n	8006c72 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bba:	d05a      	beq.n	8006c72 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bbc:	f7fb ffc4 	bl	8002b48 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d302      	bcc.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d11b      	bne.n	8006c0a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006be0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0201 	bic.w	r2, r2, #1
 8006bf0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e043      	b.n	8006c92 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d02c      	beq.n	8006c72 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c26:	d124      	bne.n	8006c72 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c40:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0201 	bic.w	r2, r2, #1
 8006c50:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2220      	movs	r2, #32
 8006c56:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2220      	movs	r2, #32
 8006c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e00f      	b.n	8006c92 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69da      	ldr	r2, [r3, #28]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	bf0c      	ite	eq
 8006c82:	2301      	moveq	r3, #1
 8006c84:	2300      	movne	r3, #0
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	461a      	mov	r2, r3
 8006c8a:	79fb      	ldrb	r3, [r7, #7]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d091      	beq.n	8006bb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
	...

08006c9c <__libc_init_array>:
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	4d0d      	ldr	r5, [pc, #52]	; (8006cd4 <__libc_init_array+0x38>)
 8006ca0:	4c0d      	ldr	r4, [pc, #52]	; (8006cd8 <__libc_init_array+0x3c>)
 8006ca2:	1b64      	subs	r4, r4, r5
 8006ca4:	10a4      	asrs	r4, r4, #2
 8006ca6:	2600      	movs	r6, #0
 8006ca8:	42a6      	cmp	r6, r4
 8006caa:	d109      	bne.n	8006cc0 <__libc_init_array+0x24>
 8006cac:	4d0b      	ldr	r5, [pc, #44]	; (8006cdc <__libc_init_array+0x40>)
 8006cae:	4c0c      	ldr	r4, [pc, #48]	; (8006ce0 <__libc_init_array+0x44>)
 8006cb0:	f000 f820 	bl	8006cf4 <_init>
 8006cb4:	1b64      	subs	r4, r4, r5
 8006cb6:	10a4      	asrs	r4, r4, #2
 8006cb8:	2600      	movs	r6, #0
 8006cba:	42a6      	cmp	r6, r4
 8006cbc:	d105      	bne.n	8006cca <__libc_init_array+0x2e>
 8006cbe:	bd70      	pop	{r4, r5, r6, pc}
 8006cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cc4:	4798      	blx	r3
 8006cc6:	3601      	adds	r6, #1
 8006cc8:	e7ee      	b.n	8006ca8 <__libc_init_array+0xc>
 8006cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cce:	4798      	blx	r3
 8006cd0:	3601      	adds	r6, #1
 8006cd2:	e7f2      	b.n	8006cba <__libc_init_array+0x1e>
 8006cd4:	08006d44 	.word	0x08006d44
 8006cd8:	08006d44 	.word	0x08006d44
 8006cdc:	08006d44 	.word	0x08006d44
 8006ce0:	08006d48 	.word	0x08006d48

08006ce4 <memset>:
 8006ce4:	4402      	add	r2, r0
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d100      	bne.n	8006cee <memset+0xa>
 8006cec:	4770      	bx	lr
 8006cee:	f803 1b01 	strb.w	r1, [r3], #1
 8006cf2:	e7f9      	b.n	8006ce8 <memset+0x4>

08006cf4 <_init>:
 8006cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf6:	bf00      	nop
 8006cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cfa:	bc08      	pop	{r3}
 8006cfc:	469e      	mov	lr, r3
 8006cfe:	4770      	bx	lr

08006d00 <_fini>:
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	bf00      	nop
 8006d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d06:	bc08      	pop	{r3}
 8006d08:	469e      	mov	lr, r3
 8006d0a:	4770      	bx	lr
